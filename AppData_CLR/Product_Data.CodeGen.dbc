;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author: Richard C. Morris, RCP Consultants.
;;
;; Template Name:   Symphony Framework : SYMPHONY_DATA_CLR_V3_2.tpl
;;
;;***************************************************************************
import System
import System.Collections.Generic
import System.Text

import Symphony.Conductor.Model
import Symphony.Conductor.Converters

namespace AppData

    ;;define a structure that we can use around the applicaiton

	structure STRProduct
		.include 'product' repository  , norecord
	endstructure

    public partial class Product_Data extends Symphony.Conductor.Model.DataObjectBase

		public const RPSStructureName	,String	,"PRODUCT"
		public const RPSStructureSize	,Int32	,583

		private product_main	,STRProduct
		private product_store	,STRProduct

		private mDoneSynergyRecordValue	,boolean

		;;use symphony converters
		private mDateConveter		,@SynergyDecimalDateConverter	,new SynergyDecimalDateConverter()
		private mAlphaConveter		,@SynergyAlphaConverter	,new SynergyAlphaConverter()
		private mAlphaTFConverter	,@SynergyAlphaYNConverter	,new SynergyAlphaYNConverter()
		private mDecimalConverter	,@SynergyDecimalConverter	,new SynergyDecimalConverter()
		private mImpliedDecimalConveter	,@SynergyImpliedDecimalConverter	,new SynergyImpliedDecimalConverter()
		private mIntegerConveter	,@SynergyIntConverter	,new SynergyIntConverter()
		private mDecimalTFConverter	,@SynergyDecimalTFConverter	,new SynergyDecimalTFConverter()

		static method Product_Data
			endparams
		proc
			mStaticFieldList = new List<BaseFieldInformation>()
			mStaticFieldDictionary = new Dictionary<string, int>()
			mStaticFieldNameList = new List<String>()
			mStaticFieldHeadingList = new List<String>()

			
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "PROD_CODE", "Prod_code",  "", "",
			&	"", "PROD_CODE", 1, 6,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "PROD_DESCRIPTION", "Prod_description",  "", "",
			&	"", "PROD_DESCRIPTION", 7, 40,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "SUPP_CODE", "Supp_code",  "", "",
			&	"", "SUPP_CODE", 47, 6,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "COST_PRICE", "Cost_price",  "", "",
			&	"", "COST_PRICE", 53, 8,
			&	0, 0, 0, 0,
			&	"IMPLIED", false, 0, 999999.99)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "SELL_PRICE", "Sell_price",  "", "",
			&	"", "SELL_PRICE", 61, 8,
			&	0, 0, 0, 0,
			&	"IMPLIED", false, 0, 999999.99)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "PACK_SIZE", "Pack_size",  "", "",
			&	"", "PACK_SIZE", 69, 10,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "VAT_CODE", "Vat_code",  "", "",
			&	"", "VAT_CODE", 79, 1,
			&	0, 0, 0, 0,
			&	"DECIMAL", false, 0, 3)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "PROD_GROUP", "Prod_group",  "", "",
			&	"", "PROD_GROUP", 80, 3,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "PROMOTION", "Promotion",  "", "",
			&	"", "PROMOTION", 83, 1,
			&	0, 0, 0, 0,
			&	"DECIMAL", false, 0, 1)

			mStaticFieldNameList.Add("Prod_code")
			mStaticFieldHeadingList.Add("Product Code")
			mStaticFieldNameList.Add("Prod_description")
			mStaticFieldHeadingList.Add("Description")
			mStaticFieldNameList.Add("Supp_code")
			mStaticFieldHeadingList.Add("Supplier")
			mStaticFieldNameList.Add("Cost_price")
			mStaticFieldHeadingList.Add("Cost Price")
			mStaticFieldNameList.Add("Sell_price")
			mStaticFieldHeadingList.Add("Selling Price")
			mStaticFieldNameList.Add("Pack_size")
			mStaticFieldHeadingList.Add("Pack Size")
			mStaticFieldNameList.Add("Vat_code")
			mStaticFieldHeadingList.Add("VAT Code")
			mStaticFieldNameList.Add("Prod_group")
			mStaticFieldHeadingList.Add("Product Group")
			mStaticFieldNameList.Add("Promotion")
			mStaticFieldHeadingList.Add("On Offer ?")

			mreturn
		endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Product_Data
            endparams
            parent()
        proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			configureFieldInfo()
			setFieldNames()
			InitData()
			mDoneSynergyRecordValue = false
			extendedConstructor()
        endmethod

        ;;; <summary>
        ;;; Alternate constructor, accepts the inital value to assign to the object
        ;;; </summary>
        ;;; <param name="synRec">Provide the data to load into the _DATAOBJECT_</param>
        public method Product_Data
            in req synRec       ,String
            endparams
            parent()
        proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			product_main = synRec
			;OriginalSynergyRecord = synRec
			extendedConstructor()
        endmethod

		;;; <summary>
		;;; Alternate constructor, accepts the inital value to assign to the object
		;;; </summary>
		;;; <param name="synRec">Provide the data to load into the _DATAOBJECT_</param>
		public method Product_Data
			in req synRec       ,STRProduct
			endparams
			parent()
		proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			product_main = synRec
			;OriginalSynergyRecord = synRec
			extendedConstructor()
		endmethod

		;;; <summary>
		;;; Alternate constructor, accepts the inital value to assign to the object.
		;;; Also accepts the boolean value to assign to the ObjectRaisesPropertyChanged property.
		;;; </summary>
		;;; <param name="synRec">Provide the data to load into the _DATAOBJECT_</param>
		;;; <param name="notifyUI">values passed onto the ObjectRaisesPropertyChanged property.</param>
		public method Product_Data
			in req synRec       ,String
			in req notifyUI		,DataObjectNotificationState
			endparams
			parent()
		proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			ObjectRaisesPropertyChanged = notifyUI
			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			product_main = synRec
			;OriginalSynergyRecord = synRec
			extendedConstructor()
		endmethod

		;;; <summary>
		;;; Alternate constructor, accepts the inital value to assign to the object.
		;;; Also accepts the boolean value to assign to the ObjectRaisesPropertyChanged property.
		;;; </summary>
		;;; <param name="synRec">Provide the data to load into the _DATAOBJECT_</param>
		;;; <param name="notifyUI">values passed onto the ObjectRaisesPropertyChanged property.</param>
		public method Product_Data
			in req synRec       ,STRProduct
			in req notifyUI		,DataObjectNotificationState
			endparams
			parent()
		proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			ObjectRaisesPropertyChanged = notifyUI
			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			product_main = synRec
;			OriginalSynergyRecord = synRec
			extendedConstructor()
		endmethod

        ;;Set up the arrays of field details
        private method configureFieldInfo	,void
			endparams
		proc
			
			mfieldArray = mStaticFieldList
			mfieldDictionary = mStaticFieldDictionary

		endmethod

		private static mStaticFieldList			,@List<BaseFieldInformation>
		private static mStaticFieldDictionary	,@Dictionary<string, int>
		private static mStaticFieldNameList		,@List<String>
		private static mStaticFieldHeadingList	,@List<String>

        ;;Set up the arrays of field names and headings
        private method setFieldNames	,void
			endparams
		proc

			mFieldNames = mStaticFieldNameList
			mFieldHeadings = mStaticFieldHeadingList
			
		endmethod

        ;;Expose fields as properties for data binding

        ;;Prod_code
		public property Prod_code, String
			method get
			proc
				mreturn (string)mAlphaConveter.Convert(product_main.prod_code, ^null, ^null, ^null)
			endmethod
			method set
			proc
				if (Product_main.prod_code .nes. (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
					Product_main.prod_code = (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(1)
					RaisePropertyChanged("Prod_code")
				end
			endmethod
		endproperty
        ;;Prod_description
		public property Prod_description, String
			method get
			proc
				mreturn (string)mAlphaConveter.Convert(product_main.prod_description, ^null, ^null, ^null)
			endmethod
			method set
			proc
				if (Product_main.prod_description .nes. (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
					Product_main.prod_description = (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(2)
					RaisePropertyChanged("Prod_description")
				end
			endmethod
		endproperty
        ;;Supp_code
		public property Supp_code, String
			method get
			proc
				mreturn (string)mAlphaConveter.Convert(product_main.supp_code, ^null, ^null, ^null)
			endmethod
			method set
			proc
				if (Product_main.supp_code .nes. (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
					Product_main.supp_code = (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(3)
					RaisePropertyChanged("Supp_code")
				end
			endmethod
		endproperty
        ;;Cost_price
		public property Cost_price, Decimal
			method get
			proc
				mreturn (decimal)mImpliedDecimalConveter.Convert(product_main.cost_price, ^null, ^null, ^null)
			endmethod
			method set
			proc
				if (Product_main.cost_price .ne. (id)mImpliedDecimalConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
				    Product_main.cost_price = (id)mImpliedDecimalConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(4)
					RaisePropertyChanged("Cost_price")
				end
			endmethod
		endproperty
        ;;Sell_price
		public property Sell_price, Decimal
			method get
			proc
				mreturn (decimal)mImpliedDecimalConveter.Convert(product_main.sell_price, ^null, ^null, ^null)
			endmethod
			method set
			proc
				if (Product_main.sell_price .ne. (id)mImpliedDecimalConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
				    Product_main.sell_price = (id)mImpliedDecimalConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(5)
					RaisePropertyChanged("Sell_price")
				end
			endmethod
		endproperty
        ;;Pack_size
		public property Pack_size, String
			method get
			proc
				mreturn (string)mAlphaConveter.Convert(product_main.pack_size, ^null, ^null, ^null)
			endmethod
			method set
			proc
				if (Product_main.pack_size .nes. (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
					Product_main.pack_size = (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(6)
					RaisePropertyChanged("Pack_size")
				end
			endmethod
		endproperty
        ;;Vat_code
		public property Vat_code, Int32
			method get
			proc
				mreturn (int32)mIntegerConveter.Convert(product_main.vat_code, ^null, ^null, ^null)
			endmethod
			method set
			proc
				if (Product_main.vat_code .ne. (d)((i)mIntegerConveter.ConvertBack(value, ^null, ^null, ^null)))
				begin
					Product_main.vat_code = (d)((i)mIntegerConveter.ConvertBack(value, ^null, ^null, ^null))
					ValidateEnteredData(7)
					RaisePropertyChanged("Vat_code")
				end
			endmethod
		endproperty
        ;;Prod_group
		public property Prod_group, String
			method get
			proc
				mreturn (string)mAlphaConveter.Convert(product_main.prod_group, ^null, ^null, ^null)
			endmethod
			method set
			proc
				if (Product_main.prod_group .nes. (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
					Product_main.prod_group = (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(8)
					RaisePropertyChanged("Prod_group")
				end
			endmethod
		endproperty
        ;;Promotion
		public property Promotion, Boolean
			method get
			proc
				mreturn (boolean)mDecimalTFConverter.Convert(product_main.promotion, ^null, ^null, ^null)
			endmethod
			method set
			proc
				if (Product_main.promotion .ne. (d)mDecimalTFConverter.ConvertBack(value, ^null, ^null, ^null))
				begin
					Product_main.promotion = (d)mDecimalTFConverter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(9)
					RaisePropertyChanged("Promotion")
				end
			endmethod
		endproperty
			
        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, String
            method get
            proc
                mreturn (String)Product_main
            endmethod
            method set
            proc
				if (!mDoneSynergyRecordValue)
					OriginalSynergyRecord = value

				mDoneSynergyRecordValue = true
				
				setUsed()
                Product_main = value

                ;;Signal that all fields have changed
                
                if (Product_store.prod_code != Product_main.prod_code)
                begin
                    SetFieldValid("Prod_code")
					                    if (mValidateSynergyData) ValidateEnteredData(1)
                end
                if (Product_store.prod_description != Product_main.prod_description)
                begin
                    SetFieldValid("Prod_description")
					                    if (mValidateSynergyData) ValidateEnteredData(2)
                end
                if (Product_store.supp_code != Product_main.supp_code)
                begin
                    SetFieldValid("Supp_code")
					                    if (mValidateSynergyData) ValidateEnteredData(3)
                end
                if (Product_store.cost_price != Product_main.cost_price)
                begin
                    SetFieldValid("Cost_price")
					                    if (mValidateSynergyData) ValidateEnteredData(4)
                end
                if (Product_store.sell_price != Product_main.sell_price)
                begin
                    SetFieldValid("Sell_price")
					                    if (mValidateSynergyData) ValidateEnteredData(5)
                end
                if (Product_store.pack_size != Product_main.pack_size)
                begin
                    SetFieldValid("Pack_size")
					                    if (mValidateSynergyData) ValidateEnteredData(6)
                end
                if (Product_store.vat_code != Product_main.vat_code)
                begin
                    SetFieldValid("Vat_code")
					                    if (mValidateSynergyData) ValidateEnteredData(7)
                end
                if (Product_store.prod_group != Product_main.prod_group)
                begin
                    SetFieldValid("Prod_group")
					                    if (mValidateSynergyData) ValidateEnteredData(8)
                end
                if (Product_store.promotion != Product_main.promotion)
                begin
                    SetFieldValid("Promotion")
					                    if (mValidateSynergyData) ValidateEnteredData(9)
                end
				RaisePropertyChanged(^null)
				RaiseSynergyRecordChanged()
				
				Product_store = Product_main
				
            endmethod
        endproperty

        ;;; <summary>
        ;;; Allow the host to initialise all fields.
        ;;; </summary>
        public override method InitData ,void
        proc
			init Product_main
			RaisePropertyChanged(^null)
			parent.InitData()
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
            endparams
        proc
			
				            ValidateEnteredData(1)
            RaisePropertyChanged("Prod_code")
				            ValidateEnteredData(2)
            RaisePropertyChanged("Prod_description")
				            ValidateEnteredData(3)
            RaisePropertyChanged("Supp_code")
				            ValidateEnteredData(4)
            RaisePropertyChanged("Cost_price")
				            ValidateEnteredData(5)
            RaisePropertyChanged("Sell_price")
				            ValidateEnteredData(6)
            RaisePropertyChanged("Pack_size")
				            ValidateEnteredData(7)
            RaisePropertyChanged("Vat_code")
				            ValidateEnteredData(8)
            RaisePropertyChanged("Prod_group")
				            ValidateEnteredData(9)
            RaisePropertyChanged("Promotion")

        endmethod

        ;;; <summary>
        ;;; Indicate from the UI which field now has focus. This then signals the
        ;;; CurrentFieldInfo change event so the UI can get the current field details
        ;;; </summary>
        ;;; <param name="fieldName">Name of field with focus</param>
        public override method SetFieldFocusFlag    ,void
            in req fieldName                        ,String
            endparams
        proc
            using fieldName select
			
			
            ("PROD_CODE"), mCurrentField = 1
			
            ("PROD_DESCRIPTION"), mCurrentField = 2
			
            ("SUPP_CODE"), mCurrentField = 3
			
            ("COST_PRICE"), mCurrentField = 4
			
            ("SELL_PRICE"), mCurrentField = 5
			
            ("PACK_SIZE"), mCurrentField = 6
			
            ("VAT_CODE"), mCurrentField = 7
			
            ("PROD_GROUP"), mCurrentField = 8
			
            ("PROMOTION"), mCurrentField = 9
            (),
                mCurrentField = 0
            endusing
            RaisePropertyChanged("CurrentFieldInfo")
        endmethod

        ;;; <summary>
        ;;; Expose information about the current field
        ;;; </summary>
        ;;; <returns>Current field information</returns>
        public property CurrentFieldInfo    ,String
            method get
            proc
                using mCurrentField select
				
				
                (1),    mreturn ""
				
                (2),    mreturn ""
				
                (3),    mreturn ""
				
                (4),    mreturn ""
				
                (5),    mreturn ""
				
                (6),    mreturn ""
				
                (7),    mreturn ""
				
                (8),    mreturn ""
				
                (9),    mreturn ""
				(), mreturn ""  ;;if incorrect field value or not configured, ensure we clear the return value
                endusing
            endmethod
        endproperty

        ;;Expose properties to indicate whether fields are enabled
        
		

        public property Prod_codeIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(1)
            endmethod
            method set
            proc
                SetFieldEnabledState(1, value)
                RaiseNonRPSPropertyChanged("Prod_codeIsEnabled")
            endmethod
        endproperty
		

        public property Prod_descriptionIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(2)
            endmethod
            method set
            proc
                SetFieldEnabledState(2, value)
                RaiseNonRPSPropertyChanged("Prod_descriptionIsEnabled")
            endmethod
        endproperty
		

        public property Supp_codeIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(3)
            endmethod
            method set
            proc
                SetFieldEnabledState(3, value)
                RaiseNonRPSPropertyChanged("Supp_codeIsEnabled")
            endmethod
        endproperty
		

        public property Cost_priceIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(4)
            endmethod
            method set
            proc
                SetFieldEnabledState(4, value)
                RaiseNonRPSPropertyChanged("Cost_priceIsEnabled")
            endmethod
        endproperty
		

        public property Sell_priceIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(5)
            endmethod
            method set
            proc
                SetFieldEnabledState(5, value)
                RaiseNonRPSPropertyChanged("Sell_priceIsEnabled")
            endmethod
        endproperty
		

        public property Pack_sizeIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(6)
            endmethod
            method set
            proc
                SetFieldEnabledState(6, value)
                RaiseNonRPSPropertyChanged("Pack_sizeIsEnabled")
            endmethod
        endproperty
		

        public property Vat_codeIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(7)
            endmethod
            method set
            proc
                SetFieldEnabledState(7, value)
                RaiseNonRPSPropertyChanged("Vat_codeIsEnabled")
            endmethod
        endproperty
		

        public property Prod_groupIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(8)
            endmethod
            method set
            proc
                SetFieldEnabledState(8, value)
                RaiseNonRPSPropertyChanged("Prod_groupIsEnabled")
            endmethod
        endproperty
		

        public property PromotionIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(9)
            endmethod
            method set
            proc
                SetFieldEnabledState(9, value)
                RaiseNonRPSPropertyChanged("PromotionIsEnabled")
            endmethod
        endproperty

        ;;Expose properties to indicate whether fields are focussed
		private mProd_codeIsFocused	,Boolean
		public property Prod_codeIsFocused, Boolean
			method get
			proc
				mreturn mProd_codeIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mProd_codeIsFocused = value
				RaiseNonRPSPropertyChanged("Prod_codeIsFocused")
			endmethod
		endproperty
		private mProd_descriptionIsFocused	,Boolean
		public property Prod_descriptionIsFocused, Boolean
			method get
			proc
				mreturn mProd_descriptionIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mProd_descriptionIsFocused = value
				RaiseNonRPSPropertyChanged("Prod_descriptionIsFocused")
			endmethod
		endproperty
		private mSupp_codeIsFocused	,Boolean
		public property Supp_codeIsFocused, Boolean
			method get
			proc
				mreturn mSupp_codeIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mSupp_codeIsFocused = value
				RaiseNonRPSPropertyChanged("Supp_codeIsFocused")
			endmethod
		endproperty
		private mCost_priceIsFocused	,Boolean
		public property Cost_priceIsFocused, Boolean
			method get
			proc
				mreturn mCost_priceIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mCost_priceIsFocused = value
				RaiseNonRPSPropertyChanged("Cost_priceIsFocused")
			endmethod
		endproperty
		private mSell_priceIsFocused	,Boolean
		public property Sell_priceIsFocused, Boolean
			method get
			proc
				mreturn mSell_priceIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mSell_priceIsFocused = value
				RaiseNonRPSPropertyChanged("Sell_priceIsFocused")
			endmethod
		endproperty
		private mPack_sizeIsFocused	,Boolean
		public property Pack_sizeIsFocused, Boolean
			method get
			proc
				mreturn mPack_sizeIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mPack_sizeIsFocused = value
				RaiseNonRPSPropertyChanged("Pack_sizeIsFocused")
			endmethod
		endproperty
		private mVat_codeIsFocused	,Boolean
		public property Vat_codeIsFocused, Boolean
			method get
			proc
				mreturn mVat_codeIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mVat_codeIsFocused = value
				RaiseNonRPSPropertyChanged("Vat_codeIsFocused")
			endmethod
		endproperty
		private mProd_groupIsFocused	,Boolean
		public property Prod_groupIsFocused, Boolean
			method get
			proc
				mreturn mProd_groupIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mProd_groupIsFocused = value
				RaiseNonRPSPropertyChanged("Prod_groupIsFocused")
			endmethod
		endproperty
		private mPromotionIsFocused	,Boolean
		public property PromotionIsFocused, Boolean
			method get
			proc
				mreturn mPromotionIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mPromotionIsFocused = value
				RaiseNonRPSPropertyChanged("PromotionIsFocused")
			endmethod
		endproperty

        ;;Expose properties to indicate whether fields are read only
		
		

		public property Prod_codeIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(1)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(1, value)
				RaiseNonRPSPropertyChanged("Prod_codeIsReadOnly")
			endmethod
		endproperty
		

		public property Prod_descriptionIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(2)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(2, value)
				RaiseNonRPSPropertyChanged("Prod_descriptionIsReadOnly")
			endmethod
		endproperty
		

		public property Supp_codeIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(3)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(3, value)
				RaiseNonRPSPropertyChanged("Supp_codeIsReadOnly")
			endmethod
		endproperty
		

		public property Cost_priceIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(4)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(4, value)
				RaiseNonRPSPropertyChanged("Cost_priceIsReadOnly")
			endmethod
		endproperty
		

		public property Sell_priceIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(5)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(5, value)
				RaiseNonRPSPropertyChanged("Sell_priceIsReadOnly")
			endmethod
		endproperty
		

		public property Pack_sizeIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(6)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(6, value)
				RaiseNonRPSPropertyChanged("Pack_sizeIsReadOnly")
			endmethod
		endproperty
		

		public property Vat_codeIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(7)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(7, value)
				RaiseNonRPSPropertyChanged("Vat_codeIsReadOnly")
			endmethod
		endproperty
		

		public property Prod_groupIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(8)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(8, value)
				RaiseNonRPSPropertyChanged("Prod_groupIsReadOnly")
			endmethod
		endproperty
		

		public property PromotionIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(9)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(9, value)
				RaiseNonRPSPropertyChanged("PromotionIsReadOnly")
			endmethod
		endproperty

		private doingClearFocus	,Boolean

		private method clearFocus, void
			endparams
		proc
			if (!doingClearFocus)
			begin
				doingClearFocus = true
				if (Prod_codeIsFocused) Prod_codeIsFocused = false
				if (Prod_descriptionIsFocused) Prod_descriptionIsFocused = false
				if (Supp_codeIsFocused) Supp_codeIsFocused = false
				if (Cost_priceIsFocused) Cost_priceIsFocused = false
				if (Sell_priceIsFocused) Sell_priceIsFocused = false
				if (Pack_sizeIsFocused) Pack_sizeIsFocused = false
				if (Vat_codeIsFocused) Vat_codeIsFocused = false
				if (Prod_groupIsFocused) Prod_groupIsFocused = false
				if (PromotionIsFocused) PromotionIsFocused = false
				doingClearFocus = false
			end
		endmethod

		public method FieldErrorDetails	,void
			in req fldName				,String
			in req errorText			,String
			endparams
		proc
			setErrorDetails(fldName, errorText)
			RaisePropertyChanged(fldName)
		endmethod

		public method FieldValidDetails	,void
			in req fldName				,String
			endparams
		proc
			SetFieldValid(fldName)
			RaisePropertyChanged(fldName)
		endmethod

		public override method CompareObjects	,int
			in req obj1							,@Object
			in req obj2							,@Object
			in req colName						,String
			in req sortDir						,Symphony.Conductor.Framework.SynergySortOrder
			endparams

			record
				result		,int
			endrecord
		proc
			using colName select
			("Prod_code"),
			begin
				if (((Product_Data)obj1).Prod_code == ((Product_Data)obj2).Prod_code) then
					result = 0
				else
				begin
					if (((Product_Data)obj1).Prod_code > ((Product_Data)obj2).Prod_code) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Prod_description"),
			begin
				if (((Product_Data)obj1).Prod_description == ((Product_Data)obj2).Prod_description) then
					result = 0
				else
				begin
					if (((Product_Data)obj1).Prod_description > ((Product_Data)obj2).Prod_description) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Supp_code"),
			begin
				if (((Product_Data)obj1).Supp_code == ((Product_Data)obj2).Supp_code) then
					result = 0
				else
				begin
					if (((Product_Data)obj1).Supp_code > ((Product_Data)obj2).Supp_code) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Cost_price"),
			begin
				if (((Product_Data)obj1).Cost_price == ((Product_Data)obj2).Cost_price) then
					result = 0
				else
				begin
					if (((Product_Data)obj1).Cost_price > ((Product_Data)obj2).Cost_price) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Sell_price"),
			begin
				if (((Product_Data)obj1).Sell_price == ((Product_Data)obj2).Sell_price) then
					result = 0
				else
				begin
					if (((Product_Data)obj1).Sell_price > ((Product_Data)obj2).Sell_price) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Pack_size"),
			begin
				if (((Product_Data)obj1).Pack_size == ((Product_Data)obj2).Pack_size) then
					result = 0
				else
				begin
					if (((Product_Data)obj1).Pack_size > ((Product_Data)obj2).Pack_size) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Vat_code"),
			begin
				if (((Product_Data)obj1).Vat_code == ((Product_Data)obj2).Vat_code) then
					result = 0
				else
				begin
					if (((Product_Data)obj1).Vat_code > ((Product_Data)obj2).Vat_code) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Prod_group"),
			begin
				if (((Product_Data)obj1).Prod_group == ((Product_Data)obj2).Prod_group) then
					result = 0
				else
				begin
					if (((Product_Data)obj1).Prod_group > ((Product_Data)obj2).Prod_group) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Promotion"),
			begin
				if (((Product_Data)obj1).Promotion == ((Product_Data)obj2).Promotion) then
					result = 0
				else
				begin
					if (((Product_Data)obj1).Promotion > ((Product_Data)obj2).Promotion) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			(),
				result = this.CustomCompareObjects(obj1, obj2, colName, sortDir)
			endusing

			mreturn result
		endmethod

		public override property StructureSize	,Int32
			method get
			proc
				mreturn RPSStructureSize
			endmethod
		endproperty

	endclass
endnamespace

