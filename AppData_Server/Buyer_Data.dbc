;; Description: Various Buyer data related "extra" methods & properties. 
;;
;; Author:      Allan Shikhvarg, Synergex PSG Consultant
;;
;; Copyright (c) 2017, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
import System
import System.Collections.Generic
import System.Text
import Symphony.Conductor.Model

;;imports required to use data objects and file IO classes.
import AppData
import Symphony.Conductor.DataIO
import Symphony.Conductor.Converters
import System.Windows.Media


namespace AppData

	public partial class Buyer_Data

;;=============================================================================
.region "Private Variables"
		private mDateCreated		,string
		private mDefaultImageName	,a*	,"PhotoStack"	
		private mBuyerImageName		,a30
		private mBuyerImage			,@ImageSource
		private mDateConverter		,@SynergyDecimalDateConverter	,new SynergyDecimalDateConverter()
		private	mAlphaDateConverter	,@SynergyAlphaDateTimeConverter	,new SynergyAlphaDateTimeConverter()

.endregion

;;=============================================================================
.region 'Properties'
		public property BuyerImageFile, string
			method get
			proc
				data returnedName	,string

				setBuyerImageName()
				
				returnedName = AppData.DataLogic.GetImageFileName(mBuyerImageName, ImageFileType.JPGFileType)
				if (!returnedName)
					returnedName = AppData.DataLogic.GetImageFileName(mDefaultImageName, ImageFileType.JPGFileType)

				mreturn returnedName
			endmethod

		endproperty

;;-----------------------------------------------------------------------------	
		public property BuyerImage, @ImageSource
			method get
			proc
				if (mBuyerImage == ^null)
				begin
					data defaultImage	,a*	,"PhotoStack"

					setBuyerImageName()
					mBuyerImage = AppData.DataLogic.GetImageSource(mBuyerImageName, ImageFileType.JPGFileType)

					if (mBuyerImage == ^null)
						mBuyerImage = AppData.DataLogic.GetImageSource(mDefaultImageName, ImageFileType.JPGFileType)
				end
									
				mreturn mBuyerImage
			endmethod

		endproperty

;;-----------------------------------------------------------------------------	
		public property DateCreated, string
			method get
			proc
				if (mDateCreated == ^null)
				begin
					data datetime	,a20
					data tmpTime, String
					data tmpDate, String

					datetime = %datetime_from_i8( this.Created_timestamp)

					SplitSynergyDatetime(datetime,tmpDate, tmpTime) 
					mDateCreated = tmpDate
				end
				
				mreturn mDateCreated
			endmethod

		endproperty


.endregion

;;=============================================================================
.region 'Methods'

		protected override method extendedConstructor, void
			endparams

		proc
			ValidateData		 += doDataChanged
			SynergyRecordChanged += synergyChanged
			SynergyRecordChanged += refreshData

			;;if data passed is to the constructor then use it to populate the aditional fields
			if (trim(buyer_main.STR_Name)) 
				synergychanged()
						
		endmethod

;;-----------------------------------------------------------------------------	
		;;; <summary>
		;;;	Take a string that contains a Synergy %datetime value (YYYYMMDDhhmmssuuuuuu format) and split it into it's constituent parts (date + time).
		;;; </summary>
		;;; <param name="aDateTime">The inbound String to convert in Synergy %datetime format</param>
		;;; <param name="aDate">The date component of the incoming string in the format "mm/dd/yyyy"</param>
		;;; <param name="aTime">The time component of the incoming string in the format "hh:mm:ss AP"</param>
		public method SplitSynergyDatetime, void
			required in aDatetime, String
			required out aDate, String
			required out aTime, String
			endparams
		proc
			if (aDatetime !=string.Empty)
			begin
				data tmpDatetime, @String
				tmpDatetime = ((DateTime)mAlphaDateConverter.Convert(aDatetime, ^null, "NODEFAULTODAY", ^null)).ToString()	

				if (tmpDatetime != string.Empty)
				begin
					aDate = tmpDatetime.Split(' ')[1]
					aTime = tmpDatetime.Split(' ')[2] + tmpDatetime.Split(' ')[3]					
				end
			end

		endmethod

;;-----------------------------------------------------------------------------	
		private method doDataChanged, void
			inout req message			,@DataChangedMessage
			endparams
		proc
			using message.FieldName select

			endusing

		endmethod

;;-----------------------------------------------------------------------------	
		private method synergyChanged, void
			endparams

		proc
			;; populate any extra fields that are added to data object	
			mBuyerImage = ^null
			mDateCreated = ^null

		endmethod

;;-----------------------------------------------------------------------------	
		private method refreshData, void
			endparams

		proc
			RaisePropertyChanged(^null)

		endmethod

;;-----------------------------------------------------------------------------	
		private method setBuyerImageName, void
			endparams

		proc
			data pos			,d2 ,0

			mBuyerImageName = atrim(buyer_main.STR_Name)
			repeat
			begin
				pos = instr(1,atrim(mBuyerImageName), " ")
				if !pos
					exitloop

				mBuyerImageName = mBuyerImageName(1:(pos-1)) + mBuyerImageName((pos+1),30)
			end

		endmethod



.endregion
	
	endclass

endnamespace
