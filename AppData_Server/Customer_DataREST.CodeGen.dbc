;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author: Richard C. Morris, Synergex Technology Evangelist
;;
;; Template Name:   Symphony Framework : SYMPHONY_DATAREST_V3_2.tpl
;;
;;***************************************************************************
import System
import System.Collections
import System.Collections.Generic
import System.Collections.ObjectModel
import System.Collections.Specialized
import System.Text
import System.Runtime.InteropServices
import System.IO

import Symphony.Conductor.Model
import Symphony.Conductor.Converters

import System.Reflection
import System.Runtime.Serialization
import Newtonsoft.Json


namespace AppData

    ;;define a structure that we can use around the applicaiton
	{JsonObject(MemberSerialization.OptIn)}
    public partial class Customer_DataREST extends DataObjectBase

        private mCustomer_main	,strCustomer
		private mFieldList				,string

        ;;use symphony converters
        private mDateConveter              ,@SynergyDecimalDateConverter ,new SynergyDecimalDateConverter()
        private mAlphaConveter             ,@SynergyAlphaConverter ,new SynergyAlphaConverter()
        private mDecimalConveter           ,@SynergyDecimalConverter ,new SynergyDecimalConverter()
        private mImpliedDecimalConveter    ,@SynergyImpliedDecimalConverter  ,new SynergyImpliedDecimalConverter()
        private mIntegerConveter           ,@SynergyIntConverter ,new SynergyIntConverter()
        private mAlphaYNConveter           ,@SynergyAlphaYNConverter, new SynergyAlphaYNConverter()

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Customer_DataREST
            endparams
            parent()
        proc
			mFieldList = string.Empty
			if (SynergyMemberInfo == ^null)
				DefineSerialiazableDataElements(^null)
        endmethod

		;;; <summary>
		;;;  Constructor, initialise the base fields
		;;; </summary>
		public method Customer_DataREST
			in req SynRec						,string
			endparams
			parent()
		proc
			mFieldList = string.Empty
			SynergyRecord = synRec
			if (SynergyMemberInfo == ^null)
				DefineSerialiazableDataElements(^null)
		endmethod

		;;enable the ability to define which "properties" are serialized as JSON

		public static SynergyMemberInfo, @List<System.Reflection.MemberInfo>

		public static method DefineSerialiazableDataElements	,void
			in req fieldList									,@List<string>
			endparams
		proc

			if (SynergyMemberInfo == ^null)
			then
				SynergyMemberInfo = new List<System.Reflection.MemberInfo>()
			else
				SynergyMemberInfo.Clear()

			data objectType = ^typeof(Customer_DataREST)
			data item	,string
			if (fieldList == ^null) then
			begin
				;;this is required for select *
				SynergyMemberInfo.Add(^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "Cust_code"), @System.Reflection.MemberInfo))
				SynergyMemberInfo.Add(^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "Name"), @System.Reflection.MemberInfo))
				SynergyMemberInfo.Add(^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "Address1"), @System.Reflection.MemberInfo))
				SynergyMemberInfo.Add(^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "Address2"), @System.Reflection.MemberInfo))
				SynergyMemberInfo.Add(^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "Address3"), @System.Reflection.MemberInfo))
				SynergyMemberInfo.Add(^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "Postcode"), @System.Reflection.MemberInfo))
				SynergyMemberInfo.Add(^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "Phone"), @System.Reflection.MemberInfo))
				SynergyMemberInfo.Add(^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "Contact"), @System.Reflection.MemberInfo))
				SynergyMemberInfo.Add(^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "Email"), @System.Reflection.MemberInfo))
				SynergyMemberInfo.Add(^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "Create_date"), @System.Reflection.MemberInfo))
			
			end
			else
			begin
				foreach item in fieldList
				begin
					SynergyMemberInfo.Add(^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, item(1:1) + item(2,item.Length).ToLower()), @System.Reflection.MemberInfo))
				end
			end

		endmethod

        ;;Expose fields as properties for data binding


        ;;Cust_code
        {JsonProperty}
        public property Cust_code, int
            method get
            proc
                mreturn Convert.ToInt64(mDecimalConveter.Convert(mCustomer_main.str_cust_code, ^null, ^null, ^null))
            endmethod
            method set
            proc
                mCustomer_main.str_cust_code = (D)mDecimalConveter.ConvertBack(value, ^null, ^null, ^null)
				if (mFieldList.Length == 0) then
					mFieldList = mFieldList + "Cust_code"
				else
					mFieldList = mFieldList + "," + "Cust_code"
            endmethod
        endproperty

        ;;Name
        {JsonProperty}
        public property Name, string
            method get
            proc
                mreturn (string)mAlphaConveter.Convert(mCustomer_main.str_name, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mCustomer_main.str_name = (A)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
				if (mFieldList.Length == 0) then
					mFieldList = mFieldList + "Name"
				else
					mFieldList = mFieldList + "," + "Name"
            endmethod
        endproperty

        ;;Address1
        {JsonProperty}
        public property Address1, string
            method get
            proc
                mreturn (string)mAlphaConveter.Convert(mCustomer_main.str_address1, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mCustomer_main.str_address1 = (A)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
				if (mFieldList.Length == 0) then
					mFieldList = mFieldList + "Address1"
				else
					mFieldList = mFieldList + "," + "Address1"
            endmethod
        endproperty

        ;;Address2
        {JsonProperty}
        public property Address2, string
            method get
            proc
                mreturn (string)mAlphaConveter.Convert(mCustomer_main.str_address2, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mCustomer_main.str_address2 = (A)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
				if (mFieldList.Length == 0) then
					mFieldList = mFieldList + "Address2"
				else
					mFieldList = mFieldList + "," + "Address2"
            endmethod
        endproperty

        ;;Address3
        {JsonProperty}
        public property Address3, string
            method get
            proc
                mreturn (string)mAlphaConveter.Convert(mCustomer_main.str_address3, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mCustomer_main.str_address3 = (A)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
				if (mFieldList.Length == 0) then
					mFieldList = mFieldList + "Address3"
				else
					mFieldList = mFieldList + "," + "Address3"
            endmethod
        endproperty

        ;;Postcode
        {JsonProperty}
        public property Postcode, string
            method get
            proc
                mreturn (string)mAlphaConveter.Convert(mCustomer_main.str_postcode, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mCustomer_main.str_postcode = (A)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
				if (mFieldList.Length == 0) then
					mFieldList = mFieldList + "Postcode"
				else
					mFieldList = mFieldList + "," + "Postcode"
            endmethod
        endproperty

        ;;Phone
        {JsonProperty}
        public property Phone, string
            method get
            proc
                mreturn (string)mAlphaConveter.Convert(mCustomer_main.str_phone, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mCustomer_main.str_phone = (A)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
				if (mFieldList.Length == 0) then
					mFieldList = mFieldList + "Phone"
				else
					mFieldList = mFieldList + "," + "Phone"
            endmethod
        endproperty

        ;;Contact
        {JsonProperty}
        public property Contact, string
            method get
            proc
                mreturn (string)mAlphaConveter.Convert(mCustomer_main.str_contact, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mCustomer_main.str_contact = (A)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
				if (mFieldList.Length == 0) then
					mFieldList = mFieldList + "Contact"
				else
					mFieldList = mFieldList + "," + "Contact"
            endmethod
        endproperty

        ;;Email
        {JsonProperty}
        public property Email, string
            method get
            proc
                mreturn (string)mAlphaConveter.Convert(mCustomer_main.str_email, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mCustomer_main.str_email = (A)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
				if (mFieldList.Length == 0) then
					mFieldList = mFieldList + "Email"
				else
					mFieldList = mFieldList + "," + "Email"
            endmethod
        endproperty

        ;;Create_date
        {JsonProperty}
        public property Create_date, DateTime?
            method get
            proc
                mreturn (DateTime?)mDateConveter.Convert(mCustomer_main.str_create_date, ^null, "", ^null)
            endmethod
            method set
            proc
                mCustomer_main.str_create_date = (D)mDateConveter.ConvertBack(value, ^null, ^null, ^null)
				if (mFieldList.Length == 0) then
					mFieldList = mFieldList + "Create_date"
				else
					mFieldList = mFieldList + "," + "Create_date"
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, String
            method get
            proc
                mreturn (string)mCustomer_main
            endmethod
            method set
            proc
                mCustomer_main = value
            endmethod
        endproperty

        public override method InitialValidateData, void
            endparams
        proc
        endmethod
    
        public override method SetFieldFocusFlag    ,void
        in req fieldName                        ,String
            endparams
        proc
        endmethod

        public override property StructureSize	,Int32
            method get
            proc
                mreturn 712
            endmethod
        endproperty
			
		public property FieldList	,string
			method get
			proc
				mreturn mFieldList
			endmethod
		endproperty
		
    endclass
endnamespace

