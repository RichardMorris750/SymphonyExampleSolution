;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author: Richard C. Morris, RCP Consultants
;;
;; Template Name:   Symphony Framework : SYMPHONY_RESTCONTROLLER_V3_2.tpl
;;
;;***************************************************************************
import System
import System.Collections.Generic
import System.Text
import System.Web.Http
import System.Net.Http
import System.Net
import System.Net.Http.Formatting
import Newtonsoft.Json
import SymphonyBridgeServerCore
import SymphonyBridgeServerCore.Controller

import AppData

namespace AppData

	public partial class Order_headersController extends ApiController
	
		;;; <summary>
		;;; Returns the requested resource
		;;; </summary>
		;;; <param name="id"></param>
		;;; <param name="fields"></param>
		;;; <param name="filter"></param>
		;;; <param name="casing"></param>
		;;; <param name="sort"></param>
		;;; <param name="limit"></param>
		;;; <param name="procedure"></param>
		;;; <param name="param"></param>
		;;; <returns></returns>
		{HttpGet}
		public method Get		,@HttpResponseMessage
			in req id			,string
			in req fields		,string
			in req filter		,string
			in req casing		,boolean
			in req sort			,string
			in req limit		,int
			in req procedure	,string
			in req param		,string
			endparams

			record
				methodResponse			,@HttpResponseMessage
			endrecord
		proc

			if (!string.IsNullOrEmpty(procedure)) then
			begin
				data controller = new ExecuteController()

				data executeCommand = "exec @AppData.StoredProcedures." + procedure

				methodResponse  = controller.CustomGet(Request, executeCommand,
				&	'{"DataObjectItem":{"DataObjectClass":"AppData.Order_header_DataREST, AppData","DataObjectData":{}}}',
				&	param)
			end
			else
			begin

				data localOrderByValue		,string	,""
				data localOrderDirection	,string	,""

				data localFilter			,string	,""

				if (!string.IsNullOrEmpty(filter))
				begin
					if (string.IsNullOrEmpty(id)) then
						localFilter = "Where " + filter
					else
						localFilter = "and " + filter
				end

				data caseSetting = string.Format('{{"SetCaseSensitivity":"{0}"}}', casing.ToString())

				if (!string.IsNullOrEmpty(sort))
				begin
					if (sort(1:1) == "-") then
						localOrderDirection = " DESC"
					else
						localOrderDirection = " ASC"

					localOrderByValue = " Order By " + 	sort.Replace("-", "").Replace("+", "")
				end


				data controller = new SelectController()

				data selectCommand	,string

				selectCommand = "select "
				
				if (limit > 0 )
				begin
					selectCommand = selectCommand + "TOP " + %string(limit)
				end
				
				selectCommand = selectCommand + fields + " from order_header " 

				data paramString	,string	,""
				if (!string.IsNullOrEmpty(id))
				begin
					data params = new Dictionary<string, Object>()
					
					;;split the key incase we have segments
					data idSplit = id.Split(",")
					try 
					begin
					selectCommand = selectCommand + " Where ORDER_NO = :1"
					params.Add('order_no', idSplit[1])
					end
					catch (e, @Exception)
					begin
						throw new Exception("All required primary segment data not provided")
					end
					endtry
					data settings = new JsonSerializerSettings()
					settings.ContractResolver = new Symphony.Harmony.Core.ContractResolver()
					paramString = JsonConvert.SerializeObject(params, settings)
				end

				selectCommand = selectCommand + localFilter 

				if (!string.IsNullOrEmpty(localOrderByValue))
				begin
					selectCommand = selectCommand + " Order By " + localOrderByValue + localOrderDirection
				end
				
				methodResponse  = controller.CustomGet(Request, selectCommand,
				&	'{"DataObjectItem":{"DataObjectClass":"AppData.Order_header_DataREST, AppData","DataObjectData":{}}}',
				&	'AppData.TableMapper.MapTableToFile',
				&	paramString,
				&	caseSetting)
			end

			mreturn methodResponse

		endmethod

		;;; <summary>
		;;; Insert passed resource.
		;;; </summary>
		;;; <param name="postItem"></param>
		;;; <param name="procedure"></param>
		;;; <param name="param"></param>
		;;; <returns></returns>
		{HttpPost}
		public method Post		,@HttpResponseMessage
			postItem			,@Order_header_DataREST
			in req procedure	,string
			in req param		,string
			endparams

			record
				methodResponse			,@HttpResponseMessage
			endrecord

		proc

			if (!string.IsNullOrEmpty(procedure)) then
			begin
				data controller = new ExecuteController()

				data executeCommand = "exec @AppData.StoredProcedures." + procedure

				methodResponse  = controller.CustomGet(Request, executeCommand,
				&	'{"DataObjectItem":{"DataObjectClass":"AppData.Order_header_DataREST, AppData","DataObjectData":{}}}',
				&	param)
			end
			else
			begin
				;;we must get at least the primary key segments
				if (!postItem.order_no)
					throw new Exception("ORDER_NO is required")

				;;first construct the required "object"
				data restDataObject = new RESTObjectContainer()
				restDataObject.DataObjectItem = postItem

				data settings = new JsonSerializerSettings()
				settings.ContractResolver = new Symphony.Harmony.Core.ContractResolver()

				data restDataObjectJSON	,string ,JsonConvert.SerializeObject(restDataObject, settings)

				data command = "insert into order_header"

				data controllerInsert = new InsertController()

				methodResponse = controllerInsert.CustomPost(Request, command,
				&	restDataObjectJSON,
				&	'AppData.TableMapper.MapTableToFile')

			end

			mreturn methodResponse

		endmethod

		;;; <summary>
		;;; Update (or insert) passed resource.
		;;; </summary>
		;;; <param name="postItem"></param>
		;;; <param name="procedure"></param>
		;;; <param name="param"></param>
		;;; <returns></returns>
		{HttpPut}
		public method Put		,@HttpResponseMessage
			in req postItem		,@Order_header_DataREST
			in req procedure	,string
			in req param		,string
			endparams

			record
				methodResponse			,@HttpResponseMessage
			endrecord

		proc

			if (!string.IsNullOrEmpty(procedure)) then
			begin
				data controller = new ExecuteController()

				data executeCommand = "exec @AppData.StoredProcedures." + procedure

				methodResponse  = controller.CustomGet(Request, executeCommand,
				&	'{"DataObjectItem":{"DataObjectClass":"AppData.Order_header_DataREST, AppData","DataObjectData":{}}}',
				&	param)
			end
			else
			begin
				;;we must get at least the primary key segments
				if (!postItem.order_no)
					throw new Exception("ORDER_NO is required")

				;;first construct the required REST "object"
				data restDataObject = new RESTObjectContainer()
				restDataObject.DataObjectItem = postItem
				data settings = new JsonSerializerSettings()
				settings.ContractResolver = new Symphony.Harmony.Core.ContractResolver()

				data restDataObjectJSON	,string ,JsonConvert.SerializeObject(restDataObject, settings)

				;;define parameters
				data params = new Dictionary<string, Object>()

				;;define the update command
				data command = "update order_header set" 

				data fieldsToUpdate	,[#]string	,postItem.FieldList.Split(",")

				data fieldPos	,int	,0
				data fieldItem	,string
				foreach fieldItem in fieldsToUpdate
				begin
					if (fieldItem == "Supp_code")
					begin
						incr fieldPos
						command = command + " Supp_code = :" + %string(fieldPos)
						params.Add('Supp_code', postItem.Supp_code)
					end
					if (fieldItem == "Order_date")
					begin
						incr fieldPos
						command = command + " Order_date = :" + %string(fieldPos)
						params.Add('Order_date', postItem.Order_date)
					end
					if (fieldItem == "Reqd_date")
					begin
						incr fieldPos
						command = command + " Reqd_date = :" + %string(fieldPos)
						params.Add('Reqd_date', postItem.Reqd_date)
					end
					if (fieldItem == "Comments")
					begin
						incr fieldPos
						command = command + " Comments = :" + %string(fieldPos)
						params.Add('Comments', postItem.Comments)
					end
					if (fieldItem == "Line_count")
					begin
						incr fieldPos
						command = command + " Line_count = :" + %string(fieldPos)
						params.Add('Line_count', postItem.Line_count)
					end
					if (fieldItem == "Tot_value")
					begin
						incr fieldPos
						command = command + " Tot_value = :" + %string(fieldPos)
						params.Add('Tot_value', postItem.Tot_value)
					end
					if (fieldItem == "Tot_vat")
					begin
						incr fieldPos
						command = command + " Tot_vat = :" + %string(fieldPos)
						params.Add('Tot_vat', postItem.Tot_vat)
					end
					if (fieldItem == "Tot_qty")
					begin
						incr fieldPos
						command = command + " Tot_qty = :" + %string(fieldPos)
						params.Add('Tot_qty', postItem.Tot_qty)
					end
				end

				command  = command  + " where "
				incr fieldPos
				command  = command  + "order_no = :" + %string(fieldPos)
				params.Add('key_order_no', postItem.order_no)

				data controllerUpdate = new UpdateController()

				methodResponse = controllerUpdate.CustomPut(Request, command,
				&	restDataObjectJSON,
				&	'AppData.TableMapper.MapTableToFile',
				&	JsonConvert.SerializeObject(params, settings),
				&	'{"SetCaseSensitivity":"true"}')

				;;if we get back a "not found" response we need to try to "insert" the data.
				if (methodResponse.StatusCode == HttpStatusCode.NotFound)
				begin
					data controllerInsert = new InsertController()

					command = "insert into order_header"

					methodResponse = controllerInsert.CustomPost(Request, command,
					&	restDataObjectJSON,
					&	'AppData.TableMapper.MapTableToFile')

				end
			end
			mreturn methodResponse

		endmethod

		;;; <summary>
		;;; Delete the identified resource.
		;;; </summary>
		;;; <param name="id"></param>
		;;; <param name="procedure"></param>
		;;; <param name="param"></param>
		;;; <returns></returns>
		{HttpDelete}
		public method Delete	,@HttpResponseMessage
			in req id			,string
			in req procedure	,string
			in req param		,string
			endparams

			record
				methodResponse			,@HttpResponseMessage
			endrecord

		proc

			if (!string.IsNullOrEmpty(procedure)) then
			begin
				data controller = new ExecuteController()

				data executeCommand = "exec @AppData.StoredProcedures." + procedure

				methodResponse  = controller.CustomGet(Request, executeCommand,
				&	'{"DataObjectItem":{"DataObjectClass":"AppData.Order_header_DataREST, AppData","DataObjectData":{}}}',
				&	param)
			end
			else
			begin
				;;we must get at least the primary key segments
				if (string.IsNullOrEmpty(id))
					throw new Exception("Id is required.")

				data command = "delete from order_header where " 
				&	+ "order_no = :1"

				data controller = new DeleteController()

				;;define parameters
				data params = new Dictionary<string, Object>()
				params.Add('order_no', id)

				data settings = new JsonSerializerSettings()
				settings.ContractResolver = new Symphony.Harmony.Core.ContractResolver()

				methodResponse = controller.CustomDelete(Request, command,
				&	'{"DataObjectItem":{"DataObjectClass":"AppData.Order_header_DataREST, AppData","DataObjectData":{}}}',
				&	'AppData.TableMapper.MapTableToFile',
				&	JsonConvert.SerializeObject(params, settings),
				&	'{"SetCaseSensitivity":"True"}')
			end
			
			mreturn methodResponse
			
		endmethod
	endclass

endnamespace
