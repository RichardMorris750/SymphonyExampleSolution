import System
import System.Collections.Generic
import System.Text
import Symphony.Conductor.Model

;;imports required to use data objects and file IO classes.
import AppData
import Symphony.Conductor.DataIO
import System.Windows.Media


namespace AppData

	public partial class Supplier_Data

		protected override method extendedConstructor, void
			endparams
		proc
			ValidateData += doDataChanged
			SynergyRecordChanged += synergychanged
			SynergyRecordChanged += refreshData
		endmethod
	
		private method doDataChanged, void
			inout req message			,@DataChangedMessage
			endparams
		proc
			using message.FieldName select
			("NAME"),	;;supplier name must be valid and more than 5 characters long.
			if (message.ValidationState == DataValidationState.OK && %trim(Name) < 5)
			begin
				message.FailReason = "supplier name is not long enough, must be 5 character or more."
				message.ValidationState = DataValidationState.Error
				end
			("BUYER_KEY"),
			begin
				;;call the findBuyer method to validate the changed/entered value
				;;invalid values will signal a validation error so the UI can display appropriate details.
				if (findBuyer() != FileAccessResults.Success) then
				begin
					message.FailReason = "Buyer does not exist"
					message.ValidationState = DataValidationState.Error
				end
				else
					message.ValidationState = DataValidationState.OK
			end
			(),
			begin
				incr TotalValue
			end
			endusing
		endmethod

		private mTotalValue	,double

		public property TotalValue, double
			method get
			proc
				mreturn mTotalValue
			endmethod
			method set
			proc
				mTotalValue = value
				RaisePropertyChanged("TotalValue")
			endmethod
		endproperty

		private method synergychanged, void
			endparams
		proc
			findBuyer()
			
		endmethod
		
		private method refreshData, void
			endparams
		proc
			RaisePropertyChanged(^null)
		endmethod
		
		private mBuyerName	,string

		
		public property BuyerName, string
			method get
			proc
				mreturn mBuyerName
			endmethod
			private method set
			proc
				mBuyerName = value
				RaisePropertyChanged("BuyerName")
			endmethod
		endproperty

		;; set buyer name
		private method findBuyer, FileAccessResults
			endparams

		proc
			data response	,FileAccessResults
			data tmpDO = Buyer_DOCache.DataObject(Buyer_key)
			
			if (tmpDO != ^null) then
			begin
				response = FileAccessResults.Success
				BuyerName = tmpDO.Name
			end
			else
			begin
				response = FileAccessResults.RecordNotFound
				BuyerName = 'Search' 
			end

			mreturn response
		endmethod
		
	endclass

endnamespace
