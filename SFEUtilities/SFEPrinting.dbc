import System
import System.Collections.Generic
import System.Text

.define D_TOP_MARGIN_SPACE	8
.define D_TOP_MARGIN_SPACE_WITH_HEAD	,6
.define D_LEFT_MARGIN,	50

namespace SFEUtilities
	
	public class SFEPrinting
		
		private static mHandle			,i4
		private static mPosY			,i4
		private static mPosX			,i4
		
		private static mDonePrinting		,boolean
		private static mDoDeferedFormFeed	,boolean
		
		private static mPageNumber		,i1
		
		private static mPageWidth		,i4
		private static mPageLength		,i4
		
		private static mfontSize		,i4
		private static mfontName		,a50
		private static mfontWeight		,i4
		private static mUnderline		,boolean
		
		private static mPrinterName		,a100
		private static mPrintHeading	,boolean
		
		private static mPrintStart		,i4		
		
		public static method PrinterOpen	,void
			in req landscapeMode			,boolean
			in opt printerName				,a 		
			endparams
			
			.include 'DBLDIR:winprint.def'
			
		proc
			
			if mHandle
			begin
				wpr_info(mHandle, DWP_DELPRINTER)
				clear mHandle
			end
			
			mPrintHeading = true				
			mDoDeferedFormFeed = false	
			
			
			
			data result	,a10
			data length	,i4
			getlog("USE_XPS_PRINTER", result, length)
			if (length>0 && result == "YES") then
				xcall wpr_info(mHandle, DWP_GETPRINTER, "Microsoft XPS Document Writer")
			else
			begin
				if (mPrinterName == "       ") then
					xcall wpr_info(mHandle, DWP_GETPRINTER)	;;this will use the user default printer
				else
				begin
					xcall wpr_info(mHandle, DWP_GETPRINTER, mPrinterName)	;;this will use the passed printer.
				end
			end
			
			wpr_setdevice(mHandle, DWP_PAPERSIZE, DWPP_A4)
			
			if (landscapeMode == true) then
			begin
				if .not.mfontSize
					mfontSize = 7
				wpr_setdevice(mHandle, DWP_ORIENTATION, DWPO_PORTRAIT)
			end
			else
			begin
				if .not. mFontsize
					mfontSize = 11
				wpr_setdevice(mHandle, DWP_ORIENTATION, DWPO_PORTRAIT)
			end
			
			mPosX = D_LEFT_MARGIN
			mPosY = 1
			
			
			if .not.mfontName			
				mfontName = "Courier"
			mfontWeight = DWPFW_NORMAL
			mUnderline = false
			
			wpr_print(mHandle, DWP_BEGINJOB) ;Create the metafile
			
			wpr_print(mHandle, DWP_BEGINPAGE)
			
			mDonePrinting = false
			mDoDeferedFormFeed = false
			
			wpr_getdevice(mHandle, DWP_PIXELWIDTH, mPageWidth)
			wpr_getdevice(mHandle, DWP_PIXELHEIGHT, mPageLength)
			
			doHeading()
			
			
		endmethod
		
		
		private static method doHeading, void
			endparams

			.include 'DBLDIR:winprint.def'

		proc
			
			if (mPrintHeading == true)
			begin
				data penHandle	,i4

				penHandle = %wpr_info(mHandle,DWP_GETPEN)

				printText(mPosX = -1, mPosY, 14, "Times new Roman", DWPFW_BOLD, "SFE Demo Company")
				printText(mPosX = -1, mPosY, 6, "Times new Roman", DWPFW_BOLD, "Spiffing Lane, Spiffingly, UK")
				printText(mPosX = -1, mPosY, 6, "Times new Roman", DWPFW_BOLD, "TEL: 020-8843 5400  FAX: 020-8574 1716/020-8571 7214")
				mPosY += 5
				wpr_print(mHandle,DWP_LINE, penHandle, 1, mPosY ,mPageWidth, mPosY+2)
				mPosY += (wpr_info(mHandle, DWP_TEXTHEIGHT, "X"))

				mPrintStart = mPosY

				wpr_info(mHandle,DWP_DELPEN,penHandle)				
			end
			nop
		endmethod
		
		
		
		private static method doFooter, void
			endparams
		proc
			
			if (mHandle && mPrintHeading)
			begin
				
				mPosY = mPageLength - (wpr_info(mHandle, DWP_TEXTHEIGHT, "X"))
				
				begin
					mPosY = mPosY - 104
					printText(mPosX = -1, mPosY, 4, "Times new Roman", DWPFW_BOLD, "Symphony Solutions Example")
				end
			end
			nop
			
		endmethod
		
		
		
		public static method SetFont	,void
			
			in opt fontName					,a
			in opt fontSize					,n
			in opt fontWeight				,n
			endparams
			
		proc
			
			if ^passed(fontName)
				mfontName = fontName
			
			if ^passed(fontSize)
				mfontSize = fontSize
			
			if ^passed(fontWeight)
				mfontWeight = fontWeight
			nop
		endmethod
		
		
;; prints by row and column		
		public static method Write	,void
			in req row									,i
			in req col									,i
			in req printData							,a
			endparams
			
		proc
			if (mDoDeferedFormFeed)
				FormFeed()		
			
			mDonePrinting = true
	
			data pCol	,i4
			data pRow	,i4		
			pCol = %wpr_info(mHandle, DWP_X_FROM_COL, col)
			pRow = %wpr_info(mHandle, DWP_Y_FROM_ROW, row) + mPrintStart


;			data tmpY	,i4	,mPosY * -1
			printText(PCol,PRow, mfontSize, mfontName, mfontWeight, %atrim(printData))
;			mPosY = tmpY	
			
		endmethod
		
		
		public static method WriteLine	,void
			in req printData							,a
			in opt lineFeedCount						,i
			endparams
			
			
		proc
			
			if (mDoDeferedFormFeed)
				FormFeed()
			
			mDonePrinting = true
			
			printText(mPosX = D_LEFT_MARGIN, mPosY, mfontSize, mfontName, mfontWeight, %atrim(printData))
			
			
			if (^passed(lineFeedCount) && lineFeedCount)
			begin
				data lCount		,i4
				for lCount from 1 thru lineFeedCount by 1
				begin
					printText(mPosX = D_LEFT_MARGIN, mPosY, mfontSize, mfontName, mfontWeight, "")
				end
			end
			
			
		endmethod
		
		public static method FormFeed, void
			endparams
		proc
			
			;;defer incase it's the last form feed request before on of print.
			if (mDonePrinting == true && mDoDeferedFormFeed == true) then
			begin
				doFooter()
				wpr_print(mHandle, DWP_ENDPAGE)
				wpr_print(mHandle, DWP_BEGINPAGE)
				
				mPosY = 1
				mPosX = D_LEFT_MARGIN
				
				doHeading()
				
				mDonePrinting = false
				mDoDeferedFormFeed = false
			end
			else
			begin
				if (mDonePrinting == true)
					mDoDeferedFormFeed = true
			end
			
		endmethod
		
		
		public static method LineFeed	,void
			in opt numberOfLines				,i
			endparams
			
			record
				tCount	,i4
				lCount	,i4	
			endrecord
			
		proc
			
			if (mDoDeferedFormFeed)
				FormFeed()
			
			
			tCount = 1
			if (^passed(numberOfLines) && numberOfLines)
				tCount = numberOfLines
			
			for lCount from 1 thru tCount by 1
			begin
				printText(mPosX = D_LEFT_MARGIN, mPosY, mfontSize, mfontName, mfontWeight, "")
			end
			
			mDonePrinting = true
			
		endmethod
		
		private static method printText, void
			inout req	posX		,i4
			inout req	posY		,i4
			in req		fontSize	,i4
			in req		fontName	,a50
			in req		fontWeight	,i4
			in req		pString		,a500
			endparams
			
			.include 'DBLDIR:winprint.def'
			
			record
				printX		,i4
				printY		,i4
				tmpFont    	,font_specs
			endrecord
			
		proc
			if (!mHandle)
			begin
				mPrintHeading = true
			end
			
			PrintY = posY
			if (printY < 0)
				printY = printY * -1
			
			init tmpFont
			wpr_getdevice(mHandle, DWP_FONT, tmpFont)
			tmpFont.facename = fontName
			tmpFont.weight = fontWeight
			if (mUnderline) then
				tmpFont.underline = 1
			else
				tmpFont.underline = 0
			
			tmpFont.pointsize = fontSize
			tmpFont.fixed = true
			wpr_setdevice(mHandle, DWP_FONT, tmpFont)
			
			if (posx == -1) then
			begin
				;;center of the page
				data textWidth	,i4
				textWidth += wpr_info(mHandle, DWP_TEXTWIDTH, pString)
				printX = (mPageWidth / 2 ) - (textWidth / 2 )
			end
			else
			begin
				printX = posX
			end
			
			if (%trim(pString) != 0) then
			begin
				wpr_print(mHandle, DWP_WRITEOUT, printX, printY, pString)
				posX += wpr_info(mHandle, DWP_TEXTWIDTH, pString)
				if (fontWeight == DWPFW_BOLD)
				begin
					posX += (wpr_info(mHandle, DWP_TEXTWIDTH, pString) * 0.1)
				end
				if (posY > 0) then
				begin
					
					posY += (wpr_info(mHandle, DWP_TEXTHEIGHT, pString))
					
				end									
;					using fontSize select
;					(12),
;						posY += (mPageLength / 67)
;						posY += (wpr_info(mHandle, DWP_TEXTHEIGHT, pString) - 24)
;					(11),
;						posY += (mPageLength / 67)
;						posY += (wpr_info(mHandle, DWP_TEXTHEIGHT, pString) - 20)
;					(9),
;						posY += (mPageLength / 67)
;						posY += (wpr_info(mHandle, DWP_TEXTHEIGHT, pString) - 16)
;					(8),
;						posY += (mPageLength / 67)
;						posY += (wpr_info(mHandle, DWP_TEXTHEIGHT, pString) - 10)
;					(6),
;						posY += (mPageLength / 67)
;						posY += (wpr_info(mHandle, DWP_TEXTHEIGHT, pString) - 8)
;					(),
;						posY += (mPageLength / 67)
;					posY += (wpr_info(mHandle, DWP_TEXTHEIGHT, pString))
;					endusing
;				end
				else
					posY = posY * -1
			end
			else
			begin
				if (posY > 0) then
					posY += wpr_info(mHandle, DWP_TEXTHEIGHT, " ")
				else
					posY = posY * -1
			end
			
		endmethod
		
		public static method PrinterClose	,void
			endparams
			
		proc
			if (mHandle)
			begin
				doFooter()
				wpr_print(mHandle, DWP_ENDPAGE)
				wpr_print(mHandle, DWP_ENDJOB)
				
				data length	,i4
				data result	,a50
				getlog("FORCE_PRINT", result, length)
				if (length && result.eqs."YES") then
				begin
					try
					begin
						wpr_execute(mHandle, DWP_PRINT)
					end
					catch (e, @Exception)
					begin
						nop	;they aborted
					end
					endtry
				end
				else
				begin
					if (wpr_execute(mHandle, DWP_PREVIEW) == DWP_PREVIEW_PRINT)
					begin
						try
						begin
							wpr_execute(mHandle, DWP_PRINT)
						end
						catch (e, @Exception)
						begin
							nop	;they aborted
						end
						endtry
					end
				end
				
				wpr_info(mHandle, DWP_DELPRINTER)
				mDoDeferedFormFeed=false
				clear(mHandle)	
			end
			
		endmethod
		
		public static method SetLandscapeMode, void
			endparams
		proc
			wpr_setdevice(mHandle, DWP_ORIENTATION, DWPO_LANDSCAPE)
			wpr_getdevice(mHandle, DWP_PIXELWIDTH, mPageWidth)
			wpr_getdevice(mHandle, DWP_PIXELHEIGHT, mPageLength)
			
		endmethod
		
		public static method SetPortraitMode, void
			endparams
		proc
			wpr_setdevice(mHandle, DWP_ORIENTATION, DWPO_PORTRAIT)
			wpr_getdevice(mHandle, DWP_PIXELWIDTH, mPageWidth)
			wpr_getdevice(mHandle, DWP_PIXELHEIGHT, mPageLength)
			
		endmethod
		
		
	endclass
	
endnamespace
