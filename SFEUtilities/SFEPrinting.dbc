import System
import System.Collections.Generic
import System.Text
import System.IO

import SynPSG.PDF


.define D_TOP_MARGIN_SPACE	8
.define D_TOP_MARGIN_SPACE_WITH_HEAD	,6
.define D_LEFT_MARGIN,	50

namespace SFEUtilities
	
	public class SFEPrinting
		
		private static mHandle			,i4
		private static mPosY			,i4
		private static mPosX			,i4
		
		private static mDonePrinting		,boolean
		private static mDoDeferedFormFeed	,boolean
		
		private static mPageNumber		,i1
		
		private static mPageWidth		,i4
		private static mPageLength		,i4
		
		private static mfontSize		,i4
		private static mfontName		,a50
		private static mfontWeight		,i4
		private static mUnderline		,boolean
		private static mFontColour		,string
		private static mBackColour		,string

		private static mPDFFontColour	,PdfColor
		private static mPDFBackColour	,PdfColor

		private static mPrinterName		,a100
		private static mPrintHeader		,boolean
		private static mPrintFooter		,boolean
		
		private static mPrintStart		,i4		
		
		private static mPDF			,@PdfFile
		
		private static mReportType		,string
		
		private static mCambriaFont		,string
		private static mConsolasFont	,string
		private static mCalibriFont		,string
		private static mArialNFont		,string
		private static mArialNBFont		,string
		private static mTimesFont		,string
		
		private static mColumnsperLine	,int
		private static mTopMargin		,int
		private static mBottomMargin	,int
		private static mLeftMargin		,int
		private static mRightMargin		,int
		
		private static mHighestRow		,int
		private static mLastPrintPos	,int

		
;-------------------------------------------------------------------------------
		; caters for creating a PDF and using print API
		
		public static method PrinterOpen	,void
			in req reportType				,a		; R for Report or P for PDF
			in opt landscapeMode			,n		; t/f
			in opt columnsPerLine			,n		
			in opt topMargin				,n		; in print API pixels
			in opt bottomMargin				,n		; in print API pixels
			in opt leftMargin				,n		; in print API pixels
			in opt rightMargin				,n		; in print API pixels
			in opt printHeader				,n		; t/f
			in opt printFooter				,n		; t/f
			in opt printerName				,a 		; printer anme for print API or PDF name for PDF
			endparams
			
			.include 'DBLDIR:winprint.def'
			
			
			record 
				landscape		,boolean	
		proc
			
			if mHandle
			begin
				wpr_info(mHandle, DWP_DELPRINTER)
				clear mHandle
			end
			
			mReportType = reportType
			
			if ^passed(landscapeMode) then
				landscape = landscapeMode
			else
				landscape= false
			
			if ^passed(ColumnsperLine) then
				mColumnsperLine = columnsPerLine
			else
				mColumnsperLine = 80
			
			if ^passed(topMargin)then
				if mReportType == 'R' 
					mTopMargin = topMargin
				else
					mTopMargin = 100

			if mReportType == 'P' 
				mTopMargin = mTopMargin/8
			
			if ^passed(bottomMargin) then
				mBottomMargin = bottomMargin
			else
				mBottomMargin = 100

			if mReportType == 'P' 
				mBottomMargin = mBottomMargin/8
						
			if ^passed(leftMargin) then
				mLeftMargin = leftMargin
			else
				mLeftMargin = 100
			
			if mReportType == 'P' 
				mLeftMargin = mLeftMargin/8

			if ^passed(rightMargin) then
				mRightMargin = rightMargin
			else
				mRightMargin = 100
			
			if mReportType == 'P' 
				mRightMargin = mRightMargin/8

			if ^passed(printHeader) then
				mPrintHeader = printHeader
			else
				mPrintHeader = false
			
			mLastPrintPos = mBottomMargin

			
			if ^passed(printFooter) then
				mPrintFooter = printFooter
			else
				mPrintFooter = false
			
			if .not.mfontName			
				mfontName = "Courier"
			
			if .not.mfontSize
				mfontSize = 9
			
			mfontWeight = DWPFW_NORMAL
			
			mCambriaFont	= ^null
			mConsolasFont	= ^null
			mCalibriFont	= ^null
			mArialNFont		= ^null
			mArialNBFont	= ^null
			mTimesFont		= ^null
			
			clear mPageNumber

			if mReportType == 'P' then
			begin
				mPDF = new PdfFile(,,,,,,,,,,,"SFEPDFfiles:")
				
				;;Override default name to suppress date/time prefix, and and ask reader
				;;apps to display the file in full page view.
				if ^passed (printerName) then
					mPDF.FileName = %atrim(printerName) + ".pdf"
				else
					mPDF.FileName = %syn_uname + string(time()) + ".pdf"
				
				mPDF.PageLayout = PdfPageLayout.Single
				mPageLength = mPDF.Height
				mPosY = mPDF.Height	
				mPosX = 1		
			end
			else
			begin
				data result	,a10
				data length	,i4
				getlog("USE_XPS_PRINTER", result, length)
				if (length>0 && result == "YES") then
					xcall wpr_info(mHandle, DWP_GETPRINTER, "Microsoft XPS Document Writer")
				else
				begin
					if (mPrinterName == "       ") then
						xcall wpr_info(mHandle, DWP_GETPRINTER)	;;this will use the user default printer
					else
					begin
						xcall wpr_info(mHandle, DWP_GETPRINTER, mPrinterName)	;;this will use the passed printer.
					end
				end
				
				wpr_setdevice(mHandle, DWP_PAPERSIZE, DWPP_A4)
				
				if (landscapeMode == true) then
				begin
					if .not.mfontSize
						mfontSize = 7
					wpr_setdevice(mHandle, DWP_ORIENTATION, DWPO_PORTRAIT)
				end
				else
				begin
					if .not. mFontsize
						mfontSize = 11
					wpr_setdevice(mHandle, DWP_ORIENTATION, DWPO_PORTRAIT)
				end
				
				mPosX = mLeftMargin
				mPosY = 1
				
				clear mHighestRow 
				
				wpr_print(mHandle, DWP_BEGINJOB) ;Create the metafile
				
				wpr_print(mHandle, DWP_BEGINPAGE)
				
				wpr_getdevice(mHandle, DWP_PIXELWIDTH, mPageWidth)
				wpr_getdevice(mHandle, DWP_PIXELHEIGHT, mPageLength)
			end
			
			if mReportType == 'R' then
			begin
				mPosY = mTopMargin
				mLastPrintPos = mPageLength - mBottomMargin 
			end
			else
				begin
				mPosY = mPDF.Height - mTopMargin
				mLastPrintPos = mBottomMargin		
			end

			if mPrintFooter
				dofooter()	
			
			if mPrintHeader
				doHeading()	
				
			clear mHighestRow
			
			
		endmethod
		
		
		
		;---------------------------------------------------------------------------
		
		public static property ColumnsPerLine, int
			method get
			proc
				mreturn mColumnsperLine
			endmethod
			method set
			proc
				mColumnsperLine = value
			endmethod
			
		endproperty

		private static mLinesLeft		, int

		public static property LinesLeft, int
			method get
			proc
				if mReportType == 'R' then
				begin
					data rowHeight	,int
					
					rowHeight = wpr_info(mHandle, DWP_TEXTHEIGHT, 'X')
					mLinesLeft = ((mPageLength - mPosY) - (mPageLength- mLastPrintPos))/rowHeight
				end
				else
				begin
					mLinesLeft = (mPosY - mLastPrintPos) / mFontSize
				end

				mreturn mLinesLeft
			endmethod
			method set
			proc
				mLinesLeft = value
			endmethod
			
		endproperty		
		;---------------------------------------------------------------------------
		
		private static method doHeading, void
			endparams
			
			.include 'DBLDIR:winprint.def'
			
		proc
			
			if mReportType =='P' then
			begin
				clear mHighestRow
				mPosY = mPageLength - mTopMargin
				SetFont ('Times new roman',14)
				PrintField (1,(mColumnsperLine/2) - 17,"SFE Demo Company")
				SetFont (,8)
				PrintField (2,(mColumnsperLine/2) - 14,"Spiffing Lane, Spiffingly, UK")
				PrintField (3,(mColumnsperLine/2) - 23,"TEL: 020-8843 5400  FAX: 020-8574 1716/020-8571 7214")
				box(4,1,4,mColumnsperLine,50)

				clear mHighestRow
				mPosY = mPosY - mfontSize

			end
			else
			begin
				clear mHighestRow
				mPosY = mTopMargin
				SetFont ('Times new roman',14)
				PrintField (1,-1,"SFE Demo Company")
				SetFont (,8)
				PrintField (2,-1,"Spiffing Lane, Spiffingly, UK")
				PrintField (3,-1,"TEL: 020-8843 5400  FAX: 020-8574 1716/020-8571 7214")
				
				data textHght	,int
				textHght = wpr_info(mHandle, DWP_TEXTHEIGHT, 'X')
				 
				box(4,1,4,mColumnsperLine,textHght / 2)

				mPosY += textHght
									
				clear mHighestRow		
			end
			
		endmethod
		
		
		;------------------------------------------------------------------------
		private static method doFooter, void
			endparams
		proc
										
			SetFont("Calibri",10)
				
			mPageNumber += 1
			if mReportType == 'R' then
			begin
				data tmpX	,int, 1
				data tmpY	,int, 1	
				printText(tmpX,tmpY, mfontSize, mfontName, mfontWeight, "")
				data textHeight	, int
				textHeight = wpr_info(mHandle, DWP_TEXTHEIGHT, 'X')
				mPosY = mPageLength - mBottomMargin - (textHeight*2)
				mHighestRow = 1
				box (1,1,1,ColumnsPerLine,0)
				mPosY += textHeight
				PrintField(1,1,%date())
				PrintField(1,ColumnsPerLine-10,'Page ' + string(mPageNumber))			
				mLastPrintPos = mPageLength - (textHeight *2) - mBottomMargin
			end
			else
			begin
				mPosY = mBottomMargin + (mfontSize * 2)
				mlastPrintPos = mPosY
				mHighestRow = 1
				box (1,1,1,ColumnsPerLine,0)
				PrintField(2,1,%date())
				PrintField(2,ColumnsPerLine-10,'Page ' + string(mPageNumber))				

			end
			
			
		endmethod
		
		
		;-------------------------------------------------------------------------------------------	
		public static method SetFont	,void
			
			in opt fontName					,a
			in opt fontSize					,n
			in opt fontWeight				,n
			in opt fontColor				,a
			in opt backColor				,a
			endparams
			
		proc
			
			if ^passed(fontName)
				mfontName = fontName
			
			if ^passed(fontSize)
				mfontSize = fontSize
			
			if ^passed(fontWeight)
				mfontWeight = fontWeight
			
			if ^passed (fontColor)
				mfontColour = fontColor

			if ^passed (backColor)
				mBackColour = backcolor
			
			if mReportType == 'P' then
			begin
				using mfontName select
				('Cambria'), 	begin
					if !mCambriaFont
						mCambriaFont		= mPDF.LoadTrueTypeFont("fonts:cambriab.ttf")
					mPDF.SelectFont(mCambriaFont,mfontsize)
				end
				('Consolas'), 
				begin
					if !mConsolasFont
						mConsolasFont	= mPDF.LoadTrueTypeFont("fonts:Consola.ttf")
					mPDF.SelectFont(mConsolasFont,mfontsize)
				end
				
				('Calibri'), 	
				begin
					if !mCalibriFont
						mCalibriFont	= mPDF.LoadTrueTypeFont("fonts:Calibri.ttf")
					mPDF.SelectFont(mCalibriFont,mfontsize)
				end
				
				('Arialn'),
				begin
					if !mArialNFont
						mArialNFont		= mPDF.LoadTrueTypeFont("fonts:arialn.ttf")
					mPDF.SelectFont(mArialNFont,mfontsize)
				end
				
				('Arialb'),
				begin
					if !mArialNBFont
						mArialNBFont		= mPDF.LoadTrueTypeFont("fonts:arialb.ttf")
					mPDF.SelectFont(mArialNBFont,mfontsize)
				end		

				('Times new roman'),
				begin
					if !mTimesFont
						mTimesFont		= mPDF.LoadTrueTypeFont("fonts:times.ttf")
					mPDF.SelectFont(mTimesFont,mfontsize)
				end								
				endusing
			
				if ^passed (fontColor)
				begin
					using fontColor select

					('blue'), mPDFFontColour = PdfColor.Blue
					('red'), mPDFFontColour = PdfColor.Red
					('green'), mPDFFontColour = PdfColor.Green
					('grey'), mPDFFontColour = PdfColor.Gray
					(),		mPDFFontColour = PdfColor.DefaultColor
					endusing

				end

			end

			else
			begin
				;; print API
				if ^passed (fontColor)
				begin
					using fontColor select
					("grey"), wpr_setdevice(mHandle,DWP_TEXTCOLOR,m_rgb(180,180,180))
					("blue"), wpr_setdevice(mHandle,DWP_TEXTCOLOR,m_rgb(0,0,255))
					("red"), wpr_setdevice(mHandle,DWP_TEXTCOLOR,m_rgb(255,0,0))
					("greem"), wpr_setdevice(mHandle,DWP_TEXTCOLOR,m_rgb(0,255,0))
					(),wpr_setdevice(mHandle,DWP_TEXTCOLOR,m_rgb(0,0,0))
					endusing
				end

				if ^passed (backColor)
				begin
					using backColor select
					("lightblue"), wpr_setdevice(mHandle,DWP_BACKCOLOR,m_rgb(220,235,245))
					("lightgreen"), wpr_setdevice(mHandle,DWP_BACKCOLOR,m_rgb(207,250,212))
					("lightyelow"), wpr_setdevice(mHandle,DWP_BACKCOLOR,m_rgb(246,247,173))
					("lightgrey"), wpr_setdevice(mHandle,DWP_BACKCOLOR,m_rgb(230,230,230))
					(),wpr_setdevice(mHandle,DWP_BACKCOLOR,m_rgb(255,255,255))
					endusing
				end

			end

		endmethod
		
;-------------------------------------------------------------------------------------------		
;; prints by row and column		
		public static method PrintField	,void
			in req row									,i
			in req col									,i
			in req printData							,a
			endparams
			
		proc
			
			mDonePrinting = true

			if mReportType == 'P' then
				;; note - allows for printing based on row and relative column based on declared number of columns
				;; does not allow printing back to a row already printed, but can print multiple fields on same
				;; line, and can skip lines.   Assumes same font size used on each print line.
			begin
				if row .gt. mHighestRow
				begin
					mPosY -= (mfontSize + 2) * (row-mHighestRow)
					mHighestRow = row
				end
				


				mPosX = ((mPDF.width -mLeftMargin - mRightMargin) * col/mColumnsperLine) + mLeftMargin

				mPdf.DrawText(%atrim(printData),mPosX,mPosY,mPDFFontColour)


			end
			else
			begin
				if (row > mHighestRow)
				begin
					mPosY += ((wpr_info(mHandle, DWP_TEXTHEIGHT, %atrim(printdata))+5) * (row -mHighestRow))
					mHighestRow = row
				end

				if (col == -1) then
				begin

					mPosX = (mPageWidth)/2
					printText(mPosX,mPosY, mfontSize, mfontName, mfontWeight, "")		; to force font size to get width of text
					mPosX -= wpr_info(mHandle, DWP_TEXTWIDTH, atrim(printData))/2
				end
				else
					mPosX = mLeftMargin + ((mPageWidth - mLeftMargin - mRightMargin) * col/mColumnsperLine)
				
				printText(mPosX,mPosY, mfontSize, mfontName, mfontWeight, %atrim(printData))

			end
			
		endmethod

;---------------------------------------------------------------------
; draw boxes and lines
		public static method box, void
			in req	topRow				,int		; top left row
			in req	topCol				,int		; top left column 
			in req	bottomRow			,int		; bottom right row		
			in req	bottomCol			,int		; bottom right col
			in req	margin				,int		; margin to add to co-ordinates (print API pixels)
			in opt  fillColour			,a		; fill colour for box.  No fill if not passed
			endparams
		proc

		
			data topRowPixel		,int
			data topColPixel		,int
			data bottomRowPixel		,int
			data bottomColPixel		,int
			data rowHeight			,int	; row height, in pixels

			
			if mReportType == 'R' then
			begin
				data penHandle	,i4

				rowHeight = wpr_info(mHandle, DWP_TEXTHEIGHT, 'X')
				
				topRowPixel = mPosY + ((topRow - mHighestRow) * rowHeight) 
				bottomRowPixel = mPosY + ((BottomRow - mHighestRow) * rowHeight) 			
				
				topColPixel = mLeftMargin + ((mPageWidth-mLeftMargin - mRightMargin) * topCol/mColumnsperLine) 		
				bottomColPixel = mLeftMargin + ((mPageWidth - mLeftMargin - mRightMargin) * bottomCol/mColumnsperLine)

				penHandle = %wpr_info(mHandle,DWP_GETPEN)

				if topRow == bottomRow || topCol == bottomCol then
				begin
					;; line
					wpr_print(mHandle,DWP_LINE, penHandle, topColPixel, topRowPixel, bottomColPixel, bottomRowPixel)
				end
				else
				begin
					;; box
					topRowPixel -= margin
					topColPixel -= margin
					bottomRowPixel += margin
					bottomColPixel += margin
					bottomRowPixel = bottomRowPixel + rowHeight
					wpr_print(mHandle,DWP_LINE, penHandle, topColPixel, topRowPixel, bottomColPixel, topRowPixel)		;; top line
					wpr_print(mHandle,DWP_LINE, penHandle, topColPixel, bottomRowPixel, bottomColPixel, bottomRowPixel)	;; bottom line
					wpr_print(mHandle,DWP_LINE, penHandle, topColPixel, topRowPixel, topColPixel, bottomRowPixel)		;; LHS
					wpr_print(mHandle,DWP_LINE, penHandle, bottomColPixel, topRowPixel, bottomColPixel, bottomRowPixel)		;; RHS

					if ^passed (fillColour)
					begin
						data fillWidth ,int
						data fillHeight, int
						fillHeight = topRowPixel - bottomRowPixel +4
						fillWidth = topColPixel - bottomColPixel +4
						
						using fillColour select
						('lightblue'),wpr_print(mHandle,DWP_FILL, bottomColpixel-1, bottomRowPixel-1, fillWidth, fillHeight, M_RGB(220,235,245))
						('lightgreen'),wpr_print(mHandle,DWP_FILL, bottomColpixel-1, bottomRowPixel-1, fillWidth, fillHeight, M_RGB(207,250,212))
						('lightyellow'),wpr_print(mHandle,DWP_FILL, bottomColpixel-1, bottomRowPixel-1, fillWidth, fillHeight, M_RGB(246,247,173))
						('lightgrey'),wpr_print(mHandle,DWP_FILL, bottomColpixel-1, bottomRowPixel-1, fillWidth, fillHeight, M_RGB(230,230,230))
						(),wpr_print(mHandle,DWP_FILL, bottomColpixel-1, bottomRowPixel-1, fillWidth, fillHeight, M_RGB(0,0,0))
						endusing
						
					end
				end
			end
			else
			begin
				rowHeight = mfontSize + 2

				topRowPixel = mPosY - ((topRow - mHighestRow-1) * rowHeight) 
				bottomRowPixel = mPosY - ((BottomRow - mHighestRow) * rowHeight) 				
				
				topColPixel = ((mPDF.width - mLeftMargin - mRightMargin) * topCol/mColumnsperLine) + mLeftMargin		
				bottomColPixel = ((mPDF.width -mLeftMargin - mRightMargin) * bottomCol/mColumnsperLine) + mLeftMargin

				if topRow == bottomRow then
				begin
					topRowPixel -= mfontSize/2
					mpdf.AutoItems.Add(new AutoLineAbsolute(topColPixel,topRowpixel,bottomColPixel,topRowPixel))
				end
				else
				begin
					if ^passed (fillColour)
					begin
						using fillColour select
						
						('lightblue'), mPDFBackColour = PdfColor.PaleBlue
						('lightred'), mPDFBackColour = PdfColor.PalePink
						('lightgreen'), mPDFBackColour = PdfColor.PaleGreen
						('lightyellow'), mPDFBackColour = PdfColor.PaleGold
						('lightgrey'), mPDFBackColour = PdfColor.DimGray
						(),		mPDFBackColour = PdfColor.DimGray
						endusing
						
					end
					
					topRowPixel += margin/8
					topColPixel += margin/8
					bottomRowPixel -= margin/8
					bottomColPixel -= margin/8
					mpdf.AutoItems.Add(new AutoBoxAbsolute(topColPixel,topRowpixel,bottomColPixel,bottomRowPixel,,,true,
					&	mPDFBackColour,AutoItemMode.EndPage))
				end
			end

		endmethod

;---------------------------------------------------------------------
		public static method PrintImage	,void
			imageFileName		,a			; image file name
			topRow				,int		; top left row
			topCol				,int		; top left column 
			bottomRow			,int		; bottom right row		
			bottomCol			,int		; bottom right col
			endparams

		proc
			data topRowPixel		,int
			data topColPixel		,int
			data bottomRowPixel		,int
			data bottomColPixel		,int
			data rowHeight			,int	; row height, in pixels
			data PixHeight			,int
			data PixWidth			,int

			if mReportType == 'R' then
			begin

				rowHeight = wpr_info(mHandle, DWP_TEXTHEIGHT, 'X')

				topRowPixel = mPosY + ((topRow - mHighestRow) * rowHeight)
				bottomRowPixel = mPosY + ((BottomRow - mHighestRow) * rowHeight)				
								
				topColPixel = mLeftMargin + (mPageWidth * topCol/mColumnsperLine)			
				bottomColPixel = mLeftMargin + (mPageWidth * bottomCol/mColumnsperLine)	

				PixHeight = bottomRowPixel - topRowPixel
				PixWidth = bottomRowPixel - topRowPixel

				wpr_print(mHandle, DWP_BITMAP, ImageFileName, topColPixel,topRowPixel,pixWidth,pixHeight, true)
			end
			else
			begin
				topRowPixel = mPosY - ((topRow - mHighestRow) * mfontSize)
				bottomRowPixel = mPosY - ((BottomRow - mHighestRow) * mfontSize)				
				
				topColPixel = ((mPDF.width - mLeftMargin - mRightMargin) * topCol/mColumnsperLine) + mLeftMargin		
				bottomColPixel = ((mPDF.width -mLeftMargin - mRightMargin) * bottomCol/mColumnsperLine) + mLeftMargin
				
				PixHeight = topRowPixel - bottomRowPixel
				PixWidth = topRowPixel - bottomRowPixel

				mpdf.AutoItems.Add(new AUtoImage(imageFileName,topColPixel,bottomRowPixel,pixWidth,pixHeight))
			end

		endmethod

		;-------------------------------------------------------------------------------------------
		public static method FormFeed, void
			endparams
		proc
					
			clear mHighestRow 

			if mReportType == 'P' then
			begin
				mPDF.NewPage() 
			end
			else
			begin
				wpr_print(mHandle, DWP_ENDPAGE)
				wpr_print(mHandle, DWP_BEGINPAGE)
				
			end
				
			if mReportType == 'R' then
				mPosY = mTopMargin
			else
				mPosY = mPDF.Height - mTopMargin		
			
			if mPrintFooter
				dofooter()	
					
			if mPrintHeader
				doHeading()	
	

			clear mHighestRow 

		endmethod
		

		;----------------------------------------------------------------------------------------
		
		private static method printText, void
			inout req	posX		,i4
			inout req	posY		,i4
			in req		fontSize	,i4
			in req		fontName	,a50
			in req		fontWeight	,i4
			in req		pString		,a500
			endparams
			
			.include 'DBLDIR:winprint.def'
			
			record
				printX		,i4
				printY		,i4
				tmpFont    	,font_specs
			endrecord
			
		proc
			
			
			PrintY = posY
			if (printY < 0)
				printY = printY * -1
			
			init tmpFont
			wpr_getdevice(mHandle, DWP_FONT, tmpFont)
			tmpFont.facename = fontName
			tmpFont.weight = fontWeight
			if (mUnderline) then
				tmpFont.underline = 1
			else
				tmpFont.underline = 0
			
			tmpFont.pointsize = fontSize
			tmpFont.fixed = true
			wpr_setdevice(mHandle, DWP_FONT, tmpFont)
			
			if (posx == -1) then
			begin
				;;center of the page
				data textWidth	,i4
				textWidth += wpr_info(mHandle, DWP_TEXTWIDTH, pString)
				printX = (mPageWidth / 2 ) - (textWidth / 2 )
			end
			else
			begin
				printX = posX
			end

			wpr_print(mHandle, DWP_WRITEOUT, printX, printY, pString)

		endmethod
		
		;-------------------------------------------------------------------------------
		
		public static method PrinterClose	,void
			endparams
			
		proc
			if mReportType == 'P' then
				mPdf.preview()
			else
				if (mHandle)
				begin
					wpr_print(mHandle, DWP_ENDPAGE)
					wpr_print(mHandle, DWP_ENDJOB)
					
					data length	,i4
					data result	,a50
					getlog("FORCE_PRINT", result, length)
					if (length && result.eqs."YES") then
					begin
						try
						begin
							wpr_execute(mHandle, DWP_PRINT)
						end
						catch (e, @Exception)
						begin
							nop	;they aborted
						end
						endtry
					end
					else
					begin
						if (wpr_execute(mHandle, DWP_PREVIEW) == DWP_PREVIEW_PRINT)
						begin
							try
							begin
								wpr_execute(mHandle, DWP_PRINT)
							end
							catch (e, @Exception)
							begin
								nop	;they aborted
							end
							endtry
						end
					end
					
					wpr_info(mHandle, DWP_DELPRINTER)
					mDoDeferedFormFeed=false
					clear(mHandle)	
				end
			
		endmethod
		
		;-----------------------------------------------------------------------------------
		public static method SetLandscapeMode, void
			endparams
		proc
			
			wpr_setdevice(mHandle, DWP_ORIENTATION, DWPO_LANDSCAPE)
			wpr_getdevice(mHandle, DWP_PIXELWIDTH, mPageWidth)
			wpr_getdevice(mHandle, DWP_PIXELHEIGHT, mPageLength)
			
		endmethod
		
		;-----------------------------------------------------------------------------------
		public static method SetPortraitMode, void
			endparams
		proc
			wpr_setdevice(mHandle, DWP_ORIENTATION, DWPO_PORTRAIT)
			wpr_getdevice(mHandle, DWP_PIXELWIDTH, mPageWidth)
			wpr_getdevice(mHandle, DWP_PIXELHEIGHT, mPageLength)
			
		endmethod
		
		
	endclass
	
endnamespace
