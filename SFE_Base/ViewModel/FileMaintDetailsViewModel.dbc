;;**********************************************************************
;;
;; Title:       FileMaintViewModel.dbc
;;
;; Type:        Class
;;
;; Description: Base/generic Maintenance View Model
;;
;; Author:      Richard C. Morris, Synergex Technology Evangelist
;;
;; Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
import System
import System.Collections.Generic
import System.Text
import Symphony.Conductor.ViewModel
import System.Windows
import Symphony.Conductor.Model
import Symphony.Conductor.DataIO
import System.Collections.ObjectModel
import System.Reflection
import System.Linq
import Symphony.Conductor.Types
import Symphony.Conductor.Commands


namespace SFE_Base.ViewModel
	

	public class FileMaintDetailsViewModel extends FileMaintViewModel
		


		; constructor for 1 set fo detail lines
		
		public method FileMaintDetailsViewModel
			in req sender						,@FrameworkElement
			in req dataItem						,@Type
			in req fileAccess					,@FileIO
			in req errorVisualState				,string
			in req detailItem					,@Type
			in dialogVisualState				,string
			endparams
			parent(sender, dataItem, fileAccess, errorVisualState, dialogVisualState)
		proc
	
			DataObjectDetailItem = detailItem 
			mNumberOfDetailLineSets = 0
			if (detailItem != ^null)
			begin
				DataObjectDetailCollection = new AsyncObservableCollection<DataObjectBase>()
				mNumberOfDetailLineSets = 1
			end
			
		endmethod

		private mNumberOfDetailLineSets		,int


		private mClassConstructor			,@ConstructorInfo
		private mCTORArgs					,[#]@Object		,new Object[1]


.region "Visual state details"


.endregion
		
.region "Event processing"

		public delegate ProgramDetailModeChangedEventandler,void
			in req currentDetailMode					,ProgramMode
		enddelegate
		
		public event ProgramDetailModeChanged		,@ProgramDetailModeChangedEventandler
		
		private method raiseProgramDetailModeChanged,void
			endparams
		proc
			if (mLastProgramDetailMode != mProgramDetailMode)
			begin
				mLastProgramDetailMode = mProgramDetailMode
				raiseevent(ProgramDetailModeChanged, mProgramDetailMode)
			end

;			mDialogResult = ^null

		endmethod
		
.endregion
		
.region "private class members"
		

		private DataObjectDetailItem		,@Type
		private mDetailClassConstructor		,@ConstructorInfo
		private mDetailCTORArgs				,[#]@Object		,new Object[1]
.endregion
		
.region "load base item list"


		;-----these are set to avoid enableing and disabling fields flagging up data is modified


		public readwrite property IgnoreDetailDataChanged		,boolean



		;--------------------------------------------------------------------------		

		private mSelectedCollectionItem				,@DataObjectBase
		
		public override property SelectedCollectionItem		,@DataObjectBase
			method get
			proc
				mreturn mSelectedCollectionItem
			endmethod
			method set
			proc


				if (value != ^null) then
				begin

					mSelectedCollectionItem = value

					CurrentProgramMode = ProgramMode.Enquiry

					DoRaiseProgramModeChanged(CurrentProgramMode)

					IgnoreDataChanged = true
					DataObjectEntryItem.SynergyRecord = mSelectedCollectionItem.SynergyRecord
					DataObjectEntryItem.OriginalSynergyRecord = mSelectedCollectionItem.SynergyRecord
					IgnoreDataChanged = false	
					
					LoadDetailLines()

					DetailGridIsEnabled = true

					SelectedDetailItemIndex = 0

					DeleteCommand.ExecuteState = true

				end
				else
				begin
					DeleteCommand.ExecuteState = false
				end

				NewCommand.ExecuteState = true
				SaveCommand.ExecuteState = false
				CancelCommand.ExecuteState = false

				if (mNumberOfDetailLineSets)
				begin
					NewDetailCommand.ExecuteState = true
					SaveDetailCommand.ExecuteState = false
					CancelDetailCommand.ExecuteState = false


					if (DataObjectDetailCollection.Count)
						DeleteDetailCommand.ExecuteState = true
				end

				RaisePropertyChanged("SelectedCollectionItem")



			endmethod
		endproperty
		



.endregion
		


.region 'detail lines'
		public readwrite property DataObjectDetailCollection		,@AsyncObservableCollection<DataObjectBase>
		
		private mSelectedDetailItemIndex			,int
		
		public property SelectedDetailItemIndex		,int
			method get
			proc
				mreturn mSelectedDetailItemIndex
			endmethod
			method set
			proc
				mProgramDetailMode = ProgramMode.Enquiry
				raiseProgramDetailModeChanged()
				mSelectedDetailItemIndex = value
				RaisePropertyChanged("SelectedDetailItemIndex")
			endmethod
		endproperty
		
		
		private mSelectedDetailCollectionItem			,@DataObjectBase
		
		public property SelectedDetailCollectionItem	,@DataObjectBase
			method get
			proc
				mreturn mSelectedDetailCollectionItem
			endmethod
			method set
			proc

				mProgramDetailMode = ProgramMode.Enquiry
				raiseProgramDetailModeChanged()
				if (value != ^null) then
				begin
					mSelectedDetailCollectionItem = value

					IgnoreDetailDataChanged = true
					DataObjectDetailEntryItem.SynergyRecord			= mSelectedDetailCollectionItem.SynergyRecord
					DataObjectDetailEntryItem.OriginalSynergyRecord	= mSelectedDetailCollectionItem.SynergyRecord
					IgnoreDetailDataChanged = false

					DeleteDetailCommand.ExecuteState = true
					CancelDetailCommand.ExecuteState = false
					RaisePropertyChanged(^null)

				end
				else
				begin
					mSelectedDetailCollectionItem = value
					NewDetailCommand.ExecuteState = true
					SaveDetailCommand.ExecuteState = false
					CancelDetailCommand.ExecuteState = false
					DeleteDetailCommand.ExecuteState = false
				end

				RaisePropertyChanged("SelectedDetailCollectionItem")

			endmethod
		endproperty
		
		
		public readwrite property DataObjectDetailEntryItem		,@DataObjectBase


		; this will always be overridden in the vie wmodel to perform specific processing
		public virtual method LoadDetailLines,void
		proc
			nop
		endmethod

		
.endregion 


.region "Data entry event handlers"
		
		private mLastProgramMode	,ProgramMode

		private mProgramDetailMode			,ProgramMode
		private mLastProgramDetailMode		,ProgramMode


		public method DoIsDetailDataModified,void
			endparams
		proc
			if (!IgnoreDetailDataChanged)
			begin

				DetailGridIsEnabled = !DataObjectDetailEntryItem.IsDataModified
				SaveDetailCommand.ExecuteState = DataObjectDetailEntryItem.IsDataModified && DataObjectDetailEntryItem.IsDataValid
				CancelDetailCommand.ExecuteState = DataObjectDetailEntryItem.IsDataModified
				DeleteDetailCommand.ExecuteState = SelectedDetailCollectionItem != ^null && !DataObjectDetailEntryItem.IsDataModified
				NewDetailCommand.ExecuteState = !DataObjectDetailEntryItem.IsDataModified
				if (DataObjectDetailEntryItem.IsDataModified && DataObjectDetailEntryItem.IsDataValid && mProgramDetailMode == ProgramMode.Enquiry)
				begin
					if (mProgramDetailMode != ProgramMode.Add)
						mProgramDetailMode = ProgramMode.Modify

					raiseProgramDetailModeChanged()
					if (CurrentProgramMode != ProgramMode.Add)
					begin
						CurrentProgramMode = ProgramMode.Modify
						DoRaiseProgramModeChanged(ProgramMode.Modify)
					end
				end

				if (!mDetailGridIsEnabled)
				begin
					GridIsEnabled = false
					NewCommand.ExecuteState = false
					DeleteCommand.ExecuteState = false
					CancelCommand.ExecuteState = true
					SaveCommand.ExecuteState = false
				end

			end


		endmethod

.endregion
		
.region "Standard commands"


		public override method doNewCommand,void
			sender							,@Object
			param							,string
			endparams
		proc
			DataObjectEntryItem.InitData()
			DataObjectEntryItem.InitDataPlus()
			DataObjectEntryItem.InitialValidateData()

			if (mNumberOfDetailLineSets)
			begin
				DataObjectDetailEntryItem.InitData()
				DataObjectDetailEntryItem.InitDataPlus()
				DataObjectDetailEntryItem.InitialValidateData()
				DataObjectDetailCollection.ClearCollection()
			end

			NewCommand.ExecuteState = false
			IgnoreDataChanged = true
			GridIsEnabled = false
			DataObjectEntryItem.SetFieldEnabledStatus(true, "*ALL*")
			IgnoreDataChanged = false
			CurrentProgramMode = ProgramMode.Add
			DoRaiseProgramModeChanged(ProgramMode.Add)
		endmethod
	

		public override method doSaveCommand,void
			sender								,@Object
			param								,string
			endparams
		proc

			using CurrentProgramMode select
			(ProgramMode.Modify)			,
			begin
				;;restore the data to the colleciton item and update the file.
				SelectedCollectionItem.SynergyRecord = DataObjectEntryItem.SynergyRecord
				if (FileAccessObject.UpdateRecordUsingGRFA(SelectedCollectionItem) != FileAccessResults.Success)
				begin
					DataObjectEntryItem.RestoreOriginalData()
					ErrorInfo = "Synergy error : " + %string(FileAccessObject.LastSynergyError)
					using (FileAccessObject.LastSynergyError) select
					(54)					,ErrorDetails = ' You are trying to add a record with a key which already exists - please use a different code.'
					(431)					,ErrorDetails = 'Someone else has updated this record before you saved your changes.  Your changes have been lost.  Please try again.'
					(40)					,ErrorDetails = 'Another program is holding this record locked and your changes cannot be saved.  Please try again.'
					()						,ErrorDetails = 'Your changes have not been saved.  Please try again and refer to support if the problem persists.'
					endusing

					MoveToState(ErrorVisualState)
				end

				SaveDetailLines()

				DataObjectEntryItem.OriginalSynergyRecord = SelectedCollectionItem.SynergyRecord 
				DataObjectEntryItem.RestoreOriginalData()
			end
			(ProgramMode.Add)				,
			begin

				; allow key value to be set in program specific view model
				SetKeyForNewRecord()

				data tmpObj						,@DataObjectBase
				mCTORArgs[1] = DataObjectEntryItem.SynergyRecord

				if (mClassConstructor == ^null)
				begin
					;;we did not use the standard/base list load capability

					data classTypeInfo			,@TypeInfo		,IntrospectionExtensions.GetTypeInfo(DataObjectItem)
					data item					,@ConstructorInfo
					foreach item in classTypeInfo.DeclaredConstructors
					begin
						mClassConstructor = item
						if (mClassConstructor.ToString() == "Void .ctor(System.String)")
							exitloop
					end
				end
				tmpObj = (DataObjectBase)mClassConstructor.Invoke(mCTORArgs)
	
				if (FileAccessObject.CreateRecord(tmpObj) != FileAccessResults.Success) then
				begin
					ErrorInfo = "Synergy error : " + %string(FileAccessObject.LastSynergyError)
					using (FileAccessObject.LastSynergyError) select
					(54)					,ErrorDetails = ' You are trying to add a record with a key which already exists - please use a different code.'
					(431)					,ErrorDetails = 'Someone else has updated this record before you saved your changes.  Your changes have been lost.  Please try again.'
					(40)					,ErrorDetails = 'Another program is holding this record locked and your changes cannot be saved.  Please try again.'
					()						,ErrorDetails = 'Your changes have not been saved.  Please try again and refer to support if the problem persists.'
					endusing
					MoveToState(ErrorVisualState)
				end
				else
				begin
					AddDetailLines()
					DataObjectCollection.AddToCollection(tmpObj)
					DataObjectEntryItem.OriginalSynergyRecord = DataObjectEntryItem.SynergyRecord 
					DataObjectEntryItem.RestoreOriginalData()
					SelectedCollectionItem = tmpObj
				end
			end
			endusing

			DoRaiseProgramModeChanged(CurrentProgramMode)
			GridIsEnabled = true
			NewCommand.ExecuteState = true
			SaveCommand.ExecuteState = false
			CancelCommand.ExecuteState = false
			DeleteCommand.ExecuteState = true
			CurrentProgramMode = ProgramMode.Enquiry

		endmethod
		
		; dummy method which can be overridden in view models which require the ability to set automatic key(s) for new record
		public virtual method SetKeyForNewRecord,void

			endparams
		proc
			nop
		endmethod


		public override method doCancelCommand,void
			sender								,@Object
			param								,string
			endparams
		proc
			CurrentProgramMode = ProgramMode.Enquiry
			DoRaiseProgramModeChanged(ProgramMode.Enquiry)
			DataObjectEntryItem.RestoreOriginalData()
			DataObjectEntryItem.InitialValidateData()
			DataObjectEntryItem.RestoreOriginalData()
			NewCommand.ExecuteState = true
			SaveCommand.ExecuteState = false
			CancelCommand.ExecuteState = false
			DeleteCommand.ExecuteState = true

			LoadDetailLines()
			DetailGridIsEnabled = true
			SelectedDetailItemIndex = 0

			GridIsEnabled = true

		endmethod
		


		public override method doDeleteCommand,void
			sender		,@Object
			param		,string
			endparams
		proc
			if (SelectedCollectionItem != ^null)
			begin
				if CurrentDialogResult == ^null then
				begin
					DialogVM.Message = "Are you SURE you want to Delete this Record?."
					DialogVM.Icon = DialogIcon.Question
					DialogVM.Style = DialogStyle.YesNo
				
					MoveToState("DialogViewState")
				end
				else
				begin
					if (FileAccessObject.DeleteRecordUsingGRFA(SelectedCollectionItem) != FileAccessResults.Success) then
					begin
						ErrorInfo = "Synergy error : " + %string(FileAccessObject.LastSynergyError)
						MoveToState(ErrorVisualState)
					end
					else
					begin
						;;remove the item from the list

						DeleteDetailLines ()

						DataObjectCollection.Remove(SelectedCollectionItem)
						SelectedItemIndex  = 0
					
						;;init the entry object
						;					DataObjectEntryItem.InitData()
						GridIsEnabled = true
					end
					CurrentProgramMode = ProgramMode.Enquiry
					DoRaiseProgramModeChanged(ProgramMode.Enquiry)
				end
				SaveCommand.ExecuteState = false
				CancelCommand.ExecuteState = false
				DeleteCommand.ExecuteState = true
				NewCommand.ExecuteState = true
				GridIsEnabled = true
			end
		endmethod
	


		; dummy method which can be overridden in view models which require the ability to update detail lines
		public virtual method SaveDetailLines,void

			endparams
		proc
			nop
		endmethod

		; dummy method which can be overridden in view models which require the ability to update detail lines
		public virtual method AddDetailLines,void

			endparams
		proc
			nop
		endmethod

		; dummy method which can be overridden in view models which require the ability to update detail lines
		public virtual method DeleteDetailLines,void

			endparams
		proc
			nop
		endmethod

		; dummy method which can be overridden in view models which require the ability to update on screen totals
		public virtual method UpdateTotals,void
			in req mode		,string					; mode - add, modify or delete
			endparams
		proc
			nop
		endmethod
		
.endregion

;---------------------------------------- detail lines ------------------------------------------------------------------------	
.region "detail line commands"
		
		private mNewDetailCommand			,@GenericCommand
		
		public property NewDetailCommand	,@GenericCommand
			method get
			proc
				if (mNewDetailCommand == ^null)
				begin
					mNewDetailCommand = new GenericCommand("NEW", doNewDetailCommand)
					mNewDetailCommand.ExecuteState = true
				end
				mreturn mNewDetailCommand
			endmethod
		endproperty
		
		private method doNewDetailCommand,void
			sender									,@Object
			param									,string
			endparams
		proc
			ignoreDetailDataChanged = true

			DataObjectDetailEntryItem.InitData()
			DataObjectDetailEntryItem.InitDataPlus()
			DataObjectDetailEntryItem.InitialValidateData()
			
			DataObjectDetailEntryItem.SetFieldEnabledStatus(true, "*ALL*")
			mProgramDetailMode = ProgramMode.Add	

			NewDetailCommand.ExecuteState = false

			mDeleteDetailCommand.ExecuteState = false
			mSaveDetailCommand.ExecuteState = false
			mCancelDetailCommand.ExecuteState = true		
			raiseProgramDetailModeChanged()

			GridIsEnabled = false		
			DetailGridIsEnabled = false
			ignoreDetailDataChanged = false

		endmethod
		
		private mSaveDetailCommand				,@GenericCommand
		
		public property SaveDetailCommand		,@GenericCommand
			method get
			proc
				if (mSaveDetailCommand == ^null)
				begin
					mSaveDetailCommand = new GenericCommand("SAVE", doSaveDetailCommand)
					mSaveDetailCommand.ExecuteState = false
				end
				mreturn mSaveDetailCommand
			endmethod
		endproperty
		
		private method doSaveDetailCommand,void
			sender									,@Object
			param									,string
			endparams
		proc

			using mProgramDetailMode select
			(ProgramMode.Modify)				,
			begin
				;; update totals when changing lines
				UpdateTotals('Modify')

				;;restore the data to the colleciton item
				SelectedDetailCollectionItem.SynergyRecord = DataObjectDetailEntryItem.SynergyRecord
				DataObjectDetailEntryItem.OriginalSynergyRecord = SelectedDetailCollectionItem.SynergyRecord 
				DataObjectDetailEntryItem.RestoreOriginalData()
			end

			(ProgramMode.Add)					,
			begin
				data tmpObj							,@DataObjectBase
				;; update totals when changing lines
				UpdateTotals('Add')

				 
				mDetailCTORArgs[1] = DataObjectDetailEntryItem.SynergyRecord

				if (mDetailClassConstructor == ^null)
				begin
					;;we did not use the standard/base list load capability

					data classTypeInfo				,@TypeInfo		,IntrospectionExtensions.GetTypeInfo(DataObjectDetailItem)
					data item						,@ConstructorInfo
					foreach item in classTypeInfo.DeclaredConstructors
					begin
						mDetailClassConstructor = item
						if (mDetailClassConstructor.ToString() == "Void .ctor(System.String)")
							exitloop
					end	
				end	
				tmpObj = (DataObjectBase)mDetailClassConstructor.Invoke(mDetailCTORArgs)
				DataObjectDetailCollection.AddToCollection(tmpObj)
					
				DataObjectDetailEntryItem.OriginalSynergyRecord = DataObjectDetailEntryItem.SynergyRecord 
				DataObjectDetailEntryItem.RestoreOriginalData()
				SelectedDetailCollectionItem = tmpObj
				SelectedDetailItemIndex = DataObjectDetailCollection.Count

			end
			endusing
			
			mProgramDetailMode = ProgramMode.Enquiry
			raiseProgramDetailModeChanged()		

			if (SelectedDetailItemIndex >= 0) then
			begin
				DeleteDetailCommand.ExecuteState = true
				SaveDetailCommand.ExecuteState = false
				CancelDetailCommand.ExecuteState = false
			end
			else
			begin
				DeleteDetailCommand.ExecuteState = false
				SaveDetailCommand.ExecuteState = false
				CancelDetailCommand.ExecuteState = false
			end
			NewDetailCommand.ExecuteState = true

			DetailGridIsEnabled = true

			if (DataObjectEntryItem.IsDataValid)
				SaveCommand.ExecuteState = true
			CancelCommand.ExecuteState = true
			NewCommand.ExecuteState = false
			DeleteCommand.ExecuteState= false
			GridIsEnabled = false

			if (CurrentProgramMode == ProgramMode.Enquiry)
			begin
				CurrentProgramMode = ProgramMode.Modify
				DoRaiseProgramModeChanged(ProgramMode.Modify)
			end

		endmethod
		

		private mCancelDetailCommand			,@GenericCommand
		
		public property CancelDetailCommand		,@GenericCommand
			method get
			proc
				if (mCancelDetailCommand == ^null)
				begin
					mCancelDetailCommand = new GenericCommand("CANCEL", doCancelDetailCommand)
					mCancelDetailCommand.ExecuteState = false
				end
				mreturn mCancelDetailCommand
			endmethod
		endproperty
		
		private method doCancelDetailCommand,void
			sender									,@Object
			param									,string
			endparams
		proc
			DataObjectDetailEntryItem.RestoreOriginalData()
			DataObjectDetailEntryItem.InitialValidateData()
			DataObjectDetailEntryItem.RestoreOriginalData()

			mProgramDetailMode = ProgramMode.Enquiry
			raiseProgramDetailModeChanged()
			
			NewDetailCommand.ExecuteState = true


			DeleteDetailCommand.ExecuteState = true
			SaveDetailCommand.ExecuteState = false
			CancelDetailCommand.ExecuteState = false

			NewDetailCommand.ExecuteState = true
			DetailGridIsEnabled = true

		endmethod
		
		private mDeleteDetailCommand			,@GenericCommand
		
		public property DeleteDetailCommand		,@GenericCommand
			method get
			proc
				if (mDeleteDetailCommand == ^null)
				begin
					mDeleteDetailCommand = new GenericCommand("DELETE", doDeleteDetailCommand)
					mDeleteDetailCommand.ExecuteState = false
				end
				mreturn mDeleteDetailCommand
			endmethod
		endproperty
		
		private method doDeleteDetailCommand,void
			sender								,@Object
			param								,string
			endparams
		proc
			if (SelectedDetailCollectionItem != ^null)
			begin
				data positionInList	,int,	mSelectedDetailItemIndex
				;; update totals when deleting lines
				UpdateTotals('Delete')

				;;remove the item from the list
				DataObjectDetailCollection.Remove(SelectedDetailCollectionItem)
				SelectedDetailCollectionItem  = ^null
					
				;;init the entry object
				DataObjectDetailEntryItem.InitData()

				; highligh next line
				if (DataObjectDetailCollection.Count)
					begin
					if (mSelectedDetailItemIndex < DataObjectDetailCollection.Count -1) then
						mSelectedDetailItemIndex= positionInList
					else
						mSelectedDetailItemIndex = DataObjectDetailCollection.Count -1
					RaisePropertyChanged("SelectedDetailItemIndex")
					end
			end

			mProgramDetailMode = ProgramMode.Enquiry
			raiseProgramDetailModeChanged()
			
			if (SelectedDetailItemIndex) then
			begin
				DeleteDetailCommand.ExecuteState = true
				SaveDetailCommand.ExecuteState = false
				CancelDetailCommand.ExecuteState = false
			end
			else
			begin
				DeleteDetailCommand.ExecuteState = false
				SaveDetailCommand.ExecuteState = false
				CancelDetailCommand.ExecuteState = false
			end
			NewDetailCommand.ExecuteState = true
			DetailGridIsEnabled = true			
			SaveCommand.ExecuteState = true
			CancelCommand.ExecuteState = true
			NewCommand.ExecuteState = false
			DeleteCommand.ExecuteState= false
			GridIsEnabled = false

			if (CurrentProgramMode == ProgramMode.Enquiry)
			begin
				CurrentProgramMode = ProgramMode.Modify
				DoRaiseProgramModeChanged(ProgramMode.Modify)
			end

		endmethod

.endregion

		
.region "list/grid options"
		
		private mGridIsEnabled				,boolean		,true
		
		public property GridIsEnabled		,boolean
			method get
			proc
				mreturn mGridIsEnabled
			endmethod
			method set
			proc
				if (mGridIsEnabled != value)
				begin
					mGridIsEnabled = value
					RaisePropertyChanged("GridIsEnabled")
				end
			endmethod
		endproperty


		private mDetailGridIsEnabled			,boolean		,true
		
		public property DetailGridIsEnabled		,boolean
			method get
			proc
				mreturn mDetailGridIsEnabled
			endmethod
			method set
			proc
				if (mDetailGridIsEnabled != value)
				begin
					mDetailGridIsEnabled = value
					RaisePropertyChanged("DetailGridIsEnabled")
				end
			endmethod
		endproperty
		
		
.endregion


	endclass
	
endnamespace
