;;**********************************************************************
;;
;; Title:       FileMaintViewModel.dbc
;;
;; Type:        Class
;;
;; Description: Base/generic Maintenance View Model
;;
;; Author:      Richard C. Morris, Synergex Technology Evangelist
;;
;; Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
import System
import System.Collections.Generic
import System.Text
import Symphony.Conductor.ViewModel
import System.Windows
import Symphony.Conductor.Model
import Symphony.Conductor.DataIO
import System.Collections.ObjectModel
import System.Reflection
import System.Linq
import Symphony.Conductor.Types
import Symphony.Conductor.Commands


namespace SFE_Base.ViewModel
	

	public class FileMaintViewModel extends BaseViewModel
		
		; constructor for no detail lines
		public method FileMaintViewModel
			in req sender				,@FrameworkElement
			in req dataItem				,@Type
			in req fileAccess			,@FileIO
			in req VMerrorVisualState		,string
			in VMdialogVisualState		,string
			endparams
			parent(sender)
		proc

			configureDialog(sender)

			;;store the passed info
			DataObjectItem = dataItem
			FileAccessObject = fileAccess
			ErrorVisualState = VMerrorVisualState
			if  (!string.IsNullOrEmpty(VMdialogVisualState))
				DialogVisualState = VMdialogVisualState
			
			this.AfterNavigateState += doAfterStateNavigation

			;;create our base collection
			DataObjectCollection = new AsyncObservableCollection<DataObjectBase>()

			
		endmethod



.region "List controlling and loading methods"
		
		public method LoadDetailList		,void
			endparams
		proc
			;;if we have a valid file object let's load the initial list
			if (!FileAccessObject.LastSynergyError)
				LoadBaseItemCollection()
		endmethod

.endregion

.region "Visual state details"
			
		protected readwrite property ErrorVisualState	,string 

		protected readwrite property DialogVisualState	,string

		private method doAfterStateNavigation,void
			eArgs		,@Symphony.Conductor.ViewModel.NavigateFromStateEventArgs 
			endparams
		proc
			if (eArgs.CurrentStateName == ErrorVisualState)
			begin
				doCancelCommand(^null, "")
			end

			if (eArgs.OldStateName == DialogVisualState)
			begin
				using CurrentDialogResult select
				(DialogResult.No),
					doCancelCommand(^null, "")
				(DialogResult.Cancel),
					doCancelCommand(^null, "")
				(DialogResult.Yes),
					doDeleteCommand(^null, "")
				(DialogResult.Retry),
					nop
				(DialogResult.OK),
					nop
				(),
					nop
				endusing
			end
		endmethod

.endregion
		
.region "Event processing"
		
		public delegate ProgramModeChangedEventandler,void
			in req currentMode					,ProgramMode
		enddelegate
		
		public event ProgramModeChanged		,@ProgramModeChangedEventandler
		
		private method raiseProgramModeChanged,void
			endparams
		proc
			if (mLastProgramMode != CurrentProgramMode)
			begin
				mLastProgramMode = CurrentProgramMode
				raiseevent(ProgramModeChanged, CurrentProgramMode)
			end

			CurrentDialogResult = ^null
		endmethod

		; this allows extended base classes to raise the program mode changed event
		public method DoRaiseProgramModeChanged,	Void
			in req mode		,ProgramMode

		proc
			CurrentProgramMode = mode
			raiseProgramModeChanged()
		endmethod

	
.endregion
		
.region "private class members"
		


		protected readwrite property DataObjectItem			,@Type

		protected readwrite property FileAccessObject		,@FileIO


.endregion
		
.region "load base item list"
		
		private mClassConstructor			,@ConstructorInfo
		private mCTORArgs					,[#]@Object		,new Object[1]

		public virtual method LoadBaseItemCollection,void
			endparams
		proc
			
			data firstTime							,boolean				,true
			
			data classTypeInfo						,@TypeInfo				,IntrospectionExtensions.GetTypeInfo(DataObjectItem)
			if (classTypeInfo != ^null)
			begin
				data item							,@ConstructorInfo
				foreach item in classTypeInfo.DeclaredConstructors
				begin
					mClassConstructor = item
					if (mClassConstructor.ToString() == "Void .ctor(System.String)")
						exitloop
				end
				
				mCTORArgs[1] = ""
				
				DataObjectEntryItem = (DataObjectBase)mClassConstructor.Invoke(mCTORArgs)
				
				;;bind the required handlers
				DataObjectEntryItem.IsDataModifiedChanged += DoIsDataModified
				
				
				data status							,FileAccessResults		,FileAccessResults.Success
				while (status == FileAccessResults.Success)
				begin
					data classInstance = mClassConstructor.Invoke(mCTORArgs)
					
					if (firstTime) then
						status = FileAccessObject.ReadFirstRecord((DataObjectBase)classInstance)
					else
						status = FileAccessObject.ReadNextRecord((DataObjectBase)classInstance)
					
					firstTime = false
					
					if (status == FileAccessResults.Success)
					begin
						
						DataObjectCollection.AddToCollection((DataObjectBase)classInstance)
					end
				end
			end
		endmethod
		
		public readwrite property DataObjectCollection	,@AsyncObservableCollection<DataObjectBase>

		private mSelectedItemIndex				,int
		
		public property SelectedItemIndex		,int
			method get
			proc
				mreturn mSelectedItemIndex
			endmethod
			method set
			proc
				mSelectedItemIndex = value

				; master record in list selected.  Now load the DataObjectDetailCollection

				RaisePropertyChanged("SelectedItemIndex")
			endmethod
		endproperty
		
		;-----these are set to avoid enableing and disabling fields flagging up data is modified


		public readwrite property IgnoreDataChanged		,boolean

		
		;--------------------------------------------------------------------------

		private mSelectedCollectionItem				,@DataObjectBase
		
		public virtual property SelectedCollectionItem		,@DataObjectBase
			method get
			proc
				mreturn mSelectedCollectionItem
			endmethod
			method set
			proc


				if (value != ^null) then
				begin

					mSelectedCollectionItem = value

					CurrentProgramMode = ProgramMode.Enquiry
					raiseProgramModeChanged()

					IgnoreDataChanged = true
					DataObjectEntryItem.SynergyRecord = mSelectedCollectionItem.SynergyRecord
					DataObjectEntryItem.OriginalSynergyRecord = mSelectedCollectionItem.SynergyRecord
					IgnoreDataChanged = false	
					DeleteCommand.ExecuteState = true

				end
				else
				begin
					DeleteCommand.ExecuteState = false
				end

				NewCommand.ExecuteState = true
				SaveCommand.ExecuteState = false
				CancelCommand.ExecuteState = false

				RaisePropertyChanged("SelectedCollectionItem")



			endmethod
		endproperty
		
		public readwrite property DataObjectEntryItem			,@DataObjectBase
				
.endregion
		




.region "Data entry event handlers"
		
		protected readwrite property CurrentProgramMode		,ProgramMode


		private mLastProgramMode	,ProgramMode

		
		public method DoIsDataModified,void
			endparams
		proc

			if (!IgnoreDataChanged)
			begin
				GridIsEnabled = !DataObjectEntryItem.IsDataModified
				SaveCommand.ExecuteState = DataObjectEntryItem.IsDataModified && DataObjectEntryItem.IsDataValid
				CancelCommand.ExecuteState = DataObjectEntryItem.IsDataModified
				DeleteCommand.ExecuteState = SelectedCollectionItem != ^null && !DataObjectEntryItem.IsDataModified
				NewCommand.ExecuteState = !DataObjectEntryItem.IsDataModified
				if (DataObjectEntryItem.IsDataModified && DataObjectEntryItem.IsDataValid && CurrentProgramMode == ProgramMode.Enquiry)
				begin
					if (CurrentProgramMode != ProgramMode.Add)
					begin
						CurrentProgramMode = ProgramMode.Modify
						raiseProgramModeChanged()
					end
				end
			end

		endmethod


.endregion
		
.region "Standard commands"
		
		private mNewCommand				,@GenericCommand
		
		public property NewCommand		,@GenericCommand
			method get
			proc
				if (mNewCommand == ^null)
				begin
					mNewCommand = new GenericCommand("NEW", doNewCommand)
					mNewCommand.ExecuteState = true
				end
				mreturn mNewCommand
			endmethod
		endproperty
		
		public virtual method doNewCommand,void
			sender							,@Object
			param							,string
			endparams
		proc
			DataObjectEntryItem.InitData()
			DataObjectEntryItem.InitDataPlus()
			DataObjectEntryItem.InitialValidateData()

	

			NewCommand.ExecuteState = false
			IgnoreDataChanged = true
			GridIsEnabled = false
			DataObjectEntryItem.SetFieldEnabledStatus(true, "*ALL*")
			IgnoreDataChanged = false
			CurrentProgramMode = ProgramMode.Add
			raiseProgramModeChanged()
		endmethod
		
		private mSaveCommand			,@GenericCommand
		
		public property SaveCommand		,@GenericCommand
			method get
			proc
				if (mSaveCommand == ^null)
				begin
					mSaveCommand = new GenericCommand("SAVE", doSaveCommand)
					mSaveCommand.ExecuteState = false
				end
				mreturn mSaveCommand
			endmethod
		endproperty
		
		public virtual method doSaveCommand,void
			sender								,@Object
			param								,string
			endparams
		proc

			using CurrentProgramMode select
			(ProgramMode.Modify)			,
			begin
				;;restore the data to the colleciton item and update the file.
				SelectedCollectionItem.SynergyRecord = DataObjectEntryItem.SynergyRecord
				if (FileAccessObject.UpdateRecordUsingGRFA(SelectedCollectionItem) != FileAccessResults.Success)
				begin
					DataObjectEntryItem.RestoreOriginalData()
					ErrorInfo = "Synergy error : " + %string(FileAccessObject.LastSynergyError)
					using (FileAccessObject.LastSynergyError) select
					(54)					,ErrorDetails = ' You are trying to add a record with a key which already exists - please use a different code.'
					(431)					,ErrorDetails = 'Someone else has updated this record before you saved your changes.  Your changes have been lost.  Please try again.'
					(40)					,ErrorDetails = 'Another program is holding this record locked and your changes cannot be saved.  Please try again.'
					()						,ErrorDetails = 'Your changes have not been saved.  Please try again and refer to support if the problem persists.'
					endusing

					MoveToState(ErrorVisualState)
				end

				DataObjectEntryItem.OriginalSynergyRecord = SelectedCollectionItem.SynergyRecord 
				DataObjectEntryItem.RestoreOriginalData()
			end
			(ProgramMode.Add)				,
			begin

				; allow key value to be set in program specific view model
				SetKeyForNewRecord()

				data tmpObj						,@DataObjectBase
				mCTORArgs[1] = DataObjectEntryItem.SynergyRecord

				if (mClassConstructor == ^null)
				begin
					;;we did not use the standard/base list load capability

					data classTypeInfo			,@TypeInfo		,IntrospectionExtensions.GetTypeInfo(DataObjectItem)
					data item					,@ConstructorInfo
					foreach item in classTypeInfo.DeclaredConstructors
					begin
						mClassConstructor = item
						if (mClassConstructor.ToString() == "Void .ctor(System.String)")
							exitloop
					end
				end
				tmpObj = (DataObjectBase)mClassConstructor.Invoke(mCTORArgs)
	
				if (FileAccessObject.CreateRecord(tmpObj) != FileAccessResults.Success) then
				begin
					ErrorInfo = "Synergy error : " + %string(FileAccessObject.LastSynergyError)
					using (FileAccessObject.LastSynergyError) select
					(54)					,ErrorDetails = ' You are trying to add a record with a key which already exists - please use a different code.'
					(431)					,ErrorDetails = 'Someone else has updated this record before you saved your changes.  Your changes have been lost.  Please try again.'
					(40)					,ErrorDetails = 'Another program is holding this record locked and your changes cannot be saved.  Please try again.'
					()						,ErrorDetails = 'Your changes have not been saved.  Please try again and refer to support if the problem persists.'
					endusing
					MoveToState(ErrorVisualState)
				end
				else
				begin
					DataObjectCollection.AddToCollection(tmpObj)
					DataObjectEntryItem.OriginalSynergyRecord = DataObjectEntryItem.SynergyRecord 
					DataObjectEntryItem.RestoreOriginalData()
					SelectedCollectionItem = tmpObj
				end
			end
			endusing

			raiseProgramModeChanged()
			GridIsEnabled = true
			NewCommand.ExecuteState = true
			SaveCommand.ExecuteState = false
			CancelCommand.ExecuteState = false
			DeleteCommand.ExecuteState = true
			CurrentProgramMode = ProgramMode.Enquiry

		endmethod
		
		; dummy method which can be overridden in view models which require the ability to set automatic key(s) for new record
		public virtual method SetKeyForNewRecord,void

			endparams
		proc
			nop
		endmethod


		private mCancelCommand				,@GenericCommand
		
		public property CancelCommand		,@GenericCommand
			method get
			proc
				if (mCancelCommand == ^null)
				begin
					mCancelCommand = new GenericCommand("CANCEL", doCancelCommand)
					mCancelCommand.ExecuteState = false
				end
				mreturn mCancelCommand
			endmethod
		endproperty
		
		public virtual method doCancelCommand,void
			sender								,@Object
			param								,string
			endparams
		proc
			CurrentProgramMode = ProgramMode.Enquiry
			raiseProgramModeChanged()
			DataObjectEntryItem.RestoreOriginalData()
			DataObjectEntryItem.InitialValidateData()
			DataObjectEntryItem.RestoreOriginalData()
			NewCommand.ExecuteState = true
			SaveCommand.ExecuteState = false
			CancelCommand.ExecuteState = false
			DeleteCommand.ExecuteState = true
			GridIsEnabled = true

		endmethod
		
		private mDeleteCommand				,@GenericCommand
		
		public property DeleteCommand		,@GenericCommand
			method get
			proc
				if (mDeleteCommand == ^null)
				begin
					mDeleteCommand = new GenericCommand("DELETE", doDeleteCommand)
					mDeleteCommand.ExecuteState = false
				end
				mreturn mDeleteCommand
			endmethod
		endproperty
		
		public virtual method doDeleteCommand,void
			sender		,@Object
			param		,string
			endparams
		proc
			if (SelectedCollectionItem != ^null)
			begin
				if CurrentDialogResult == ^null then
				begin
					DialogVM.Message = "Are you SURE you want to Delete this Record?."
					DialogVM.Icon = DialogIcon.Question
					DialogVM.Style = DialogStyle.YesNo
				
					MoveToState("DialogViewState")
				end
				else
				begin
					if (FileAccessObject.DeleteRecordUsingGRFA(SelectedCollectionItem) != FileAccessResults.Success) then
					begin
						ErrorInfo = "Synergy error : " + %string(FileAccessObject.LastSynergyError)
						MoveToState(ErrorVisualState)
					end
					else
					begin
						;;remove the item from the list

						DataObjectCollection.Remove(SelectedCollectionItem)
						SelectedItemIndex  = 0
					
						;;init the entry object
						;					DataObjectEntryItem.InitData()
						GridIsEnabled = true
					end
					CurrentProgramMode = ProgramMode.Enquiry
					raiseProgramModeChanged()
				end
				SaveCommand.ExecuteState = false
				CancelCommand.ExecuteState = false
				DeleteCommand.ExecuteState = true
				NewCommand.ExecuteState = true
				GridIsEnabled = true
			end
		endmethod
	


		; dummy method which can be overridden in view models which require the ability to update on screen totals
		public virtual method UpdateTotals,void
			in req mode		,string					; mode - add, modify or delete
			endparams
		proc
			nop
		endmethod
		
.endregion

		
.region "list/grid options"
		
		private mGridIsEnabled				,boolean		,true
		
		public property GridIsEnabled		,boolean
			method get
			proc
				mreturn mGridIsEnabled
			endmethod
			method set
			proc
				if (mGridIsEnabled != value)
				begin
					mGridIsEnabled = value
					RaisePropertyChanged("GridIsEnabled")
				end
			endmethod
		endproperty
		
.endregion
		
.region "Error information"
		
		private mErrorInfo				,string
		
		public property ErrorInfo		,string
			method get
			proc
				mreturn mErrorInfo
			endmethod
			method set
			proc
				mErrorInfo = value
				RaisePropertyChanged("ErrorInfo")
			endmethod
		endproperty
		
		private mErrorDetails			,string
		
		public property ErrorDetails	,string
			method get
			proc
				mreturn mErrorDetails
			endmethod
			method set
			proc
				mErrorDetails = value
				RaisePropertyChanged("ErrorDetails")
			endmethod
		endproperty	
.endregion

.region "Dialog Control Detail"

		protected readwrite property CurrentDialogResult	,@DialogResult
		
		private method configureDialog	,void
			sender						,@FrameworkElement
			endparams
		proc
			mDialogVM = new DialogControlViewModel(sender)
			mDialogVM.Title = "SFE Project"
			mDialogVM.Icon = DialogIcon.Exclamation
			mDialogVM.Style = DialogStyle.OK
			
			lambda doCloseDialog(result)
			begin
				CurrentDialogResult = result
				this.StateCompleted()
			end
			addhandler(mDialogVM.DialogProcessed, doCloseDialog)
			
		endmethod
		
		private  mDialogVM, @Symphony.Conductor.ViewModel.DialogControlViewModel
		public property DialogVM, @Symphony.Conductor.ViewModel.DialogControlViewModel
			method get
			proc
				mreturn mDialogVM
			endmethod
			method set
			proc
				mDialogVM = value
				RaisePropertyChanged("DialogVM")
			endmethod
		endproperty
		
		
.endregion
	endclass
	
endnamespace
