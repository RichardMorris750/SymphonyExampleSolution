;;**********************************************************************
;;
;; Title:       BuyerMaintentanceViewModel.dbc
;;
;; Type:        Class
;;
;; Description: Buyer maintenance
;;
;; Author:      Allan Shikhvarg, Synergex PSG Consultant
;;
;; Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************


import System
import System.Collections.Generic
import System.Text
import System.Windows
import System.Linq
import SFE_Base.ViewModel

import AppData								;required for 'models'

import Symphony.Harmony
import Symphony.Conductor.Model
import Symphony.Conductor.ViewModel			;required for BaseViewModel, etc.
import Symphony.Conductor.Commands			;required for GenericCommand, etc.
import Symphony.Conductor.DataIO
import Symphony.Conductor.Types


namespace SFE_Buyer.ViewModel

	public class BuyerMaintenanceViewModel extends FileMaintViewModel

;;=============================================================================
.region "Private Variables"
		private static mBuyer			,@Buyer_Data		,new Buyer_Data()
		private static mConnector		,@DBConnector

		private mKeyWord				,string
		private mIsNameEmpty			,boolean			,false

		private mClearCommand			,@GenericCommand
		private mSearchCommand			,@GenericCommand
		private mPrintCommand			,@GenericCommand
		private mPDFCommand				,@GenericCommand
		
.endregion

;;=============================================================================
.region 'Properties'

		public property KeyWord, string
			method get
			proc
				mreturn mKeyWord
			endmethod
			method set
			proc
				mKeyWord = value
				RaisePropertyChanged("KeyWord")

				if (mKeyWord != ^null)
					IsNameEmpty = true
			endmethod
		
		endproperty

;-------------------------------------------------------------------------------------------------
		public property IsNameEmpty, boolean
			method get
			proc
				mreturn mIsNameEmpty
			endmethod
			method set
			proc
				mIsNameEmpty = value
				RaisePropertyChanged("IsNameEmpty")
			endmethod

		endproperty
		
;-------------------------------------------------------------------------------------------------
		public property ClearCommand		,@GenericCommand
			method get
			proc

				if (mClearCommand == ^null)
				begin
					lambda doCommand(sender, param)
					begin
						mKeyWord = ^null
						IsNameEmpty = false

						LoadBaseItemCollection()
						RaisePropertyChanged(^null)
					end
					mClearCommand = new GenericCommand("CLEAR", doCommand)
				end

				mreturn mClearCommand
			endmethod

		endproperty

;-------------------------------------------------------------------------------------------------
		public property SearchCommand	,@GenericCommand
			method get
			proc
				if (mSearchCommand == ^null)
				begin
					lambda doCommand(sender, param)
					begin
						LoadBaseItemCollection()
					end
					mSearchCommand = new GenericCommand("SEARCH", doCommand)
				end

				mreturn mSearchCommand
			endmethod
		
		endproperty

;-------------------------------------------------------------------------------------------------
		public property PrintCommand	,@GenericCommand 
			method get
			proc
				if (mPrintCommand == ^null)
				begin
					lambda doCommand(sender, param)
					begin
						SFE_Buyer.BuyerReport.Print("R",mKeyWord)
					end
					mPrintCommand = new GenericCommand("PRINT", doCommand)
				end

				mreturn mPrintCommand
			endmethod
			
		endproperty

;-------------------------------------------------------------------------------------------------
		public property PDFCommand	,@GenericCommand
			method get
			proc
				if (mPDFCommand == ^null)
				begin
					lambda doCommand(Sender, param)
					begin
						SFE_Buyer.BuyerReport.Print("P", mKeyWord)
					end

					mPDFCommand = new GenericCommand("PDF", doCommand)	
				end

				mreturn mPDFCommand
			endmethod
			
		endproperty
		
		
.endregion

;;=============================================================================
.region 'Methods'

		public method BuyerMaintenanceViewModel
			sender	,@FrameworkElement
			endparams
			parent(sender, mBuyer.GetType(), new Buyer_FileIO(FileOpenMode.UpdateIndexed), "ShowErrorState","DialogViewState")

		proc
			this.ProgramModeChanged += doProgramModeChanged

			; standard load method to load the list
			DataObjectEntryItem = (DataObjectBase)new Buyer_Data()
			DataObjectEntryItem.IsDataModifiedChanged += DoIsDataModified

			this.LoadDetailList()

		endmethod

;;-------------------------------------------------------------------
		private method doProgramModeChanged	,void
			in req currentMode	,ProgramMode
			endparams

		proc
			using currentMode select
			(ProgramMode.Add),
			begin
				; this populates our hidden key so it will get validated
				if (!((Buyer_Data)DataObjectEntryItem).Buyer_key)
					((Buyer_Data)DataObjectEntryItem).Buyer_key	 = Guid.NewGuid().ToString()
				
				; set the displays to show todays date as Created and the 'default' image				
				((Buyer_Data)DataObjectEntryItem).DateCreated = ^null				
				((Buyer_Data)DataObjectEntryItem).BuyerImage  = ^null
			end
			endusing

		endmethod
			
;;------------------------------------------------------------------

;.define FileObjects

.ifdef FileObjects
		public override method LoadBaseItemCollection, void
.else
		public async override method LoadBaseItemCollection, void
.endc
			endparams

		proc
			SelectedCollectionItem  = ^null
			
			;;clear the list down
			this.DataObjectCollection.ClearCollection()

.ifdef FileObjects	
			data item = new Buyer_Data()
			data BuyerIO = new Buyer_FileIO()
				
			data buyerStatus	,FileAccessResults	,BuyerIO.ReadFirstRecord(item)
			while (buyerStatus == FileAccessResults.Success)
			begin
				data add	,boolean, false
								
				if (!mKeyWord) then
					add = true
				else
				begin
					data kWord	,a30
					data kName	,a30

					kWord = mKeyWord
					upcase kWord

					kName = item.Name
					upcase kName
											
					if  (mKeyWord != ^null) && (instr(1,kName,atrim(kWord)))
						add=true
				end
										
				if (add)
				begin
					data tmpDO = new Buyer_Data(item.SynergyRecord)
					tmpDO.GlobalRFA = item.GlobalRFA
					this.DataObjectCollection.AddToCollection((DataObjectBase)tmpDO)	
			
					;;display top record of the list
					if (DataObjectCollection.Count == 1)
						SelectedCollectionItem = ((DataObjectBase)tmpDO)								
				end
				buyerStatus = BuyerIO.ReadNextRecord(item)
			end
.else
			mConnector = new DBConnector("SYMLOCAL:richard/morris!AppData.TableMapper.MapTableToFile")
			
			;;To enable case insensitive comparisons:
			mConnector.SetCaseSensitivity(false)

			data buyerObj	,@Buyer_Data	,new Buyer_Data()
			
			data dataSearch	,@DataSelect

			if (!mKeyWord) then
				dataSearch =  DataSelect.RunDataSelect(mConnector, "select * from buyer", new Buyer_Data()).Result
			else
				if (mKeyWord != ^null)
					dataSearch = DataSelect.RunDataSelect(mConnector, "select * from buyer where name like:1", new Buyer_Data(), mKeyWord).Result
				
			foreach buyerObj in dataSearch
			begin
				this.DataObjectCollection.AddToCollection(buyerObj)	

				;;display top record of the list
				if (DataObjectCollection.Count == 1)
					SelectedCollectionItem = buyerObj
			end

			if (DataObjectCollection.Count)
				DeleteCommand.ExecuteState = true
.endc
		endmethod



.endregion
	
	endclass

endnamespace
