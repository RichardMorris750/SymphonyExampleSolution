;;**********************************************************************
;;
;; Title:       PurchaseOrderViewModel.dbc
;;
;; Type:        Class
;;
;; Description: Purchase Order Entry
;;
;; Author:      Gordon Ireland
;;
;; Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
import System
import System.Collections.Generic
import System.Text
import SFE_Base.ViewModel
import SFE_UI.ViewModel
import System.Windows
import AppData
import Symphony.Conductor.DataIO
import Symphony.Conductor.ViewModel

import System.Collections.ObjectModel
import Symphony.Harmony

;;use the extension methods
import System.Linq
import Symphony.Conductor.Model
import Symphony.Conductor.Commands
import Symphony.Conductor.DataIO
import Symphony.Conductor.Types

import SFE_UI.ViewModel


namespace SFE_Orders.ViewModel

	public class PurchaseOrderViewModel extends FileMaintViewModel

		private static mOrder_Header	,@Order_Header_Data		,new Order_Header_Data()
		private static mOrder_Line		,@Order_Line_Data		,new Order_Line_Data()

		public method PurchaseOrderViewModel
		sender		,@FrameworkElement
		endparams
			parent(sender, mOrder_Header.GetType(), new Order_Header_FileIO(FileOpenMode.UpdateIndexed), "ShowErrorState",mOrder_Line.GetType(), "DialogViewState")
		proc
			this.ProgramModeChanged += doProgramModeChanged
			this.ProgramDetailModeChanged += doProgramDetailModeChanged

			;;we can use the stndard list loding method built into the base class or
			;;load the list ourselves
			DataObjectEntryItem = (DataObjectBase)new Order_Header_Data()
			DataObjectEntryItem.IsDataModifiedChanged += DoIsDataModified
			
			DataObjectDetailEntryItem = (DataObjectBase)new Order_Line_Data()
			DataObjectDetailEntryItem.IsDataModifiedChanged += DoIsDetailDataModified

			this.LoadDetailList()

			buildSupplierCodeLookup()

			buildProductCodeLookup()

			;;when we navigate viausl states we need to execute logic, so define an event handler
			;;that is called when we do navitate visual stated
			BeforeNavigateState += doBeforeNavigateState

		endmethod

		;--------------------------------------------------------------------------------------
		private method doProgramModeChanged,void
		in req currentMode		,ProgramMode
		endparams
		proc
			;;this event handler allows us to prevent the user from being able to change field
			;;that would break the data integrity - for example the key fields when in amend mode.

			IgnoreDataChanged = true

			DataObjectEntryItem.SetFieldReadOnlyStatus(true, "ORDER_NO")
			DataObjectEntryItem.SetFieldReadOnlyStatus(true, "LINE_COUNT")
			DataObjectEntryItem.SetFieldReadOnlyStatus(true, "TOT_QTY")
			DataObjectEntryItem.SetFieldReadOnlyStatus(true, "TOT_VALUE")
			DataObjectEntryItem.SetFieldReadOnlyStatus(true, "TOT_VAT")

			using currentMode select
			(ProgramMode.Modify),
			begin
				DataObjectEntryItem.SetFieldReadOnlyStatus(true, "SUPP_CODE")
			end
			(ProgramMode.Add)	,
			begin
				DataObjectEntryItem.SetFieldReadOnlyStatus(false, "SUPP_CODE")
				DataObjectEntryItem.SetFieldFocusFlag("ORDER_NO")
			end
			(ProgramMode.Enquiry),
			begin
				DataObjectEntryItem.SetFieldReadOnlyStatus(true, "SUPP_CODE")
			end
			endusing



			IgnoreDataChanged = false

		endmethod


		private method doProgramDetailModeChanged,void
		in req currentDetailMode		,ProgramMode
		endparams
		proc
			;;this event handler allows us to prevent the user from being able to change field
			;;that would break the data integrity - for example the key fields when in amend mode.

			IgnoreDetailDataChanged = true
			
			using currentDetailMode select
			(ProgramMode.Modify)		,
			begin

				DataObjectDetailEntryItem.SetFieldReadOnlyStatus(true, "PROD_CODE")
			end
			(ProgramMode.Add)			,
			begin
				DataObjectDetailEntryItem.SetFieldReadOnlyStatus(false, "PROD_CODE")
				DataObjectEntryItem.SetFieldFocusFlag("PROD_CODE")
			end
			(ProgramMode.Enquiry)		,
			begin
				DataObjectDetailEntryItem.SetFieldReadOnlyStatus(true, "PROD_CODE")
			end
			endusing

			DataObjectDetailEntryItem.SetFieldReadOnlyStatus(true, "PROD_DESCRIPTION")
			DataObjectDetailEntryItem.SetFieldReadOnlyStatus(true, "LINE_VALUE")

			IgnoreDetailDataChanged = false

		endmethod

;-----------------------------------------------------------------------------------
		private static mConnector		,@DBConnector

		public override method LoadBaseItemCollection,void
		endparams
		
		proc	
			mConnector = new DBConnector("SYMLOCAL:richard/morris!AppData.TableMapper.MapTableToFile")
			
			;;To enable case insensitive comparisons:
			mConnector.SetCaseSensitivity(false)

		data dataSearch						,@DataSelect

		data item = new Order_Header_Data()
;		data Order_HeaderIO = new Order_Header_FileIO()

		data whereString					,string

			if (mKeyValue) then
				whereString = "where order_no = :1"
			else
				if (mKeySupplier) then
					whereString = "where supp_code like " + mKeySupplier
				else
					whereString = ^null 

			;;clear the list down
			this.DataObjectCollection.ClearCollection()

		
			SaveDetailCommand.ExecuteState = false
			CancelDetailCommand.ExecuteState = false
			DeleteDetailCommand.ExecuteState = false
			NewDetailCommand.ExecuteState = false
			SaveCommand.ExecuteState = false
			CancelCommand.ExecuteState = false
			DeleteCommand.ExecuteState = false
			NewCommand.ExecuteState = true
			GridIsEnabled = false


		data foundRecs						,int		,false

			dataSearch = DataSelect.RunDataSelect(mConnector, "select * from Order_Header " + whereString , 
			&	new Order_header_Data()		,mKeyValue).Result
								
			foreach item in dataSearch
			begin
				foundRecs = true
				this.DataObjectCollection.AddToCollection(item)
			end


			if (foundRecs)
			begin
				DataObjectEntryItem.SetFieldEnabledStatus(true, "*ALL*")
				SaveDetailCommand.ExecuteState = false
				CancelDetailCommand.ExecuteState = false
				DeleteDetailCommand.ExecuteState = true
				NewDetailCommand.ExecuteState = true
				SaveCommand.ExecuteState = false
				CancelCommand.ExecuteState = false
				DeleteCommand.ExecuteState = true
				NewCommand.ExecuteState = true
				GridIsEnabled = true
				SelectedItemIndex=0
			end
		endmethod



;----------------------------------------------------------------------------------------------
	
		private	mKeyValue					,int
	
		public property KeyValue			,int
			method get
			proc
				mreturn mKeyValue
			endmethod
			method set
			proc
				mKeyValue = value
				RaisePropertyChanged("KeyValue")
			endmethod
		endproperty
	

		private	mKeySupplier			,string
	
		public property KeySupplier		,string
			method get
			proc
				mreturn mKeySupplier
			endmethod
			method set
			proc
				mKeySupplier = value
				RaisePropertyChanged("KeySupplier")
			endmethod
		endproperty
;------------------------------------------------------------------------------------------------------
	
		private mSearchCommand				,@GenericCommand
	
		public property SearchCommand		,@GenericCommand
			method get
			proc
			
				if (mSearchCommand == ^null)
				begin
					lambda doCommand(sender, param)
					begin
						LoadBaseItemCollection()
					end
					mSearchCommand = new GenericCommand("SEARCH", doCommand)
				end
			
				mreturn mSearchCommand
			endmethod
		endproperty
	
		private mClearCommand			,@GenericCommand	
			
		public property ClearCommand	,@GenericCommand
			method get
			proc

				if (mClearCommand == ^null)
				begin
					lambda doCommand(sender, param)
					begin
						mKeyValue=0
						mKeySupplier= ^null

						LoadBaseItemCollection()
						RaisePropertyChanged(^null)
					end
					mClearCommand = new GenericCommand("CLEAR", doCommand)
				end

				mreturn mClearCommand
			endmethod
		endproperty

	
		private mPrintCommand			,@GenericCommand
	
		public property PrintCommand	,@GenericCommand
			method get
			proc
			
				if (mPrintCommand == ^null)
				begin
					lambda doCommand(sender, param)
					begin
;;						SFE_Supplier.SupplierReport.Print("R",mKeyValue,mKeyWord)
						nop
					end
					mPrintCommand = new GenericCommand("PRINT", doCommand)
				end
			
				mreturn mPrintCommand
			endmethod
		endproperty
	
		private mPDFCommand				,@GenericCommand
	
		public property PDFCommand		,@GenericCommand
			method get
			proc
			
				if (mPDFCommand == ^null)
				begin
					lambda doCommand(sender, param)
					begin
;;						SFE_Supplier.SupplierReport.Print("P",mKeyValue,mKeyWord)
						nop
					end
					mPDFCommand = new GenericCommand("PDF", doCommand)
				end
			
				mreturn mPDFCommand
			endmethod
		endproperty

;---------------------------set key to order header record-----------------------------------------------------------
		public async override method SetKeyForNewRecord,void

		proc
		data parameterIO = new Parameter_fileIO(FileOpenMode.UpdateRelative)

		data paramObj		,@Parameter_Data		,new Parameter_Data()

			;;read the first record (record number 1).  We ignore any "not found" errors.
			parameterIO.ReadRecord(paramObj, 1)

			;;set values		
			paramObj.Last_order_no += 1

			;;update record #1
			if (parameterIO.UpdateRecord(paramObj) != FileAccessResults.Success) then
			begin
				ErrorInfo = "Synergy error : " + %string(parameterIO.LastSynergyError) + ' allocating next order no'
				MoveToState("ShowErrorState")
			end
			else
			begin
;				ErrorInfo = 'Your Purchase Order Number is ' +  string(paramObj.Last_order_no)
;				MoveToState("ShowErrorState")		; this is not an error, but uses the same display visual state
				nop
			end

			((Order_Header_Data)DataObjectEntryItem).Order_No = paramObj.Last_order_no

		endmethod
	
;---------------------------handle detail lines-----------------------------------------------------------------------
.region 'detail line handling'

		public async override method SaveDetailLines,void
		
		proc

		data orderLineList		,@AsyncObservableCollection<Order_line_Data>
		data orderLine			,@Order_Line_Data

			orderLineList = new AsyncObservableCollection<Order_Line_Data>()
			orderLineList.ClearCollection()	
			foreach orderLine in DataObjectDetailCollection
				orderLineList.AddToCollection(^as(orderLine, Order_Line_Data))
				
			((Order_Header_Data)DataObjectEntryItem).OrderLineList = orderLineList

			((Order_Header_Data)DataObjectEntryItem).SaveOrderLineList()

		endmethod


		
		public async override method AddDetailLines,void
		
		proc

		data orderLineList		,@AsyncObservableCollection<Order_line_Data>
		data orderLine			,@Order_Line_Data

			orderLineList = new AsyncObservableCollection<Order_Line_Data>()
			orderLineList.ClearCollection()	
			foreach orderLine in DataObjectDetailCollection
				orderLineList.AddToCollection(^as(orderLine, Order_Line_Data))
				
			((Order_Header_Data)DataObjectEntryItem).OrderLineList = orderLineList

			((Order_Header_Data)DataObjectEntryItem).AddOrderLineList()

		endmethod


		public async override method DeleteDetailLines,void
		proc

			((Order_Header_Data)DataObjectEntryItem).DeleteOrderLineList()

		endmethod



		public async override method LoadDetailLines,void

		proc

			SelectedDetailCollectionItem = (DataObjectBase)new Order_Line_Data()

		data	orderLineObj	,@Order_Line_Data		,new Order_Line_Data()
						
			this.DataObjectDetailCollection.ClearCollection()
										
			foreach orderLineObj in ((Order_Header_Data)DataObjectEntryItem).OrderLineList
			this.DataObjectDetailCollection.AddToCollection(orderLineObj)

			RaisePropertyChanged ("DataObjectDetailCollection")

		endmethod

		public async override method UpdateTotals,void
		in req Mode		,string		; program Mode - add, modify or delete

		proc

			using (Mode) select
			('Add')		,
			begin
				((Order_Header_Data)DataObjectEntryItem).line_Count += 1
				((Order_Header_Data)DataObjectEntryItem).Tot_Qty +=   ((Order_Line_Data)DataObjectDetailEntryItem).Qty
				((Order_Header_Data)DataObjectEntryItem).Tot_Value += ((Order_Line_Data)DataObjectDetailEntryItem).Line_Value
				((Order_Header_Data)DataObjectEntryItem).Tot_Vat +=   ((Order_Line_Data)DataObjectDetailEntryItem).Vat_Value
			end
			('Modify')	,
			begin
				((Order_Header_Data)DataObjectEntryItem).Tot_Qty -=   ((Order_Line_Data)SelectedDetailCollectionItem).Qty
				((Order_Header_Data)DataObjectEntryItem).Tot_Value -= ((Order_Line_Data)SelectedDetailCollectionItem).Line_Value
				((Order_Header_Data)DataObjectEntryItem).Tot_Vat -=   ((Order_Line_Data)SelectedDetailCollectionItem).Vat_Value
				((Order_Header_Data)DataObjectEntryItem).Tot_Qty +=   ((Order_Line_Data)DataObjectDetailEntryItem).Qty
				((Order_Header_Data)DataObjectEntryItem).Tot_Value += ((Order_Line_Data)DataObjectDetailEntryItem).Line_Value
				((Order_Header_Data)DataObjectEntryItem).Tot_Vat +=   ((Order_Line_Data)DataObjectDetailEntryItem).Vat_Value
			end
			('Delete')	,
			begin
				((Order_Header_Data)DataObjectEntryItem).line_Count -= 1
				((Order_Header_Data)DataObjectEntryItem).Tot_Qty -=   ((Order_Line_Data)DataObjectDetailEntryItem).Qty
				((Order_Header_Data)DataObjectEntryItem).Tot_Value -= ((Order_Line_Data)DataObjectDetailEntryItem).Line_Value
				((Order_Header_Data)DataObjectEntryItem).Tot_Vat -=   ((Order_Line_Data)DataObjectDetailEntryItem).Vat_Value
			end

			endusing

			RaisePropertyChanged ("Line_count")
			RaisePropertyChanged ("Tot_qty")
			RaisePropertyChanged ("Tot_value")
			RaisePropertyChanged ("Tot_vat")
		endmethod


.endregion

; lookups --------------------------------------------------------------------------------


.region "Visual State managment"
		
		private method doBeforeNavigateState,void
		eArgs		,@NavigateToStateEventArgs 
		endparams
		proc
			using eArgs.NewStateName select

			("SupplierCodeDrillState"),
			begin
				mSuppCodeLookupVM.LoadList()
			end

			("ProductCodeDrillState"),
			begin
				mProdCodeLookupVM.LoadList()
			end
			()		,
				nop
			endusing
		endmethod




.endregion

.region "Supplier Code lookup elements"
		
		private method buildSupplierCodeLookup,void
		endparams
		proc
			;;create the supplier code lookup view model
			mSuppCodeLookupVM = new SupplierCodeLookupViewModel()

			;;need event handlers for when they select/quit the lookup
			mSuppCodeLookupVM.ItemSelected += doSuppCodeItemSelected
			mSuppCodeLookupVM.CancelSearch += doSuppCodeItemCanceled
		endmethod


		private method doSuppCodeItemSelected,void
		sender		,@SelectedItemEventArgs 
		endparams
		proc
			;;we have a supplier item selected.  first, lets restore back the visual state
			StateCompleted()

			;;now let's set the data.  this will update the UI and cuase the supplier name to be loaded.
			((Order_header_Data)DataObjectEntryItem).supp_code = ((Supplier_Data)sender.ItemValue).Supp_Code

		endmethod

		private method doSuppCodeItemCanceled,void
		endparams
		proc
			;;they want to cancel from the search so just abort the lookup visual state
			StateAborted()
		endmethod

		private mSuppCodeLookupVM			,@SupplierCodeLookupViewModel

		public property SuppCodeLookupVM	,@SupplierCodeLookupViewModel
			method get
			proc
				mreturn mSuppCodeLookupVM
			endmethod
		endproperty
		

.endregion

.region "Product Code lookup elements"
		
		private method buildProductCodeLookup,void
		endparams
		proc
			;;create the product code lookup view model
			mProdCodeLookupVM = new ProductCodeLookupViewModel()

			;;need event handlers for when they select/quit the lookup
			mProdCodeLookupVM.ItemSelected += doProdCodeItemSelected
			mProdCodeLookupVM.CancelSearch += doProdCodeItemCanceled
		endmethod


		private method doProdCodeItemSelected,void
		sender		,@SelectedItemEventArgs 
		endparams
		proc
			;;we have a product item selected.  first, lets restore back the visual state
			StateCompleted()

			;;now let's set the data.  this will update the UI and cuase the supplier name to be loaded.
			((Order_Line_Data)DataObjectDetailEntryItem).prod_code = ((Product_Data)sender.ItemValue).Prod_Code

		endmethod

		private method doProdCodeItemCanceled,void
		endparams
		proc
			;;they want to cancel from the search so just abort the lookup visual state
			StateAborted()
		endmethod

		private mProdCodeLookupVM			,@ProductCodeLookupViewModel

		public property ProdCodeLookupVM	,@ProductCodeLookupViewModel
			method get
			proc
				mreturn mProdCodeLookupVM
			endmethod
		endproperty
		

.endregion




	endclass
endnamespace
