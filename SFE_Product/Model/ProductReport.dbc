import System
import System.Collections.Generic
import System.Text

import Symphony.Conductor.ViewModel
import System.Windows
import System.Collections.ObjectModel
import AppData
import Symphony.Harmony

;;use the extension methods
import System.Linq
import Symphony.Conductor.Model
import Symphony.Conductor.Commands
import Symphony.Conductor.DataIO
import Symphony.Conductor.Types

import SFEUtilities

namespace SFE_Product
	
	public class ProductReport
		
		private static mConnector		,@DBConnector
		
		public static method Print		, void
			in req ReportType	,a		;R = Print API, P = PDF
			in req KeyValue		,a		; Partial code
			in req KeyWord		,a		; description key word

			endparams
			
			.include 'DBLDIR:winprint.def'
			
			
			
		proc
			;;let's load the product using Symphony Harmony and a local connection
			
			mConnector = new DBConnector("SYMLOCAL:richard/morris!AppData.TableMapper.MapTableToFile")
			
			;;To enable case insensitive comparisons:
			mConnector.SetCaseSensitivity(false)
						
			SFEUtilities.SFEPrinting.PrinterOpen(ReportType,false,132,,,,,true,true)
			
			SFEUtilities.SFEPrinting.SetFont("Cambria",12)
			
			data productObj	,@Product_Data	,new Product_Data()
			
			data dataSearch	,@DataSelect
			
			data pline	,a132
			data lineCount,	i4	,99
			data lineMax	,i4	,60
			
		
			if (!KeyWord && !KeyValue)
			dataSearch = new DataSelect(mConnector, "select * from product", new Product_Data())
				
			if (!KeyWord && KeyValue)
				dataSearch = new DataSelect(mConnector, "select * from product where prod_code like:1", new Product_Data(), KeyValue)

			if (!KeyValue && KeyWord)
				dataSearch = new DataSelect(mConnector, "select * from product where prod_description like:1", new Product_Data(), KeyWord)

			if (KeyValue && KeyWord)
				dataSearch = new DataSelect(mConnector, "select * from product where prod_code like:1 and prod_description like:2", new Product_Data(), KeyValue,KeyWord)

			foreach productObj in dataSearch
			begin
				if lineCount .ge. lineMax
				begin
					if lineCount .ne.99
						SFEUtilities.SFEPrinting.FormFeed()
					
					SFEUtilities.SFEPrinting.SetFont("Cambria",12)
					SFEUtilities.SFEPrinting.Write(1,1,"Product Listing")
					SFEUtilities.SFEPrinting.Write(3,1,"Code")
					SFEUtilities.SFEPrinting.Write(3,10,"Description")
					SFEUtilities.SFEPrinting.Write(3,42,"Supplier")
					SFEUtilities.SFEPrinting.Write(3,70,"Group")
					SFEUtilities.SFEPrinting.Write(3,95,"Price")
					SFEUtilities.SFEPrinting.Write(3,105,"Cost")
					lineCount = 4					
					SFEUtilities.SFEPrinting.SetFont("Calibri",10)
				end
				
				
				incr lineCount
				SFEUtilities.SFEPrinting.SetFont("Calibri",10)
				SFEUtilities.SFEPrinting.Write(lineCount,1,productObj.prod_code)
				SFEUtilities.SFEPrinting.Write(lineCount,10,productObj.prod_description)
				SFEUtilities.SFEPrinting.Write(lineCount,42,productObj.supp_code)
				SFEUtilities.SFEPrinting.Write(lineCount,50,productObj.SupplierName)
				SFEUtilities.SFEPrinting.Write(lineCount,70,productObj.GroupName)
				SFEUtilities.SFEPrinting.SetFont("Consolas",10)
				SFEUtilities.SFEPrinting.Write(lineCount,95,string(productObj.Sell_price,'ZZZX.XX'))
				SFEUtilities.SFEPrinting.Write(lineCount,105,string(productObj.Cost_price,'ZZZX.XX'))
			end
			
			SFEUtilities.SFEPrinting.PrinterClose()
			
			mreturn
			
		endmethod
		
	endclass
endnamespace
