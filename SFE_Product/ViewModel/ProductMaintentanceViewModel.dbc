;;**********************************************************************
;;
;; Title:       ProductMaintentanceViewModel.dbc
;;
;; Type:        Class
;;
;; Description: Supplier maintenance
;;
;; Author:      Richard C. Morris, Synergex Technology Evangelist
;;
;; Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
import System
import System.Collections.Generic
import System.Text
import SFE_Base.ViewModel
import System.Windows
import AppData
import Symphony.Conductor.DataIO
import Symphony.Conductor.ViewModel

import System.Collections.ObjectModel
import Symphony.Harmony

;;use the extension methods
import System.Linq
import Symphony.Conductor.Model
import Symphony.Conductor.Commands
import Symphony.Conductor.DataIO
import Symphony.Conductor.Types

namespace SFE_Product.ViewModel

	public class ProductMaintentanceViewModel extends FileMaintViewModel

		private static mProduct	,@Product_Data	,new Product_Data()

		public method ProductMaintentanceViewModel
			sender									,@FrameworkElement
			endparams
			parent(sender, mProduct.GetType(), new Product_FileIO(FileOpenMode.UpdateIndexed), "ShowErrorState")
		proc
			this.ProgramModeChanged += doProgramModeChanged


			;;we can use the stndard list loading method built into the base class or
			;;load the list ourselves
			this.LoadDetailList()



.ifdef customLoad
			;;let's load the products using Symphony Harmony and a local connection			
			mConnector = new DBConnector("SYMLOCAL:richard/morris!AppData.TableMapper.MapTableToFile")
			
			loadAllProducts()
.endc
		endmethod

		private method doProgramModeChanged	,void
			in req currentMode				,ProgramMode
			endparams
		proc
			;;this event handler allows us to prevent the user from being able to change field
			;;that would break the data integrity - for example the key fields when in amend mode.

			using currentMode select
			(ProgramMode.Modify),
			begin
				DataObjectEntryItem.SetFieldReadOnlyStatus(true, "PROD_CODE")
			end
			(ProgramMode.Add),
			begin
				DataObjectEntryItem.SetFieldReadOnlyStatus(false, "PROD_CODE")
			end
			(ProgramMode.Enquiry),
			begin
				DataObjectEntryItem.SetFieldReadOnlyStatus(true, "PROD_CODE")
			end
			endusing
		endmethod
	
	.ifdef customLoad		
		private method loadAllProducts, void
			endparams
		proc
				
			try
			begin
;				if (mProductList == ^null)
;				begin
;					mProductList = new AsyncObservableCollection<Product_Data>()
;				end

				if (mDataObjectCollection == ^null)
					mDataObjectCollection = new AsyncObservableCollection<Product_Data>()
					
				;;the list is instanced so we need to load each item individually
				mDataObjectCollection.ClearCollection()
				data item	,@DataObjectBase
				foreach item in new DataSelect(mConnector, "select * from product", new Product_Data())
				begin
;;					item.SupplierName = 'supplier name...'
	;;				item.GroupName = 'Group Name.....'
					mDataObjectCollection.AddToCollection(^as(item,Product_Data))
;;					mProductList.AddToCollection(^as(item, Product_Data))
				end

			end
			catch (e, @Exception)
			begin
				;;oops
			end
			endtry
				
		endmethod
		

		.endc

		mProductImageName, string

		public property ProductImageName, string

				method get
				proc
				data logName , a100
				data flag, i4
				getlog ('SFEImages',logname,flag)
				mProductImageName = atrim(logName) + 'COK001' + 'jpg'
				mreturn mProductImageName

				endmethod
				method set
				proc
					mProductImageName = value
					RaisePropertyChanged("ProductImageName")
				endmethod
			endproperty


	endclass

endnamespace
