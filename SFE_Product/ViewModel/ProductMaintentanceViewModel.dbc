;;**********************************************************************
;;
;; Title:       ProductMaintentanceViewModel.dbc
;;
;; Type:        Class
;;
;; Description: Supplier maintenance
;;
;; Author:      Richard C. Morris, Synergex Technology Evangelist
;;
;; Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
import System
import System.Collections.Generic
import System.Text
import SFE_Base.ViewModel
import System.Windows
import AppData
import Symphony.Conductor.DataIO
import Symphony.Conductor.ViewModel

import System.Collections.ObjectModel
import Symphony.Harmony

;;use the extension methods
import System.Linq
import Symphony.Conductor.Model
import Symphony.Conductor.Commands
import Symphony.Conductor.DataIO
import Symphony.Conductor.Types

namespace SFE_Product.ViewModel

	public class ProductMaintentanceViewModel extends FileMaintViewModel

		private static mProduct	,@Product_Data	,new Product_Data()

		public method ProductMaintentanceViewModel
			sender									,@FrameworkElement
			endparams
			parent(sender, mProduct.GetType(), new Product_FileIO(FileOpenMode.UpdateIndexed), "ShowErrorState")
		proc
			this.ProgramModeChanged += doProgramModeChanged

;			;;we can use the stndard list loading method built into the base class or
;			;;load the list ourselves
			this.LoadDetailList()

		endmethod
		
		public override method LoadBaseItemCollection, void
			endparams
		proc

			;;let's load the products using Symphony Harmony and a local connection			

			data item, @Product_Data  ,new Product_Data()
			data productIO = new Product_FileIO(FileOpenMode.InputIndexed)


			data productStatus	,FileAccessResults	,productIO.ReadFirstRecord(item)
			while (productStatus == FileAccessResults.Success)
			begin
				data add	,i4, false

				if !mKeyValue && !mKeyWord
					add = true

				if  (mKeyValue != ^null) &&  (atrim(mKeyValue) == item.Prod_code)
					add=true

				if  (mKeyWord != ^null) &&  (instr(1,item.Prod_description,atrim(mKeyWord)))
					add=true

				if (add)
					this.DataObjectCollection.AddToCollection(item)				
				productStatus = productIO.ReadNextRecord(item)
			end


		endmethod


		private method doProgramModeChanged	,void
			in req currentMode				,ProgramMode
			endparams
		proc
			;;this event handler allows us to prevent the user from being able to change field
			;;that would break the data integrity - for example the key fields when in amend mode.

			using currentMode select
			(ProgramMode.Modify),
			begin
				DataObjectEntryItem.SetFieldReadOnlyStatus(true, "PROD_CODE")
			end
			(ProgramMode.Add),
			begin
				DataObjectEntryItem.SetFieldReadOnlyStatus(false, "PROD_CODE")
			end
			(ProgramMode.Enquiry),
			begin
				DataObjectEntryItem.SetFieldReadOnlyStatus(true, "PROD_CODE")
			end
			endusing
		endmethod
	
		private mKeyWord	,string
		
		public property KeyWord, string
			method get
			proc
				mreturn mKeyWord
			endmethod
			method set
			proc
				mKeyWord = value
				RaisePropertyChanged("KeyWord")
			endmethod
			
		endproperty
		
		
		private	mKeyValue	,string	
		
		public property KeyValue, string
			method get
			proc
				mreturn mKeyValue
			endmethod
			method set
			proc
				mKeyValue = value
				RaisePropertyChanged("KeyValue")
			endmethod
		endproperty


		
		private mSearchCommand	,@GenericCommand
		
		public property SearchCommand, @GenericCommand
			method get
			proc

				this.DataObjectCollection.ClearCollection()
				LoadBaseItemCollection()

				mreturn mSearchCommand
			endmethod
		endproperty
		


	endclass

endnamespace
