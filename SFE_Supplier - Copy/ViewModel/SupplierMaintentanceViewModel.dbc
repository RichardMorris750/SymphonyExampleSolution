;;**********************************************************************
;;
;; Title:       SupplierMaintentanceViewModel.dbc
;;
;; Type:        Class
;;
;; Description: Supplier maintenance
;;
;; Author:      Richard C. Morris, Synergex Technology Evangelist
;;
;; Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
import System
import System.Collections.Generic
import System.Text
import SFE_Base.ViewModel
import System.Windows
import AppData
import Symphony.Conductor.DataIO
import Symphony.Conductor.ViewModel

;;use the extension methods
import System.Linq
import Symphony.Conductor.Model
import Symphony.Conductor.Commands
import Symphony.Conductor.DataIO
import Symphony.Conductor.Types

namespace SFE_Supplier.ViewModel

	public class SupplierMaintentanceViewModel extends FileMaintViewModel

		private static mSupplier	,@Supplier_Data	,new Supplier_Data()

		public method SupplierMaintentanceViewModel
			sender									,@FrameworkElement
			endparams
			parent(sender, mSupplier.GetType(), new Supplier_FileIO(FileOpenMode.UpdateIndexed), "ShowErrorState")
		proc
			this.ProgramModeChanged += doProgramModeChanged

			;;we can use the stndard list loding method built into the base class or
			;;load the list ourselves
			DataObjectEntryItem = (DataObjectBase)new Supplier_Data()
			DataObjectEntryItem.IsDataModifiedChanged += DoIsDataModified
			
			this.LoadDetailList()
		endmethod

		;--------------------------------------------------------------------------------------
		private method doProgramModeChanged	,void
			in req currentMode				,ProgramMode
			endparams
		proc
			;;this event handler allows us to prevent the user from being able to change field
			;;that would break the data integrity - for example the key fields when in amend mode.

			using currentMode select
			(ProgramMode.Modify),
			begin
				DataObjectEntryItem.SetFieldReadOnlyStatus(true, "SUPP_CODE")
			end
			(ProgramMode.Add),
			begin
				DataObjectEntryItem.SetFieldReadOnlyStatus(false, "SUPP_CODE")
			end
			(ProgramMode.Enquiry),
			begin
				DataObjectEntryItem.SetFieldReadOnlyStatus(true, "SUPP_CODE")
			end
			endusing
		endmethod


;-----------------------------------------------------------------------------------
		public override method LoadBaseItemCollection, void
			endparams
		
		proc	

			data item = new Supplier_Data()
			data supplierIO = new Supplier_FileIO()
		
			;;clear the list down
			this.DataObjectCollection.ClearCollection()
		
			data supplierStatus	,FileAccessResults	,supplierIO.ReadFirstRecord(item)
			while (supplierStatus == FileAccessResults.Success)
			begin
				data add	,boolean, false
				data kWord	,a50
				data Desc	,a50
				kWord = mKeyWord
				upcase kWord
				Desc = item.Name
				upcase desc
			
				if !mKeyValue && !mKeyWord
					add = true
				
				if  (mKeyValue != ^null && !mKeyWord ) &&  (atrim(mKeyValue) == item.supp_code)
					add=true
				
				if  (mKeyWord != ^null && !mKeyValue) && (instr(1,desc,atrim(kWord)))
					add=true
				
				if  (mKeyWord != ^null && mKeyValue != ^null) && (instr(1,Desc,atrim(kWord)))  &&  (atrim(mKeyValue) == item.Supp_code)
					add=true
				
				if (add)
				begin
					data tmpDO = new Supplier_Data(item.SynergyRecord)
					tmpDO.GlobalRFA = item.GlobalRFA
					this.DataObjectCollection.AddToCollection((DataObjectBase)tmpDO)									
				end
				supplierStatus = supplierIO.ReadNextRecord(item)
			end
		
		endmethod



;----------------------------------------------------------------------------------------------
		private mKeyWord	,string
	
		public property KeyWord, string
			method get
			proc
				mreturn mKeyWord
			endmethod
			method set
			proc
				mKeyWord = value
				RaisePropertyChanged("KeyWord")
			endmethod
		
		endproperty
	
	
		private	mKeyValue	,string	
	
		public property KeyValue, string
			method get
			proc
				mreturn mKeyValue
			endmethod
			method set
			proc
				mKeyValue = value
				RaisePropertyChanged("KeyValue")
			endmethod
		endproperty
	
;------------------------------------------------------------------------------------------------------
	
		private mSearchCommand	,@GenericCommand
	
		public property SearchCommand, @GenericCommand
			method get
			proc
			
				if (mSearchCommand == ^null)
				begin
					lambda doCommand(sender, param)
					begin
						LoadBaseItemCollection()
					end
					mSearchCommand = new GenericCommand("SEARCH", doCommand)
				end
			
				mreturn mSearchCommand
			endmethod
		endproperty
	
	
		private mPrintCommand	,@GenericCommand
	
		public property PrintCommand, @GenericCommand
			method get
			proc
			
				if (mPrintCommand == ^null)
				begin
					lambda doCommand(sender, param)
					begin
						SFE_Supplier.SupplierReport.Print("R",mKeyValue,mKeyWord)
					end
					mPrintCommand = new GenericCommand("PRINT", doCommand)
				end
			
				mreturn mPrintCommand
			endmethod
		endproperty
	
		private mPDFCommand	,@GenericCommand
	
		public property PDFCommand, @GenericCommand
			method get
			proc
			
				if (mPDFCommand == ^null)
				begin
					lambda doCommand(sender, param)
					begin
						SFE_Supplier.SupplierReport.Print("P",mKeyValue,mKeyWord)
					end
					mPDFCommand = new GenericCommand("PDF", doCommand)
				end
			
				mreturn mPDFCommand
			endmethod
		endproperty
	
	endclass
endnamespace
