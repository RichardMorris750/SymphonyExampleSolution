<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:clr="clr-namespace:System;assembly=mscorlib"
    xmlns:symphonyControls="clr-namespace:Symphony.Conductor.Controls;assembly=SymphonyConductor"
    xmlns:SymVM="clr-namespace:Symphony.Conductor.ViewModel;assembly=SymphonyConductor">
    
    <!--standard values/literals -->

    <GridLength x:Key="StandardInputGridHeight">30</GridLength>
    <clr:Double x:Key="StandardFontSize">14</clr:Double>
    <clr:Double x:Key="StandardDataGridHeight">25</clr:Double>

    <!-- standard colors -->

 
    <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
    <Color x:Key="BorderMediumColor">#FF888888</Color>
    <Color x:Key="BorderDarkColor">#FF444444</Color>

    
    
    <Color x:Key="ControlLightColor">White</Color>
    <Color x:Key="ControlMediumColor">#FF7381F9</Color>
    <Color x:Key="ControlDarkColor">#FF211AA9</Color>


    <Color x:Key="GlyphColor">#F0F0F0</Color>


    <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

    <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
    <Color x:Key="ControlPressedColor">#FF211AA9</Color>

    <Color x:Key="PressedBorderLightColor">#FF888888</Color>
    <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

    <Color x:Key="NavyColour">#333a56</Color>
    <Color x:Key="BlackColour">#000000</Color>
    <Color x:Key="BlueColour" >#0070DF</Color>
    <Color x:Key="BrightBlueColour" >#42A0FF</Color>
    <Color x:Key="WhiteColour">#F1F1F1</Color>
    <Color x:Key="OrangeColour">#F0F0F0</Color>
    <Color x:Key="SilverColour">#9BADB3</Color>
    <Color x:Key="LemonColour">#F7FBAD</Color>

    <SolidColorBrush x:Key="TitleColorBrush" Color="{StaticResource LemonColour}"></SolidColorBrush>


    <SolidColorBrush x:Key="BackgroundPrimaryBrush" Color="{StaticResource BlackColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="BackgroundSecondaryBrush" Color="{StaticResource BlackColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="GridHeaderBackgroundBrush" Color="{StaticResource BlackColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="GridHeaderForegroundBrush" Color="{StaticResource BlueColour}"></SolidColorBrush>

    <SolidColorBrush x:Key="GridHeaderBorderBrush" Color="{StaticResource BlueColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="GridItemBackgroundBrush" Color="{StaticResource BlackColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="GridItemForegroundBrush" Color="{StaticResource OrangeColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="GridItemDisabledForegroundBrush" Color="{StaticResource WhiteColour}"></SolidColorBrush>

    <SolidColorBrush x:Key="TabItemForegroundBrush" Color="{StaticResource BlueColour}"></SolidColorBrush>

    <SolidColorBrush x:Key="LabelColorBrush" Color="{StaticResource SilverColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="InputBackgroundBrush" Color="{StaticResource WhiteColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="InputForegroundBrush" Color="{StaticResource WhiteColour}"></SolidColorBrush>

    <SolidColorBrush x:Key="InputInErrorForegroundBrush" Color="Red"></SolidColorBrush>
    
 
    <SolidColorBrush x:Key="StatusBarItemBackgroundBrush" Color="Transparent"></SolidColorBrush>
    <SolidColorBrush x:Key="StatusBarItemForegroundBrush" Color="{StaticResource OrangeColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="BorderBrush" Color="{StaticResource BlueColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="MenuItemBrush" Color="{StaticResource LemonColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="MenuItemTextBrush" Color="{StaticResource LemonColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="ButtonBackgroundBrush" Color="{StaticResource BlackColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="ButtonActiveBackgroundBrush" Color="{StaticResource OrangeColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="ButtonTextBrush" Color="{StaticResource LemonColour}"></SolidColorBrush>
    <SolidColorBrush x:Key="ButtonDisabledTextBrush" Color="{StaticResource BlackColour}"></SolidColorBrush>

    <SolidColorBrush x:Key="CaretBrush" Color="{StaticResource OrangeColour}"></SolidColorBrush>

    <Style TargetType="{x:Type Window}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="1,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Offset="0.0" Color="{StaticResource BlackColour}" />
                        <GradientStop Offset="1.0" Color="{StaticResource BlackColour}" />
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="80"></Setter>
        <Setter Property="Width" Value="100"></Setter>
        <Setter Property="Foreground" Value="{StaticResource MenuItemTextBrush}"></Setter>
        <Style.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="True">
                <Setter Property="Button.RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="1.1" ScaleY="1.1" CenterX="10" CenterY="10"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="StandardButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="6,4,6,4"></Setter>
        <Setter Property="Foreground" Value="{StaticResource ButtonTextBrush}"></Setter>
        <Setter Property="FontSize" Value="16"></Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <!--Setter Property="Foreground" Value="{StaticResource ButtonDisabledTextBrush}"></-->
                <Setter Property="Visibility" Value="Collapsed"></Setter>
            </Trigger>
            <Trigger Property="Button.IsMouseOver" Value="True">
                <Setter Property="Button.RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="1.1" ScaleY="1.1" CenterX="10" CenterY="10"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TransperentButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Label}">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource LabelColorBrush}"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource InputForegroundBrush}"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="CaretBrush" Value="{StaticResource CaretBrush}"></Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{StaticResource LabelColorBrush}"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
    </Style>


    <Style TargetType="{x:Type Grid}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="1,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Offset="0.0" Color="{StaticResource BlackColour}" />
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>
    
    

    <Style x:Key="StandardBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
    </Style>



    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="GridLinesVisibility" Value="None"></Setter>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="1,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Offset="0.0" Color="{StaticResource BlackColour}" />
                        <GradientStop Offset="1.0" Color="{StaticResource BlackColour}" />

                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="DCImgTriggers">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Icon}" Value="{x:Static SymVM:DialogIcon.Error}">
                <Setter Property="Image.Source" Value="pack://application:,,,/SymphonyCrescendo;component/Images/Dialog/error_mark.png"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Icon}" Value="{x:Static SymVM:DialogIcon.Question}">
                <Setter Property="Image.Source" Value="pack://application:,,,/SymphonyCrescendo;component/Images/Dialog/question_mark.jpg"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Icon}" Value="{x:Static SymVM:DialogIcon.Exclamation}">
                <Setter Property="Image.Source" Value="pack://application:,,,/SymphonyCrescendo;component/Images/Dialog/exclamation_mark.png"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Icon}" Value="{x:Static SymVM:DialogIcon.Stop}">
                <Setter Property="Image.Source" Value="pack://application:,,,/SymphonyCrescendo;component/Images/Dialog/stop_mark.jpg"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Icon}" Value="{x:Static SymVM:DialogIcon.Warning}">
                <Setter Property="Image.Source" Value="pack://application:,,,/SymphonyCrescendo;component/Images/Dialog/warning_mark.png"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>






    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="{StaticResource GridItemBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource GridItemForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="{StaticResource GridItemBackgroundBrush}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Foreground" Value="{StaticResource GridItemForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource GridItemDisabledForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{StaticResource GridHeaderBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource GridHeaderForegroundBrush}" />
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Left" />
    </Style>

    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  CornerRadius="0"
                  Background="Transparent"
                  BorderBrush="{StaticResource LabelColorBrush}"
                  BorderThickness="1" />
            <Border 
                  Grid.Column="0"
                  CornerRadius="0" 
                  Margin="1" 
                  Background="Transparent" 
                  BorderBrush="{StaticResource LabelColorBrush}"
                  BorderThickness="0,0,1,0" />
            <Path 
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="{StaticResource LabelColorBrush}"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Foreground" Value="{StaticResource InputForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="3,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Background="Transparent"
                            Foreground="{StaticResource InputForegroundBrush}"
                            BorderBrush="{StaticResource InputForegroundBrush}"
                                 Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">

                            <Grid Name="DropDown"
                              SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                x:Name="DropDownBorder"
                                Background="Transparent"

                                BorderThickness="1"
                                BorderBrush="#888888"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource InputForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="{StaticResource InputForegroundBrush}"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                              Padding="2"
                              SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource BorderBrush}"/>
                            <Setter Property="Foreground" Value="{StaticResource InputBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource InputForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CellRightAlign">
        <Setter Property="Control.HorizontalAlignment"
            Value="Right" />
    </Style>


    <Style x:Key="{x:Type CheckBox}"
         TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels"
            Value="true" />
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="FocusVisualStyle"
            Value="{DynamicResource CheckBoxFocusVisual}" />

        <Setter Property="CheckBox.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
														Width="16"
														Height="16"
														CornerRadius="0"
														BorderThickness="1">
                                <Border.BorderBrush>
                                    <LinearGradientBrush StartPoint="0,0"
																EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="{DynamicResource BorderLightColor}"
																					  Offset="0.0" />
                                                <GradientStop Color="{DynamicResource BorderLightColor}"
																					  Offset="1.0" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.BorderBrush>
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0"
																				 EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="{DynamicResource ControlLightColor}" />
                                                <GradientStop Color="{DynamicResource ControlMediumColor}"
																					  Offset="1.0" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>

                                </Border.Background>
                                <Grid>
                                    <Path Visibility="Collapsed"
																  Width="10"
																  Height="10"
																  x:Name="CheckMark"
																  SnapsToDevicePixels="False"
																  StrokeThickness="2"
																  Data="F1 M 0.468732,4.66838L 3.03345,7.95443L 7.28127,0.420569">
                                        <Path.Stroke>
                                            <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                                        </Path.Stroke>
                                    </Path>
                                    <Path Visibility="Collapsed"
																  Width="10"
																  Height="10"
																  x:Name="InderminateMark"
																  SnapsToDevicePixels="False"
																  StrokeThickness="2"
																  Data="F1 M 0.468732,4.66838L 3.03345,7.95443L 7.28127,0.420569">
                                        <Path.Stroke>
                                            <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                                        </Path.Stroke>
                                    </Path>
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
																							  Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
																						 Value="{StaticResource ControlMouseOverColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
																							  Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
																						 Value="{StaticResource ControlPressedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
																							  Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
																						 Value="{StaticResource PressedBorderDarkColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
																							  Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
																						 Value="{StaticResource PressedBorderLightColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
																							   Storyboard.TargetName="CheckMark">
                                            <DiscreteObjectKeyFrame KeyTime="0"
																							Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
																							   Storyboard.TargetName="InderminateMark">
                                            <DiscreteObjectKeyFrame KeyTime="0"
																							Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter Margin="4,0,0,0"
																  VerticalAlignment="Center"
																  HorizontalAlignment="Left"
																  RecognizesAccessKey="True" />
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

 

</ResourceDictionary>