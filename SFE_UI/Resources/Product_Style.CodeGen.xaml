<!--
 WARNING: This code was generated by CodeGen. Any changes that you
          make to this code will be overwritten if the code is regenerated!

 Template author:	Richard C. Morris, Synergex Technology Evangelist

 Template Name:	Symphony Framework : SYMPHONY_STYLE_V3_2.tpl

-->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:clr="clr-namespace:System;assembly=mscorlib"
    xmlns:symphonyConverters="clr-namespace:Symphony.Conductor.Converters;assembly=SymphonyConductor"
    xmlns:symphonyTriggers="clr-namespace:Symphony.Conductor.Triggers;assembly=SymphonyConductor"
    xmlns:symphonyUI="clr-namespace:Symphony.Crescendo.Presentation;assembly=SymphonyCrescendo"
    xmlns:symphonyControls="clr-namespace:Symphony.Conductor.Controls;assembly=SymphonyConductor"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity">

    <ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="pack://application:,,,/SFE_UI;component/Resources/AppStyling.xaml"/>
		<ResourceDictionary Source="pack://application:,,,/SymphonyConductor;component/Resources/Styles.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SymphonyConductor;component/Resources/Converters.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SFE_UI;component/Resources/Product_Content.CodeGen.xaml"/>
     </ResourceDictionary.MergedDictionaries>


	<clr:String x:Key="Product_Prod_code_heading">Product Code</clr:String>


	<Style x:Key="Product_Prod_code_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Product Code"
						IsEnabled="{Binding Path=Prod_codeIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Product_Prod_code_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
						
						CaretBrush="{StaticResource CaretBrush}"
                        Name="ctlProduct_Prod_code"
                        Text="{Binding Path=Prod_code, Converter={StaticResource alphaConverter}, UpdateSourceTrigger=Default,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="6"
						Width="72"
						CharacterCasing="Upper"
                        IsEnabled="{Binding Path=Prod_codeIsEnabled}"
						IsReadOnly="{Binding Path=Prod_codeIsReadOnly}"
						VerticalAlignment="Center"
						HorizontalAlignment="Left"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
						            <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Prod_codeIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Prod_code}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="Gray" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
										<Setter Property="TextBox.Background" Value="Transparent"/>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Product_Prod_description_heading">Description</clr:String>


	<Style x:Key="Product_Prod_description_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Description"
						IsEnabled="{Binding Path=Prod_descriptionIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Product_Prod_description_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
						
						CaretBrush="{StaticResource CaretBrush}"
                        Name="ctlProduct_Prod_description"
                        Text="{Binding Path=Prod_description, Converter={StaticResource alphaConverter}, UpdateSourceTrigger=Default,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="40"
						Width="480"
                        IsEnabled="{Binding Path=Prod_descriptionIsEnabled}"
						IsReadOnly="{Binding Path=Prod_descriptionIsReadOnly}"
						VerticalAlignment="Center"
						HorizontalAlignment="Left"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
						            <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Prod_descriptionIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Prod_description}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="Gray" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
										<Setter Property="TextBox.Background" Value="Transparent"/>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Product_Supp_code_heading">Supplier</clr:String>


	<Style x:Key="Product_Supp_code_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Supplier"
						IsEnabled="{Binding Path=Supp_codeIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Product_Supp_code_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
						
						CaretBrush="{StaticResource CaretBrush}"
                        Name="ctlProduct_Supp_code"
                        Text="{Binding Path=Supp_code, Converter={StaticResource alphaConverter}, UpdateSourceTrigger=Default,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="6"
						Width="72"
						CharacterCasing="Upper"
                        IsEnabled="{Binding Path=Supp_codeIsEnabled}"
						IsReadOnly="{Binding Path=Supp_codeIsReadOnly}"
						VerticalAlignment="Center"
						HorizontalAlignment="Left"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
						            <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Supp_codeIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Supp_code}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="Gray" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
										<Setter Property="TextBox.Background" Value="Transparent"/>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Product_Cost_price_heading">Cost Price</clr:String>


	<Style x:Key="Product_Cost_price_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Cost Price"
						IsEnabled="{Binding Path=Cost_priceIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Product_Cost_price_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SynergyDecimalBox
						
						CaretBrush="{StaticResource CaretBrush}"
						HorizontalAlignment="Left"
						VerticalAlignment="Center"
                        Name="ctlProduct_Cost_price"
                        Text="{Binding Path=Cost_price, Converter={StaticResource impliedDecimalConverter}  ,StringFormat=#0.00
								, UpdateSourceTrigger=Default
                                , ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        IsEnabled="{Binding Path=Cost_priceIsEnabled}"
						IsReadOnly="{Binding Path=Cost_priceIsReadOnly}"
                        SynergyDecimalField="True"                         NumberOfDecimals="2"
						MaxLength="10"
						Width="120"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
                        <symphonyUI:SynergyDecimalBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Cost_priceIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Cost_price}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="Gray" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
										<Setter Property="TextBox.Background" Value="Transparent"/>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SynergyDecimalBox.Style>
                    </symphonyUI:SynergyDecimalBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Product_Sell_price_heading">Selling Price</clr:String>


	<Style x:Key="Product_Sell_price_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Selling Price"
						IsEnabled="{Binding Path=Sell_priceIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Product_Sell_price_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SynergyDecimalBox
						
						CaretBrush="{StaticResource CaretBrush}"
						HorizontalAlignment="Left"
						VerticalAlignment="Center"
                        Name="ctlProduct_Sell_price"
                        Text="{Binding Path=Sell_price, Converter={StaticResource impliedDecimalConverter}  ,StringFormat=#0.00
								, UpdateSourceTrigger=Default
                                , ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        IsEnabled="{Binding Path=Sell_priceIsEnabled}"
						IsReadOnly="{Binding Path=Sell_priceIsReadOnly}"
                        SynergyDecimalField="True"                         NumberOfDecimals="2"
						MaxLength="10"
						Width="120"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
                        <symphonyUI:SynergyDecimalBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Sell_priceIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Sell_price}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="Gray" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
										<Setter Property="TextBox.Background" Value="Transparent"/>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SynergyDecimalBox.Style>
                    </symphonyUI:SynergyDecimalBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Product_Pack_size_heading">Pack Size</clr:String>


	<Style x:Key="Product_Pack_size_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Pack Size"
						IsEnabled="{Binding Path=Pack_sizeIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Product_Pack_size_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
						
						CaretBrush="{StaticResource CaretBrush}"
                        Name="ctlProduct_Pack_size"
                        Text="{Binding Path=Pack_size, Converter={StaticResource alphaConverter}, UpdateSourceTrigger=Default,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="10"
						Width="120"
                        IsEnabled="{Binding Path=Pack_sizeIsEnabled}"
						IsReadOnly="{Binding Path=Pack_sizeIsReadOnly}"
						VerticalAlignment="Center"
						HorizontalAlignment="Left"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
						            <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Pack_sizeIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Pack_size}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="Gray" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
										<Setter Property="TextBox.Background" Value="Transparent"/>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Product_Vat_code_heading">VAT Code</clr:String>


	<Style x:Key="Product_Vat_code_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="VAT Code"
						IsEnabled="{Binding Path=Vat_codeIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Product_Vat_code_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="auto"></RowDefinition>
						</Grid.RowDefinitions>
						<ComboBox Grid.Row="0"
							
							Visibility="{Binding Path=Vat_codeIsReadOnly, Converter={StaticResource reverseBooleanToVisibilityConverter}}"
							HorizontalAlignment="Left"
							VerticalAlignment="Center"
							Name="ctlProduct_Vat_code"
							ItemsSource="{Binding Source={StaticResource VAT_CODEitems}}"
							DisplayMemberPath="Description"
							SelectedValue="{Binding Path=Vat_code, Converter={StaticResource decimalConverter},
							ValidatesOnDataErrors=True}"
							Validation.ErrorTemplate="{StaticResource validationTemplate}"
							SelectedValuePath="IndexValue"
							IsEnabled="{Binding Path=Vat_codeIsEnabled}"
							Width="120"
							Margin="0,1,0,1"
							ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
							<ComboBox.Style>
								<Style>
									<Style.Triggers>
										<DataTrigger Binding="{Binding Path=Vat_codeIsFocused}" Value="true">
											<Setter Property="FocusManager.FocusedElement"
													Value="{Binding ElementName=ctlProduct_Vat_code}"></Setter>
										</DataTrigger>
										<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
											<Setter Property="ComboBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
											<Setter Property="ComboBox.Background">
												<Setter.Value>
													<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
														<LinearGradientBrush.GradientStops>
															<GradientStop Offset="0.2" Color="Gray" />
															<GradientStop Offset="3" Color="Red" />
														</LinearGradientBrush.GradientStops>
													</LinearGradientBrush>
												</Setter.Value>
											</Setter>
										</DataTrigger>
										<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
											<Setter Property="ComboBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
											<Setter Property="ComboBox.Background" Value="Transparent"/>
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</ComboBox.Style>
						</ComboBox>
						<TextBox Grid.Row="0"
								
								 Width="120"
								 HorizontalAlignment="Left"
								 VerticalAlignment="Center"
								 Margin="0,1,0,1"
								 Text="{Binding ElementName=ctlProduct_Vat_code, Path=Text}"
								 Visibility="{Binding Path=Vat_codeIsReadOnly, Converter={StaticResource BooleanToVisibilityConverter}}"
								 IsReadOnly="True">
						</TextBox>
					</Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Product_Prod_group_heading">Product Group</clr:String>


	<Style x:Key="Product_Prod_group_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Product Group"
						IsEnabled="{Binding Path=Prod_groupIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Product_Prod_group_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
						
						CaretBrush="{StaticResource CaretBrush}"
                        Name="ctlProduct_Prod_group"
                        Text="{Binding Path=Prod_group, Converter={StaticResource alphaConverter}, UpdateSourceTrigger=Default,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="3"
						Width="36"
						CharacterCasing="Upper"
                        IsEnabled="{Binding Path=Prod_groupIsEnabled}"
						IsReadOnly="{Binding Path=Prod_groupIsReadOnly}"
						VerticalAlignment="Center"
						HorizontalAlignment="Left"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
						            <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Prod_groupIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Prod_group}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="Gray" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
										<Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
										<Setter Property="TextBox.Background" Value="Transparent"/>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Product_Promotion_heading">On Offer ?</clr:String>


	<Style x:Key="Product_Promotion_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="On Offer ?"
						IsEnabled="{Binding Path=PromotionIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Product_Promotion_style" TargetType="{x:Type symphonyControls:FieldControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <CheckBox
						
						HorizontalAlignment="Left"
                        Name="ctlProduct_Promotion"
						Content="On Offer ?"
                        IsChecked="{Binding Path=Promotion, Converter={StaticResource decimalTFConverter}}"
                        IsEnabled="{Binding Path=PromotionIsEnabled}"
                        VerticalAlignment="Center"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                        <CheckBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=PromotionIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Promotion}"></Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
</ResourceDictionary>

