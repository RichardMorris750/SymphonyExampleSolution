<!--
 WARNING: This code was generated by CodeGen. Any changes that you
          make to this code will be overwritten if the code is regenerated!

 Template author:   Richard C. Morris, Synergex Technology Evangelist

 Template Name: Symphony Framework : SYMPHONY_STYLE_V3_2.tpl

-->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:clr="clr-namespace:System;assembly=mscorlib"
    xmlns:symphonyConverters="clr-namespace:Symphony.Conductor.Converters;assembly=SymphonyConductor"
    xmlns:symphonyTriggers="clr-namespace:Symphony.Conductor.Triggers;assembly=SymphonyConductor"
    xmlns:symphonyUI="clr-namespace:Symphony.Crescendo.Presentation;assembly=SymphonyCrescendo"
    xmlns:symphonyControls="clr-namespace:Symphony.Conductor.Controls;assembly=SymphonyConductor"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/SFE_UI;component/Resources/AppStyling.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SymphonyConductor;component/Resources/Styles.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SymphonyConductor;component/Resources/Converters.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SFE_UI;component/Resources/Product_Content.CodeGen.xaml"/>
     </ResourceDictionary.MergedDictionaries>


    <clr:String x:Key="Product_Prod_code_heading">Product Code</clr:String>


    <Style x:Key="Product_Prod_code_prompt" TargetType="{x:Type Label}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Label
                        Content="Product Code"
                        IsEnabled="{Binding Path=Prod_codeIsEnabled}">
                    </Label>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="Product_Prod_code_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        
                        CaretBrush="{StaticResource CaretBrush}"
                        Name="ctlProduct_Prod_code"
                        Text="{Binding Path=Prod_code, Converter={StaticResource alphaConverter}, UpdateSourceTrigger=Default,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="6"
                        Width="72"
                        CharacterCasing="Upper"
                        IsEnabled="{Binding Path=Prod_codeIsEnabled}"
                        IsReadOnly="{Binding Path=Prod_codeIsReadOnly}"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Left"
                        ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                                    <i:Interaction.Behaviors>
                                      <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
                                    </i:Interaction.Behaviors>
                                    <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Prod_codeIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Prod_code}"></Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
                                        <Setter Property="TextBox.Background">
                                            <Setter.Value>
                                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0.2" Color="Gray" />
                                                        <GradientStop Offset="3" Color="Red" />
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
                                        <Setter Property="TextBox.Background" Value="Transparent"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <clr:String x:Key="Product_Prod_description_heading">Description</clr:String>


    <Style x:Key="Product_Prod_description_prompt" TargetType="{x:Type Label}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Label
                        Content="Description"
                        IsEnabled="{Binding Path=Prod_descriptionIsEnabled}">
                    </Label>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="Product_Prod_description_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        
                        CaretBrush="{StaticResource CaretBrush}"
                        Name="ctlProduct_Prod_description"
                        Text="{Binding Path=Prod_description, Converter={StaticResource alphaConverter}, UpdateSourceTrigger=Default,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="40"
                        Width="480"
                        IsEnabled="{Binding Path=Prod_descriptionIsEnabled}"
                        IsReadOnly="{Binding Path=Prod_descriptionIsReadOnly}"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Left"
                        ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                                    <i:Interaction.Behaviors>
                                      <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
                                    </i:Interaction.Behaviors>
                                    <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Prod_descriptionIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Prod_description}"></Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
                                        <Setter Property="TextBox.Background">
                                            <Setter.Value>
                                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0.2" Color="Gray" />
                                                        <GradientStop Offset="3" Color="Red" />
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
                                        <Setter Property="TextBox.Background" Value="Transparent"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <clr:String x:Key="Product_Supp_code_heading">Supplier</clr:String>


    <Style x:Key="Product_Supp_code_prompt" TargetType="{x:Type Label}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Label
                        Content="Supplier"
                        IsEnabled="{Binding Path=Supp_codeIsEnabled}">
                    </Label>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="Product_Supp_code_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SearchTextBox
                        
                        HorizontalAlignment="Left"
                        Name="ctlProduct_Supp_code"
                        Text="{Binding Path=Supp_code, Converter={StaticResource alphaConverter}, UpdateSourceTrigger=Default,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        SearchMode="Delayed"
                                                Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.NavigateState}"
                        CommandParameter="SupplierCodeDrillState"
                        MaxLength="6"
                        Width="100"
                        CharacterCasing="Upper"
                        IsEnabled="{Binding Path=Supp_codeIsEnabled}"
                        IsReadOnly="{Binding Path=Supp_codeIsReadOnly}"
                        VerticalAlignment="Center"
                        ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                                    <i:Interaction.Behaviors>
                                      <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
                                    </i:Interaction.Behaviors>
                        <symphonyUI:SearchTextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Supp_codeIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Supp_code}"></Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
                                        <Setter Property="TextBox.Background">
                                            <Setter.Value>
                                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0.2" Color="Gray" />
                                                        <GradientStop Offset="3" Color="Red" />
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
                                        <Setter Property="TextBox.Background" Value="Transparent"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SearchTextBox.Style>
                    </symphonyUI:SearchTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Product_Supp_code_noDrill_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        
                        CaretBrush="{StaticResource CaretBrush}"
                        Name="ctlProduct_Supp_code_noDrill"
                        Text="{Binding Path=Supp_code, Converter={StaticResource alphaConverter}, UpdateSourceTrigger=Default,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="6"
                        Width="100"
                        CharacterCasing="Upper"
                        IsEnabled="{Binding Path=Supp_codeIsEnabled}"
                        IsReadOnly="{Binding Path=Supp_codeIsReadOnly}"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Left"
                        ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                                    <i:Interaction.Behaviors>
                                      <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
                                    </i:Interaction.Behaviors>
                                    <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Supp_codeIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Supp_code_noDrill}"></Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
                                        <Setter Property="TextBox.Background">
                                            <Setter.Value>
                                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0.2" Color="Gray" />
                                                        <GradientStop Offset="3" Color="Red" />
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
                                        <Setter Property="TextBox.Background" Value="Transparent"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <clr:String x:Key="Product_Cost_price_heading">Cost Price</clr:String>


    <Style x:Key="Product_Cost_price_prompt" TargetType="{x:Type Label}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Label
                        Content="Cost Price"
                        IsEnabled="{Binding Path=Cost_priceIsEnabled}">
                    </Label>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="Product_Cost_price_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SynergyDecimalBox
                        
                        CaretBrush="{StaticResource CaretBrush}"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Name="ctlProduct_Cost_price"
                        Text="{Binding Path=Cost_price, Converter={StaticResource impliedDecimalConverter}  ,StringFormat=#0.00
                                , UpdateSourceTrigger=Default
                                , ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        IsEnabled="{Binding Path=Cost_priceIsEnabled}"
                        IsReadOnly="{Binding Path=Cost_priceIsReadOnly}"
                        SynergyDecimalField="True"                         NumberOfDecimals="2"
                        MaxLength="10"
                        Width="120"
                        ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                                    <i:Interaction.Behaviors>
                                      <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
                                    </i:Interaction.Behaviors>
                        <symphonyUI:SynergyDecimalBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Cost_priceIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Cost_price}"></Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
                                        <Setter Property="TextBox.Background">
                                            <Setter.Value>
                                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0.2" Color="Gray" />
                                                        <GradientStop Offset="3" Color="Red" />
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
                                        <Setter Property="TextBox.Background" Value="Transparent"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SynergyDecimalBox.Style>
                    </symphonyUI:SynergyDecimalBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <clr:String x:Key="Product_Sell_price_heading">Selling Price</clr:String>


    <Style x:Key="Product_Sell_price_prompt" TargetType="{x:Type Label}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Label
                        Content="Selling Price"
                        IsEnabled="{Binding Path=Sell_priceIsEnabled}">
                    </Label>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="Product_Sell_price_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SynergyDecimalBox
                        
                        CaretBrush="{StaticResource CaretBrush}"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Name="ctlProduct_Sell_price"
                        Text="{Binding Path=Sell_price, Converter={StaticResource impliedDecimalConverter}  ,StringFormat=#0.00
                                , UpdateSourceTrigger=Default
                                , ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        IsEnabled="{Binding Path=Sell_priceIsEnabled}"
                        IsReadOnly="{Binding Path=Sell_priceIsReadOnly}"
                        SynergyDecimalField="True"                         NumberOfDecimals="2"
                        MaxLength="10"
                        Width="120"
                        ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                                    <i:Interaction.Behaviors>
                                      <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
                                    </i:Interaction.Behaviors>
                        <symphonyUI:SynergyDecimalBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Sell_priceIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Sell_price}"></Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
                                        <Setter Property="TextBox.Background">
                                            <Setter.Value>
                                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0.2" Color="Gray" />
                                                        <GradientStop Offset="3" Color="Red" />
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
                                        <Setter Property="TextBox.Background" Value="Transparent"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SynergyDecimalBox.Style>
                    </symphonyUI:SynergyDecimalBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <clr:String x:Key="Product_Pack_size_heading">Pack Size</clr:String>


    <Style x:Key="Product_Pack_size_prompt" TargetType="{x:Type Label}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Label
                        Content="Pack Size"
                        IsEnabled="{Binding Path=Pack_sizeIsEnabled}">
                    </Label>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="Product_Pack_size_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        
                        CaretBrush="{StaticResource CaretBrush}"
                        Name="ctlProduct_Pack_size"
                        Text="{Binding Path=Pack_size, Converter={StaticResource alphaConverter}, UpdateSourceTrigger=Default,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="10"
                        Width="120"
                        IsEnabled="{Binding Path=Pack_sizeIsEnabled}"
                        IsReadOnly="{Binding Path=Pack_sizeIsReadOnly}"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Left"
                        ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                                    <i:Interaction.Behaviors>
                                      <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
                                    </i:Interaction.Behaviors>
                                    <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Pack_sizeIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Pack_size}"></Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
                                        <Setter Property="TextBox.Background">
                                            <Setter.Value>
                                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0.2" Color="Gray" />
                                                        <GradientStop Offset="3" Color="Red" />
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
                                        <Setter Property="TextBox.Background" Value="Transparent"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <clr:String x:Key="Product_Vat_code_heading">VAT Code</clr:String>


    <Style x:Key="Product_Vat_code_prompt" TargetType="{x:Type Label}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Label
                        Content="VAT Code"
                        IsEnabled="{Binding Path=Vat_codeIsEnabled}">
                    </Label>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="Product_Vat_code_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto"></RowDefinition>
                        </Grid.RowDefinitions>
                        <ComboBox Grid.Row="0"
                            
                            Foreground="{StaticResource InputForegroundBrush}"
                            Visibility="{Binding Path=Vat_codeIsReadOnly, Converter={StaticResource reverseBooleanToVisibilityConverter}}"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Name="ctlProduct_Vat_code"
                            ItemsSource="{Binding Source={StaticResource VAT_CODEitems}}"
                            DisplayMemberPath="Description"
                            SelectedValue="{Binding Path=Vat_code, Converter={StaticResource decimalConverter},
                            ValidatesOnDataErrors=True}"
                            Validation.ErrorTemplate="{StaticResource validationTemplate}"
                            SelectedValuePath="IndexValue"
                            IsEnabled="{Binding Path=Vat_codeIsEnabled}"
                            Width="120"
                            Margin="0,1,0,1"
                            ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                            <ComboBox.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Vat_codeIsFocused}" Value="true">
                                            <Setter Property="FocusManager.FocusedElement"
                                                    Value="{Binding ElementName=ctlProduct_Vat_code}"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
                                            <Setter Property="ComboBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
                                            <Setter Property="ComboBox.Background">
                                                <Setter.Value>
                                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                        <LinearGradientBrush.GradientStops>
                                                            <GradientStop Offset="0.2" Color="Gray" />
                                                            <GradientStop Offset="3" Color="Red" />
                                                        </LinearGradientBrush.GradientStops>
                                                    </LinearGradientBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>

                                     <Setter Property="ComboBox.Template">
                                         <Setter.Value>
                                             <ControlTemplate TargetType="{x:Type ComboBox}">
                                                 <Grid>
                                                     <ToggleButton 
                                                         Name="ToggleButton" 
                                                         Template="{StaticResource ComboBoxToggleButton}" 
                                                         Grid.Column="2" 
                                                         Focusable="false"
                                                         IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                                         ClickMode="Press">
                                                     </ToggleButton>
                                                     <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                                                         ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                         ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                         Margin="3,3,23,3"
                                                         VerticalAlignment="Center"
                                                         HorizontalAlignment="Left" />
                                                     <TextBox x:Name="PART_EditableTextBox"
                                                         Style="{x:Null}" 
                                                         Template="{StaticResource ComboBoxTextBox}" 
                                                         HorizontalAlignment="Left" 
                                                         VerticalAlignment="Center" 
                                                         Margin="3,3,23,3"
                                                         Focusable="True" 
                                                         Background="Transparent"
                                                         Foreground="Green"
                                                         Visibility="Hidden"
                                                         IsReadOnly="{TemplateBinding IsReadOnly}"/>
                                                     <Popup 
                                                         Name="Popup"
                                                         Placement="Bottom"
                                                         IsOpen="{TemplateBinding IsDropDownOpen}"
                                                         AllowsTransparency="True" 
                                                         Focusable="False"
                                                         PopupAnimation="Slide">

                                                         <Grid Name="DropDown"
                                                             SnapsToDevicePixels="True"                
                                                             MinWidth="{TemplateBinding ActualWidth}"
                                                             MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                                             <Border 
                                                                 x:Name="DropDownBorder"
                                                                 Background="Transparent"
                                                                 BorderThickness="1"
                                                                 BorderBrush="{StaticResource LabelColorBrush}"/>
                                                             <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                                                 <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                                             </ScrollViewer>
                                                         </Grid>
                                                     </Popup>
                                                 </Grid>
                                                 <ControlTemplate.Triggers>
                                                     <Trigger Property="HasItems" Value="false">
                                                         <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                                                     </Trigger>
                                                     <Trigger Property="IsEnabled" Value="false">
                                                         <Setter Property="Foreground" Value="Pink"/>
                                                     </Trigger>
                                                     <Trigger Property="IsGrouping" Value="true">
                                                         <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                                     </Trigger>
                                                     <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                                         <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                                                         <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                                                     </Trigger>
                                                     <Trigger Property="IsEditable"  Value="true">
                                                         <Setter Property="IsTabStop" Value="false"/>
                                                         <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                                                         <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                                                     </Trigger>
                                                 </ControlTemplate.Triggers>
                                             </ControlTemplate>
                                         </Setter.Value>
                                     </Setter>

                                </Style>
                            </ComboBox.Style>
                        </ComboBox>
                        <TextBox Grid.Row="0"
                                
                                 Width="120"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Margin="0,1,0,1"
                                 Text="{Binding ElementName=ctlProduct_Vat_code, Path=Text}"
                                 Visibility="{Binding Path=Vat_codeIsReadOnly, Converter={StaticResource BooleanToVisibilityConverter}}"
                                 IsReadOnly="True">
                        </TextBox>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <clr:String x:Key="Product_Prod_group_heading">Product Group</clr:String>


    <Style x:Key="Product_Prod_group_prompt" TargetType="{x:Type Label}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Label
                        Content="Product Group"
                        IsEnabled="{Binding Path=Prod_groupIsEnabled}">
                    </Label>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="Product_Prod_group_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SearchTextBox
                        
                        HorizontalAlignment="Left"
                        Name="ctlProduct_Prod_group"
                        Text="{Binding Path=Prod_group, Converter={StaticResource alphaConverter}, UpdateSourceTrigger=Default,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        SearchMode="Delayed"
                                                Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.NavigateState}"
                        CommandParameter="ProdGroupDrillState"
                        MaxLength="3"
                        Width="100"
                        CharacterCasing="Upper"
                        IsEnabled="{Binding Path=Prod_groupIsEnabled}"
                        IsReadOnly="{Binding Path=Prod_groupIsReadOnly}"
                        VerticalAlignment="Center"
                        ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                                    <i:Interaction.Behaviors>
                                      <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
                                    </i:Interaction.Behaviors>
                        <symphonyUI:SearchTextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Prod_groupIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Prod_group}"></Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
                                        <Setter Property="TextBox.Background">
                                            <Setter.Value>
                                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0.2" Color="Gray" />
                                                        <GradientStop Offset="3" Color="Red" />
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
                                        <Setter Property="TextBox.Background" Value="Transparent"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SearchTextBox.Style>
                    </symphonyUI:SearchTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Product_Prod_group_noDrill_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        
                        CaretBrush="{StaticResource CaretBrush}"
                        Name="ctlProduct_Prod_group_noDrill"
                        Text="{Binding Path=Prod_group, Converter={StaticResource alphaConverter}, UpdateSourceTrigger=Default,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="3"
                        Width="100"
                        CharacterCasing="Upper"
                        IsEnabled="{Binding Path=Prod_groupIsEnabled}"
                        IsReadOnly="{Binding Path=Prod_groupIsReadOnly}"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Left"
                        ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                                    <i:Interaction.Behaviors>
                                      <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
                                    </i:Interaction.Behaviors>
                                    <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Prod_groupIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlProduct_Prod_group_noDrill}"></Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputInErrorForegroundBrush}" />
                                        <Setter Property="TextBox.Background">
                                            <Setter.Value>
                                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0.2" Color="Gray" />
                                                        <GradientStop Offset="3" Color="Red" />
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="False">
                                        <Setter Property="TextBox.Foreground" Value="{StaticResource InputForegroundBrush}" />
                                        <Setter Property="TextBox.Background" Value="Transparent"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <clr:String x:Key="Product_Promotion_heading">On Offer ?</clr:String>


    <Style x:Key="Product_Promotion_prompt" TargetType="{x:Type Label}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Label
                        Content="On Offer ?"
                        IsEnabled="{Binding Path=PromotionIsEnabled}">
                    </Label>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="Product_Promotion_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <CheckBox
                        
                        HorizontalAlignment="Left"
                        Name="ctlProduct_Promotion"
                        Content="On Offer ?" Foreground="{StaticResource LabelColorBrush}"
                        IsChecked="{Binding Path=Promotion, Converter={StaticResource decimalTFConverter}}"
                        IsEnabled="{Binding Path=PromotionIsEnabled}"
                        VerticalAlignment="Center"
                        ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						<CheckBox.Style>
							<Style>
								<Style.Triggers>
									<DataTrigger Binding="{Binding Path=PromotionIsFocused}" Value="true">
										<Setter Property="FocusManager.FocusedElement"
												Value="{Binding ElementName=ctlProduct_Promotion}"></Setter>
									</DataTrigger>
								</Style.Triggers>

								<Setter Property="CheckBox.Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type CheckBox}">
											<BulletDecorator Background="Transparent">
												<BulletDecorator.Bullet>
													<Border x:Name="Border"
														Width="16"
														Height="16"
														CornerRadius="0"
														BorderThickness="1">
														<Border.BorderBrush>
															<LinearGradientBrush StartPoint="0,0"
																EndPoint="0,1">
																<LinearGradientBrush.GradientStops>
																	<GradientStopCollection>
																		<GradientStop Color="{DynamicResource BorderLightColor}"
																					  Offset="0.0" />
																		<GradientStop Color="{DynamicResource BorderDarkColor}"
																					  Offset="1.0" />
																	</GradientStopCollection>
																</LinearGradientBrush.GradientStops>
															</LinearGradientBrush>
														</Border.BorderBrush>
														<Border.Background>
															<LinearGradientBrush StartPoint="0,0"
																				 EndPoint="0,1">
																<LinearGradientBrush.GradientStops>
																	<GradientStopCollection>
																		<GradientStop Color="{DynamicResource ControlLightColor}" />
																		<GradientStop Color="{DynamicResource ControlMediumColor}"
																					  Offset="1.0" />
																	</GradientStopCollection>
																</LinearGradientBrush.GradientStops>
															</LinearGradientBrush>

														</Border.Background>
														<Grid>
															<Path Visibility="Collapsed"
																  Width="10"
																  Height="10"
																  x:Name="CheckMark"
																  SnapsToDevicePixels="False"
																  StrokeThickness="2"
																  Data="F1 M 0.468732,4.66838L 3.03345,7.95443L 7.28127,0.420569">
																<Path.Stroke>
																	<SolidColorBrush Color="{DynamicResource GlyphColor}" />
																</Path.Stroke>
															</Path>
															<Path Visibility="Collapsed"
																  Width="10"
																  Height="10"
																  x:Name="InderminateMark"
																  SnapsToDevicePixels="False"
																  StrokeThickness="2"
																  Data="F1 M 0.468732,4.66838L 3.03345,7.95443L 7.28127,0.420569">
																<Path.Stroke>
																	<SolidColorBrush Color="{DynamicResource GlyphColor}" />
																</Path.Stroke>
															</Path>
														</Grid>
													</Border>
												</BulletDecorator.Bullet>
												<VisualStateManager.VisualStateGroups>
													<VisualStateGroup x:Name="CommonStates">
														<VisualState x:Name="Normal" />
														<VisualState x:Name="MouseOver">
															<Storyboard>
																<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
																							  Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
																	<EasingColorKeyFrame KeyTime="0"
																						 Value="{StaticResource ControlMouseOverColor}" />
																</ColorAnimationUsingKeyFrames>
															</Storyboard>
														</VisualState>
														<VisualState x:Name="Pressed">
															<Storyboard>
																<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
																							  Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
																	<EasingColorKeyFrame KeyTime="0"
																						 Value="{StaticResource ControlPressedColor}" />
																</ColorAnimationUsingKeyFrames>
																<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
																							  Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
																	<EasingColorKeyFrame KeyTime="0"
																						 Value="{StaticResource PressedBorderDarkColor}" />
																</ColorAnimationUsingKeyFrames>
																<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
																							  Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
																	<EasingColorKeyFrame KeyTime="0"
																						 Value="{StaticResource PressedBorderLightColor}" />
																</ColorAnimationUsingKeyFrames>
															</Storyboard>
														</VisualState>
														<VisualState x:Name="Disabled" />
													</VisualStateGroup>
													<VisualStateGroup x:Name="CheckStates">
														<VisualState x:Name="Checked">
															<Storyboard>
																<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
																							   Storyboard.TargetName="CheckMark">
																	<DiscreteObjectKeyFrame KeyTime="0"
																							Value="{x:Static Visibility.Visible}" />
																</ObjectAnimationUsingKeyFrames>
															</Storyboard>
														</VisualState>
														<VisualState x:Name="Unchecked" />
														<VisualState x:Name="Indeterminate">
															<Storyboard>
																<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
																							   Storyboard.TargetName="InderminateMark">
																	<DiscreteObjectKeyFrame KeyTime="0"
																							Value="{x:Static Visibility.Visible}" />
																</ObjectAnimationUsingKeyFrames>
															</Storyboard>
														</VisualState>
													</VisualStateGroup>
												</VisualStateManager.VisualStateGroups>
												<ContentPresenter Margin="4,0,0,0"
																  VerticalAlignment="Center"
																  HorizontalAlignment="Left"
																  RecognizesAccessKey="True" />
											</BulletDecorator>
										</ControlTemplate>
									</Setter.Value>
								</Setter>

							</Style>
						</CheckBox.Style>
                    </CheckBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>

