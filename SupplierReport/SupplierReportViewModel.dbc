import System
import System.Collections.Generic
import System.Text

import Symphony.Conductor.ViewModel
import System.Windows
import System.Collections.ObjectModel
import AppData
import Symphony.Harmony

;;use the extension methods
import System.Linq
import Symphony.Conductor.Model
import Symphony.Conductor.Commands
import Symphony.Conductor.DataIO
import Symphony.Conductor.Types

import SFEBusinessLogic


namespace SupplierReport

	public class SupplierReportViewModel extends BaseViewModel

		
		public method SupplierReportViewModel 
			in req sender				,@FrameworkElement
			endparams

			parent(sender)
	
		proc

			mSelections = new Selections_Data()
			addhandler(mSelections.IsDataValidChanged, dataChanged_event)

			mReportType = 'R'

		endmethod
		
		;;what for changes
		
		private method dataChanged_event, void
			endparams
		proc
			mDoReportCommand.ExecuteState = (mStartSupp <= mEndSupp )
		endmethod
		
		;;data field bindings
		
		private mStartSupp	,string
		private mEndSupp	, string

		private mReportType	,string


		private mSelections	,@Selections_Data

		public property StartSupp, string
			method get
			proc
				mreturn mStartSupp
			endmethod
			method set
			proc
				mStartSupp = value
				RaisePropertyChanged("StartSupp")
			endmethod
		endproperty
		

		public property EndSupp, string
			method get
			proc
				mreturn mEndSupp
			endmethod
			method set
				proc
				RaisePropertyChanged("EndSupp")
				mEndSupp = value
			endmethod
		endproperty

		
		public property ReportType, string
			method get
			proc
				mreturn mReportType

			endmethod
			method set
				proc
				RaisePropertyChanged("ReportType")
				mreportType = value
			endmethod
		endproperty
		


		;;button binding command code
		
		private mDoReportCommand	,@GenericCommand
		
		public property DoReportCommand, @GenericCommand
			method get
			proc
				if (mDoReportCommand == ^null)
				begin
					lambda doCommand(sender, param)
					begin

						if (!mStartSupp && !mEndSupp)
							mEndSupp = '~~~~~~'
						if (mStartSupp != ^null  && mEndSupp == ^null) 
							mEndSupp = mStartSupp

						SFEBusinessLogic.SupplierReport.Print(mStartSupp,mEndSupp,mReportType)
					end
					mDoReportCommand = new GenericCommand("REPORT", doCommand)
					dataChanged_event()
				end
				mreturn mDoReportCommand
			endmethod
		endproperty

	
	endclass

endnamespace



