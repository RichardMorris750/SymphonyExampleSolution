;;**********************************************************************
;;
;; Title:       Program.dbl
;;
;; Type:        Program
;;
;; Description: Program to create and popualte sample data files.
;;
;; Author(s):	Gordon Ireland, Synergy/DE Consultants, Synergex
;;				Richard C. Morris, Technology Evangelist, Synergex.
;;
;; Copyright (c) 2016, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text

;;imports required to use data objects and file IO classes.
import AppData
import Symphony.Conductor.DataIO

namespace SystemSetup
	
	;;; <summary>
	;;; This program creates and populates the files requird for the Symphony Framework Example application
	;;; </summary>  
	main
		
		.include 'product' repository, record = 'product'
		.include 'supplier' repository, record = 'supplier'
		.include 'product_group' repository, record = 'product_group'
		.include 'parameter' repository, record = 'parameter'
		
		record
			ttChn		,i4	,0
			ans			,a1
			dataChan	,i4	,0
		endrecord
		
	proc
		open(ttChn, I, 'TT:')

		writes(ttChn, 'Recreate all files ?  (Y/N) ?')
		reads(ttChn, ans)
		if (ans.eq.'Y' .or. ans.eq.'y')
		begin
			writes(ttChn, 'Creating Files...')
			
			call create
			
			call setParameter
			call loadProduct
			call loadSupplier
			call loadGroup
			
			writes(ttChn, 'Completed')
		end
			
		close ttChn
		flags(7000000, 1)
		stop
;----------------------------------------------------------------------------------------
;create files
		
	create,

		data hadError	,boolean	,false

		;;create the folder if it's not there
		data logValue	,a255
		data logLength	,i4
		getlog("SFEDATA", logValue, logLength)
		if (!logLength)
		begin
			writes(ttChn, "Logical SFEDATA not correctly defined")
			return
		end

		if (!System.IO.Directory.Exists(%atrim(logValue)))
		begin
			System.IO.Directory.CreateDirectory(%atrim(logValue))
		end

		writes(ttChn, 'Creating files')
		
		try
		begin
			delet('SFEDATA:product.ism')
			isamc('SFEDATA:product.ism', 82, 1, "START=1,LENGTH=6,NODUPS")	
		end
		catch (e, @Exception)
		begin
			writes(ttChn, 'Error creating product.ism file: ' + e.Message)
			hadError = true
		end
		endtry
		
		try
		begin
			delet('SFEDATA:supplier.ism')
			isamc('SFEDATA:supplier.ism', 236, 1, "START=1,LENGTH=6,NODUPS")	
		end
		catch (e, @Exception)
		begin
			writes(ttChn,'Error creating supplier.ism file: ' + e.Message)
			hadError = true
		end
		endtry
		
		try
		begin
			delet('SFEDATA:product_group.ism')
			isamc('SFEDATA:product_group.ism', 23, 1, "START=1,LENGTH=3,NODUPS")	
		end
		catch (e, @Exception)
		begin
			writes(ttChn, 'Error creating productgroup.ism file: ' + e.Message)
			hadError = true
		end
		endtry
		
		try
		begin
			delet('SFEDATA:order_header.ism')
			data headerKeyVals	,[4]a*
			&	,"START=1,LENGTH=6,TYPE=DECIMAL,NODUPS"
			&	,"START=7:1,LENGTH=6:6,TYPE=ALPHA:DECIMAL,NODUPS"
			&	,"START=13:1,LENGTH=8:6,TYPE=DECIMAL:DECIMAL,NODUPS"
			&	,"START=21:1,LENGTH=8:6,TYPE=DECIMAL:DECIMAL,NODUPS"
			isamc('SFEDATA:order_header.ism', 159, 4, headerKeyVals)	
		end
		catch (e, @Exception)
		begin
			writes(ttChn, 'Error creating OrderHeader.ism file: ' + e.Message)
			hadError = true
		end
		endtry
		
		try
		begin
			delet('SFEDATA:order_line.ism')
			data lineKeyVals	,[2]a*
			&	,"START=1:6,LENGTH=5:6,TYPE=DECIMAL:DECIMAL,NODUPS"
			&	,"START=12:1:6,LENGTH=10:5:6,TYPE=ALPHA:DECIMAL:DECIMAL,NODUPS"
			isamc('SFEDATA:order_line.ism', 100, 2, lineKeyVals)	
		end
		catch (e, @Exception)
		begin
			writes(ttChn,'Error creating OrderLine.ism file: ' + e.Message)
			hadError = true
		end
		endtry
		
		if (hadError)
		begin
			writes(ttChn,'Press <RETURN> to continue')
			reads(ttChn, ans)
		end
		return
		
;--------------------------------------------------------------------
;set parameter file
		
	setparameter,
		writes(ttChn,'Creating parameter file')
		try
		begin
			open(dataChan = 0, O:R, 'SFEDATA:parameter.dat', RECSIZ:100)
			clear parameter
			last_order_no = 1
			write(dataChan, parameter, 1)
			close dataChan
		end
		catch (e,@Exception)
		begin
			writes(ttChn,'Error creating and setting parameter.dat file: ' + e.Message)		
		end
		endtry
		
		return
		
		
;------------------------------------------------------------
; populate product file
	loadproduct,
		writes(ttChn, 'Loading products')
		open(dataChan = 0, U:I, 'SFEDATA:product.ism')
		
		prod_code			=	'COK001'
		prod_description	=	'Coke Cans'
		sell_price			=	8.00	
		cost_price			=	6.00
		product.prod_group	=	'SD'
		product.supp_code	=	'D00001'
		vat_code			=	1
		pack_size			=	'330ML'
		call addproduct
		
		prod_code			=	'COK002'
		prod_description	=	'Coke 1ltr bottles'
		sell_price			=	12.00	
		cost_price			=	10.00
		product.prod_group	=	'SD'
		product.supp_code	=	'D00001'
		vat_code			=	1
		pack_size			=	'12 x 1ltr'
		call addproduct
		
		prod_code			=	'COK003'
		prod_description	=	'Coke 2Ltr Bottles'
		sell_price			=	14.00	
		cost_price			=	10.00
		product.prod_group	=	'SD'
		product.supp_code	=	'D00001'
		vat_code			=	1
		pack_size			=	'6 x 2Ltr'
		call addproduct
		
		prod_code			=	'COK004'
		prod_description	=	'Diet Coke Cans'
		sell_price			=	8.00	
		cost_price			=	6.00
		product.prod_group	=	'SD'
		product.supp_code	=	'D00001'
		vat_code			=	1
		pack_size			=	'330ML'
		call addproduct
		
		prod_code			=	'COK005'
		prod_description	=	'Diet Coke 1ltr bottle'
		sell_price			=	12.00	
		cost_price			=	10.00
		product.prod_group	=	'SD'
		product.supp_code	=	'D00001'
		vat_code			=	1
		pack_size			=	'12 x 1ltr'
		call addproduct
		
		prod_code			=	'COK006'
		prod_description	=	'Diet Coke 2Ltr Bottles'
		sell_price			=	14.00	
		cost_price			=	10.00
		product.prod_group	=	'SD'
		product.supp_code	=	'D00001'
		vat_code			=	1
		pack_size			=	'6 x 2Ltr'
		call addproduct		
		
		prod_code			=	'7UP001'
		prod_description	=	'7UP Cans'
		sell_price			=	8.50	
		cost_price			=	11.00
		product.prod_group	=	'SD'
		product.supp_code	=	'D00001'
		vat_code			=	1
		pack_size			=	'330ML'
		call addproduct
		
		prod_code			=	'7UP002'
		prod_description	=	'7UP 1 Litre Bottles'
		sell_price			=	12.00	
		cost_price			=	9.00
		product.prod_group	=	'SD'
		product.supp_code	=	'D00001'
		vat_code			=	1
		pack_size			=	'12 x 1 Ltr'
		call addproduct
		close 1
		return
		
		prod_code			=	'7UP003'
		prod_description	=	'7UP 2 Litre Bottles'
		sell_price			=	13.00	
		cost_price			=	10.50
		product.prod_group	=	'SD'
		product.supp_code	=	'D00001'
		vat_code			=	1
		pack_size			=	'6 x 2 Ltr'
		call addproduct
		
		prod_code			=	'CRISP1'
		prod_description	=	'Ready Salted Crisps'
		sell_price			=	13.00	
		cost_price			=	10.50
		product.prod_group	=	'CR'
		product.supp_code	=	'C00001'
		vat_code			=	1
		pack_size			=	'Box of 48'
		call addproduct
		
		prod_code			=	'CRISP1'
		prod_description	=	'Ready Salted Crisps'
		sell_price			=	6.00	
		cost_price			=	4.00
		product.prod_group	=	'CR'
		product.supp_code	=	'C00001'
		vat_code			=	1
		pack_size			=	'Box of 48'
		call addproduct
		
		prod_code			=	'CRISP2'
		prod_description	=	'Salt and Vinegar Crisps'
		sell_price			=	6.00	
		cost_price			=	4.00
		product.prod_group	=	'CR'
		product.supp_code	=	'C00001'
		vat_code			=	1
		pack_size			=	'Box of 48'
		call addproduct
		
		prod_code			=	'CRISP3'
		prod_description	=	'Cheese and Onion Crisps'
		sell_price			=	6.00	
		cost_price			=	4.00
		product.prod_group	=	'CR'
		product.supp_code	=	'C00001'
		vat_code			=	1
		pack_size			=	'Box of 48'
		call addproduct
		close dataChan
		
		return
		
;--------------------------------------------------------
		
	addproduct,
		try
		begin
			store(dataChan, product)
		end
		catch (e,@Exception)
		begin
			writes(ttChn, 'Error adding product record for ' + prod_code + ' : ' + e.Message)
		end
		endtry
		return
		
;-----------------------------------------------------------------------------
; populate supplier file
	loadsupplier,
		writes(ttChn, 'loading suppliers')

		data supplierIO = new Supplier_FileIO(FileOpenMode.UpdateIndexed)
		
		supplier.supp_code	=	'D00001'
		name				=	'Drinks Company'
		address1			=	'123 Main Road'
		address2			=	'Anytown'
		address3			=
		postcode			=	'UK1 7TH'
		phone				=	'028 91123765'
		contact				=	'Mr T Jones'
		email				=	'Tjones@drinksco.com'
		call addsupplier
		
		supplier.supp_code	=	'C00001'
		name				=	'Crisp Company'
		address1			=	'456 Main Road'
		address2			=	'Othertown'
		address3			=
		postcode			=	'UK1 1TS'
		phone				=	'0108 6726155'
		contact				=	'Mr B Moore'
		email				=	'BMoore@crisps.com'
		call addsupplier

		;;let's display the records to the screen

		writes(ttChn, "Suppliers created:")
		
		data supplierObject = new Supplier_Data()
		
		data status	,FileAccessResults	,supplierIO.ReadFirstRecord(supplierObject)
		while (status == FileAccessResults.Success)
		begin
			writes(ttChn, supplierObject.Name + " : " + supplierObject.Contact)
			status = supplierIO.ReadNextRecord(supplierObject)
		end
		
		;;close the channel
		supplierIO.CloseChannel()

		writes(ttChn, "Press <RETURN> to continue")
		reads(ttChn, ans)		

		return
		
;---------------------------------------------------------
	addsupplier,
		
		if (supplierIO.CreateRecord(new Supplier_Data(supplier)) != FileAccessResults.Success)
			writes(ttChn, 'Error adding supplier record for ' + supplier.supp_code + ' : ' + supplierIO.LastSynergyError.ToString())
		return
		
;-------------------------------------------------------------------------------
; populate product group file
	loadgroup,
		writes(ttChn, 'loading groups')
		open(dataChan = 0, U:I, 'SFEDATA:product_group.ism')

		product_group.prod_group	= 'SD'
		group_desc					= 'Soft Drinks'
		call addgroup
		
		product_group.prod_group	= 'CRI'
		group_desc					= 'Crisps'
		call addgroup
		
		product_group.prod_group	= 'NUT'
		group_desc					= 'Nuts'
		call addgroup
		
		product_group.prod_group	= 'CHO'
		group_desc					= 'Chocolate'
		call addgroup
		
		close dataChan
		return
;---------------------------------------------------------
	addgroup,
		try
		begin
			store(dataChan, product_group)
		end
		catch (e,@Exception)
		begin
			writes(ttChn, 'Error adding product group record for ' + product_group.prod_group + ' : ' + e.Message)
		end
		endtry
		return
		
		
		
	endmain
	
endnamespace
