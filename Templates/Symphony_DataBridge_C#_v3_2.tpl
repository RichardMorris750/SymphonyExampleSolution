<CODEGEN_FILENAME><Structure_name>_Data.CodeGen.cs</CODEGEN_FILENAME>
<OPTIONAL_USERTOKEN>RPSDATAFILES= </OPTIONAL_USERTOKEN>
;//****************************************************************************
;//
;// Title:  	 Symphony_DataBridge_v3.tpl
;//
;// Type:   	 CodeGen Template
;//
;// Description: Template to define structure based Data Object
;//
;// Author: 	 Richard C. Morris, Synergex Technology Evangelist
;//
;// Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;//****************************************************************************
//****************************************************************************
// WARNING: This code was generated by CodeGen. Any changes that you
//  		make to this code will be overwritten if the code is regenerated!
//
// Template author: Richard C. Morris, Synergex Technology Evangelist
//
// Template Name:   Symphony Framework : <TEMPLATE>.tpl
//
//***************************************************************************
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Text;
using System.Runtime.InteropServices;
using System.IO;

using Symphony.Conductor.Model;
using System.Reflection;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace <NAMESPACE>
{

    ///<summary>
    ///$$Symphony Data Object$$ that is used to expose the proerties of a Synergy Repository structure.
    ///</summary>
	[JsonObject(MemberSerialization.OptIn)]
	public partial class <Structure_name>_Data : Symphony.Conductor.Model.DataObjectBase
	{
		private struct clsstr<Structure_name>
		{
<FIELD_LOOP>
<IF LANGUAGE>		
<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
<IF ALPHA>
<IF NOCHECKBOX>
			public string str<Field_sqlname>;
</IF NOCHECKBOX>
<IF CHECKBOX>
			public bool str<Field_sqlname>;
</IF CHECKBOX>
</IF ALPHA>
<IF USER>
<IF NOCHECKBOX>
			public string str<Field_sqlname>;
</IF NOCHECKBOX>
<IF CHECKBOX>
			public bool str<Field_sqlname>;
</IF CHECKBOX>
</IF USER>
<IF DECIMAL>
<IF PRECISION>
			public decimal str<Field_sqlname>;
</IF PRECISION>
<IF NOPRECISION>
<IF COERCEBOOLEAN>
			public bool str<Field_sqlname>;
<ELSE>
			public Int32 str<Field_sqlname>;
</IF COERCEBOOLEAN>
</IF NOPRECISION>
</IF DECIMAL>
<IF I1>
			public byte str<Field_sqlname>;
</IF I1>
<IF I2>
			public Int16 str<Field_sqlname>;
</IF I2>
<IF I4>
			public Int32 str<Field_sqlname>;
</IF I4>
<IF I8>
			public Int64 str<Field_sqlname>;
</IF I8>
<IF DATEORTIME>
<IF DATE_YYYYMMDD>
			public DateTime str<Field_sqlname>;
</IF DATE_YYYYMMDD>
<IF DATE_YYMMDD>
			public DateTime str<Field_sqlname>;
</IF DATE_YYMMDD>
<IF DATE_YYJJJ>
			public DateTime str<Field_sqlname>;
</IF DATE_YYJJJ>
<IF TIME_HHMM>
			public Int16 str<Field_sqlname>;
</IF TIME_HHMM>
<IF TIME_HHMMSS>
			public Int16 str<Field_sqlname>;
</IF TIME_HHMMSS>
</IF DATEORTIME>
<IF BOOLEAN>
			public bool str<Field_sqlname>;
</IF BOOLEAN>
</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
</IF LANGUAGE>		
</FIELD_LOOP>
		}
		private clsstr<Structure_name> <structure_name>_main;

		
        /// <summary>
        /// Collection of properties avaialbe for parsing by the JSON parser.
        /// </summary>
        public static List<System.Reflection.MemberInfo> SynergyMemberInfo;
        public static List<System.Reflection.MemberInfo> CSharpMemberInfo;

        static <Structure_name>_Data()
        {
            var objectType = typeof(<Structure_name>_Data);
            SynergyMemberInfo = new List<System.Reflection.MemberInfo>() { 
                RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "SerializableSynergyRecord") as System.Reflection.MemberInfo
            };
			defineSerialiazableDataElements();

            if (CSharpMemberInfo == null)
                DefineSerialiazableCSElements(null);
        }

		static partial void defineSerialiazableDataElements();
		
        public static void DefineSerialiazableCSElements(string[] fieldList)
        {
            if (CSharpMemberInfo == null)
                CSharpMemberInfo = new List<System.Reflection.MemberInfo>();
            else
                CSharpMemberInfo.Clear();

            var objectType = typeof(<Structure_name>_Data);

            if (fieldList == null)
            {
<FIELD_LOOP>
<IF LANGUAGE>		
<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
                CSharpMemberInfo.Add((RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "<Field_sqlname>") as @System.Reflection.MemberInfo));
</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
</IF LANGUAGE>		
</FIELD_LOOP>
            }
            else
            {
                foreach (string item in fieldList)
                {
                    CSharpMemberInfo.Add((RuntimeReflectionExtensions.GetRuntimeProperty(objectType,
                        string.Format("{0}{1}", item.Substring(0, 1).ToUpper(), item.Substring(1, item.Length - 1).ToLower())) as @System.Reflection.MemberInfo));
                }
            }
            if (DoneCSElements != null)
                DoneCSElements();
        }

        public delegate void DoneCSElementsEventHander();

        public static event DoneCSElementsEventHander DoneCSElements;

        /// <summary>
        /// Synergy Repository structure name
        /// </summary>
		public const string RPSStructureName = "<STRUCTURE_NOALIAS>";

        /// <summary>
        /// Synergy Repository structure size.
        /// </summary>
		public const Int32 RPSStructureSize = <STRUCTURE_SIZE>;

		/// <summary>
		///  Constructor, initialise the base fields.
		/// </summary>
		public <Structure_name>_Data() : base()
		{
			InitData();
			extendedConstructor();
		}

		//Expose fields as properties for data binding
<SYMPHONY_LOOPSTART>
<FIELD_LOOP>
<IF LANGUAGE>		
<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
		///<summary>
		///<FIELD_DESC>
		///</summary>
		[JsonProperty]
<IF ALPHA>
<IF NOCHECKBOX>
		public string <Field_sqlname>
</IF NOCHECKBOX>
<IF CHECKBOX>
		public bool <Field_sqlname>
</IF CHECKBOX>
</IF ALPHA>
<IF USER>
<IF NOCHECKBOX>
		public string <Field_sqlname>
</IF NOCHECKBOX>
<IF CHECKBOX>
		public bool <Field_sqlname>
</IF CHECKBOX>
</IF USER>
<IF DECIMAL>
<IF PRECISION>
		public decimal <Field_sqlname>
</IF PRECISION>
<IF NOPRECISION>
<IF COERCEBOOLEAN>
		public bool <Field_sqlname>
<ELSE>
		public Int32 <Field_sqlname>
</IF COERCEBOOLEAN>
</IF NOPRECISION>
</IF DECIMAL>
<IF I1>
		public byte <Field_sqlname>
</IF I1>
<IF I2>
		public Int16 <Field_sqlname>
</IF I2>
<IF I4>
		public Int32 <Field_sqlname>
</IF I4>
<IF I8>
		public Int64 <Field_sqlname>
</IF I8>
<IF DATEORTIME>
<IF DATE_YYYYMMDD>
		public DateTime <Field_sqlname>
</IF DATE_YYYYMMDD>
<IF DATE_YYMMDD>
		public DateTime <Field_sqlname>
</IF DATE_YYMMDD>
<IF DATE_YYJJJ>
		public DateTime <Field_sqlname>
</IF DATE_YYJJJ>
<IF TIME_HHMM>
		public DateTime <Field_sqlname>
</IF TIME_HHMM>
<IF TIME_HHMMSS>
		public DateTime <Field_sqlname>
</IF TIME_HHMMSS>
</IF DATEORTIME>
<IF BOOLEAN>
		public bool <Field_sqlname>
</IF BOOLEAN>
		{
			get
			{
<IF ALPHA>
<IF NOCHECKBOX>
				return <structure_name>_main.str<Field_sqlname>;
</IF NOCHECKBOX>
<IF CHECKBOX>
				return <structure_name>_main.str<Field_sqlname>;
</IF CHECKBOX>
</IF ALPHA>
<IF USER>
<IF NOCHECKBOX>
				return <structure_name>_main.str<Field_sqlname>;
</IF NOCHECKBOX>
<IF CHECKBOX>
				return <structure_name>_main.str<Field_sqlname>;
</IF CHECKBOX>
</IF USER>
<IF DECIMAL>
<IF PRECISION>
				return <structure_name>_main.str<Field_sqlname>;
</IF PRECISION>
<IF NOPRECISION>
<IF COERCEBOOLEAN>
				return <structure_name>_main.str<Field_sqlname>;
<ELSE>
				return <structure_name>_main.str<Field_sqlname>;
</IF COERCEBOOLEAN>
</IF NOPRECISION>
</IF DECIMAL>
<IF I1>
				return <structure_name>_main.str<Field_sqlname>;
</IF I1>
<IF I2>
				return <structure_name>_main.str<Field_sqlname>;
</IF I2>
<IF I4>
				return <structure_name>_main.str<Field_sqlname>;
</IF I4>
<IF I8>
				return <structure_name>_main.str<Field_sqlname>;
</IF I8>
<IF DATEORTIME>
<IF DATE_YYYYMMDD>
				return <structure_name>_main.str<Field_sqlname>;
</IF DATE_YYYYMMDD>
<IF DATE_YYMMDD>
				return <structure_name>_main.str<Field_sqlname>;
</IF DATE_YYMMDD>
<IF DATE_YYJJJ>
				return <structure_name>_main.str<Field_sqlname>;
</IF DATE_YYJJJ>
<IF TIME_HHMM>
				return <structure_name>_main.str<Field_sqlname>;
</IF TIME_HHMM>
<IF TIME_HHMMSS>
				return <structure_name>_main.str<Field_sqlname>;
</IF TIME_HHMMSS>
</IF DATEORTIME>
<IF BOOLEAN>
				return <structure_name>_main.str<Field_sqlname>;
</IF BOOLEAN>
			}
			set
			{
				<structure_name>_main.str<Field_sqlname> = value;
			}
		}
</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
</IF LANGUAGE>
</FIELD_LOOP>

        /// <summary>
        /// Single property that is serialized by the JSON parser.
        /// </summary>
        /// <remarks>
        /// By serializing a single proeprty improves the communication performance.
        /// </remarks>
        [JsonProperty]
        public byte[] SerializableSynergyRecord
        {
            get
            {
                return structureToByteArray(<structure_name>_main);
            }
            set
            {
               <structure_name>_main = byteArrayToStructure(value);
            }
        }

        /// <summary>
        /// Expose the underlying Synergy record .
        /// </summary>
        public override string SynergyRecord
        {
            get
            {
                throw new Exception("SynergyRecord property is not valid in a C# class");
            }
            set
            {
                throw new Exception("SynergyRecord property is not valid in a C# class");
            }
        }

        /// <summary>
        /// Method to initialize the class data.
        /// </summary>
		public override void InitData()
		{
<FIELD_LOOP>
<IF LANGUAGE>		
<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
<IF ALPHA>
<IF NOCHECKBOX>
			<structure_name>_main.str<Field_sqlname> = "";
</IF NOCHECKBOX>
<IF CHECKBOX>
			<structure_name>_main.str<Field_sqlname> = false;
</IF CHECKBOX>
</IF ALPHA>
<IF USER>
<IF NOCHECKBOX>
			<structure_name>_main.str<Field_sqlname> = "";
</IF NOCHECKBOX>
<IF CHECKBOX>
			<structure_name>_main.str<Field_sqlname> = false;
</IF CHECKBOX>
</IF USER>
<IF DECIMAL>
<IF PRECISION>
			<structure_name>_main.str<Field_sqlname> = 0.0M;
</IF PRECISION>
<IF NOPRECISION>
<IF COERCEBOOLEAN>
			<structure_name>_main.str<Field_sqlname> = false;
<ELSE>
			<structure_name>_main.str<Field_sqlname> = 0;
</IF COERCEBOOLEAN>
</IF NOPRECISION>
</IF DECIMAL>
<IF I1>
			<structure_name>_main.str<Field_sqlname> = 0;
</IF I1>
<IF I2>
			<structure_name>_main.str<Field_sqlname> = 0;
</IF I2>
<IF I4>
			<structure_name>_main.str<Field_sqlname> = 0;
</IF I4>
<IF I8>
			<structure_name>_main.str<Field_sqlname> = 0;
</IF I8>
<IF DATEORTIME>
<IF DATE_YYYYMMDD>
			<structure_name>_main.str<Field_sqlname> = DateTime.Today;
</IF DATE_YYYYMMDD>
<IF DATE_YYMMDD>
			<structure_name>_main.str<Field_sqlname> = DateTime.Today;
</IF DATE_YYMMDD>
<IF DATE_YYJJJ>
			<structure_name>_main.str<Field_sqlname> = DateTime.Today;
</IF DATE_YYJJJ>
<IF TIME_HHMM>
			<structure_name>_main.str<Field_sqlname> = 0;
</IF TIME_HHMM>
<IF TIME_HHMMSS>
			<structure_name>_main.str<Field_sqlname> = 0;
</IF TIME_HHMMSS>
</IF DATEORTIME>
<IF BOOLEAN>
			<structure_name>_main.str<Field_sqlname> = false;
</IF BOOLEAN>
</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
</IF LANGUAGE>		
</FIELD_LOOP>
		}

        private static byte[] structureToByteArray(clsstr<Structure_name> tmpSTRUCT)
        {
			MemoryStream stream = new MemoryStream();
			using (BinaryWriter writer = new BinaryWriter(stream))
			{
<FIELD_LOOP>
<IF LANGUAGE>		
<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
<IF ALPHA>
<IF NOCHECKBOX>
				writer.Write(tmpSTRUCT.str<Field_sqlname>);
</IF NOCHECKBOX>
<IF CHECKBOX>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
</IF CHECKBOX>
</IF ALPHA>
<IF USER>
<IF NOCHECKBOX>
				writer.Write(tmpSTRUCT.str<Field_sqlname>);
</IF NOCHECKBOX>
<IF CHECKBOX>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
</IF CHECKBOX>
</IF USER>
<IF DECIMAL>
<IF PRECISION>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
</IF PRECISION>
<IF NOPRECISION>
<IF COERCEBOOLEAN>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
<ELSE>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
</IF COERCEBOOLEAN>
</IF NOPRECISION>
</IF DECIMAL>
<IF I1>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
</IF I1>
<IF I2>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
</IF I2>
<IF I4>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
</IF I4>
<IF I8>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
</IF I8>
<IF DATEORTIME>
<IF DATE_YYYYMMDD>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'Z'"));
</IF DATE_YYYYMMDD>
<IF DATE_YYMMDD>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
</IF DATE_YYMMDD>
<IF DATE_YYJJJ>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
</IF DATE_YYJJJ>
<IF TIME_HHMM>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
</IF TIME_HHMM>
<IF TIME_HHMMSS>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
</IF TIME_HHMMSS>
</IF DATEORTIME>
<IF BOOLEAN>
				writer.Write(tmpSTRUCT.str<Field_sqlname>.ToString());
</IF BOOLEAN>
</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
</IF LANGUAGE>		
</FIELD_LOOP>
			}
            return stream.ToArray();
        }

        private static clsstr<Structure_name> byteArrayToStructure(byte[] byteArray)
        {
			clsstr<Structure_name> tmpSTRUCT = new clsstr<Structure_name>();
			MemoryStream stream = new MemoryStream(byteArray);
			using(BinaryReader reader = new BinaryReader(stream))
			{
<FIELD_LOOP>
<IF LANGUAGE>		
<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
<IF ALPHA>
<IF NOCHECKBOX>
				tmpSTRUCT.str<Field_sqlname> = reader.ReadString();
</IF NOCHECKBOX>
<IF CHECKBOX>
				{
					string tmpString;
					tmpString = reader.ReadString();
					tmpSTRUCT.str<Field_sqlname> = Convert.ToBoolean(tmpString);
				}
</IF CHECKBOX>
</IF ALPHA>
<IF USER>
<IF NOCHECKBOX>
				tmpSTRUCT.str<Field_sqlname> = reader.ReadString();
</IF NOCHECKBOX>
<IF CHECKBOX>
				{
					string tmpString;
					tmpString = reader.ReadString();
					tmpSTRUCT.str<Field_sqlname> = Convert.ToBoolean(tmpString);
				}
</IF CHECKBOX>
</IF USER>
<IF DECIMAL>
<IF PRECISION>
				{
					string tmpString;
					tmpString = reader.ReadString();
					tmpSTRUCT.str<Field_sqlname> = Convert.ToDecimal(tmpString);
				}
</IF PRECISION>
<IF NOPRECISION>
<IF COERCEBOOLEAN>
				{
					string tmpString;
					tmpString = reader.ReadString();
					tmpSTRUCT.str<Field_sqlname> = Convert.ToBoolean(tmpString);
				}
<ELSE>
				{
					string tmpString;
					tmpString = reader.ReadString();
					tmpSTRUCT.str<Field_sqlname> = Convert.ToInt32(tmpString);
				}
</IF COERCEBOOLEAN>
</IF NOPRECISION>
</IF DECIMAL>
<IF I1>
				{
					string tmpString;
					tmpString = reader.ReadString();
					tmpSTRUCT.str<Field_sqlname> = Convert.ToInt16(tmpString);
				}
</IF I1>
<IF I2>
				{
					string tmpString;
					tmpString = reader.ReadString();
					tmpSTRUCT.str<Field_sqlname> = Convert.ToInt16(tmpString);
				}
</IF I2>
<IF I4>
				{
					string tmpString;
					tmpString = reader.ReadString();
					tmpSTRUCT.str<Field_sqlname> = Convert.ToInt32(tmpString);
				}
</IF I4>
<IF I8>
				{
					string tmpString;
					tmpString = reader.ReadString();
					tmpSTRUCT.str<Field_sqlname> = Convert.ToInt64(tmpString);
				}
</IF I8>
<IF DATEORTIME>
<IF DATE_YYYYMMDD>
				{
					string tmpString;
					tmpString = reader.ReadString();
					if (tmpString.Length > 0) tmpSTRUCT.str<Field_sqlname> = Convert.ToDateTime(tmpString);
				}
</IF DATE_YYYYMMDD>
<IF DATE_YYMMDD>
				{
					string tmpString;
					tmpString = reader.ReadString();
					if (tmpString.Length > 0) tmpSTRUCT.str<Field_sqlname> = Convert.ToDateTime(tmpString);
				}
</IF DATE_YYMMDD>
<IF DATE_YYJJJ>
				{
					string tmpString;
					tmpString = reader.ReadString();
					if (tmpString.Length > 0) tmpSTRUCT.str<Field_sqlname> = Convert.ToDateTime(tmpString);
				}
</IF DATE_YYJJJ>
<IF TIME_HHMM>
				{
					string tmpString;
					tmpString = reader.ReadString();
					tmpSTRUCT.str<Field_sqlname> = Convert.ToInt32(tmpString);
				}
</IF TIME_HHMM>
<IF TIME_HHMMSS>
				{
					string tmpString;
					tmpString = reader.ReadString();
					tmpSTRUCT.str<Field_sqlname> = Convert.ToInt32(tmpString);
				}
</IF TIME_HHMMSS>
</IF DATEORTIME>
<IF BOOLEAN>
				{
					string tmpString;
					tmpString = reader.ReadString();
					tmpSTRUCT.str<Field_sqlname> = Convert.ToBoolean(tmpString);
				}
</IF BOOLEAN>
</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
</IF LANGUAGE>		
</FIELD_LOOP>
			}
			return tmpSTRUCT;
        }

        /// <summary>
        /// Method to allow the focus request for a class property.
        /// </summary>
        /// <param name="fieldName"></param>
        public override void SetFieldFocusFlag(string fieldName)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Perform intial class validation.
        /// </summary>
        public override void InitialValidateData()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Expose the underlying Synergy structure size.
        /// </summary>
		public override Int32 StructureSize
		{
			get { return RPSStructureSize; }
		}
	}
}

