<CODEGEN_FILENAME><Structure_name>_DataREST.CodeGen.dbc</CODEGEN_FILENAME>
;//****************************************************************************
;//
;// Title:       Symphony_DataREST.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to define structure based Data Object
;//
;// Author:      Richard C. Morris, RCP Consultants
;//
;// Copyright (c) 2019, RCP Consultants, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;//****************************************************************************
;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author: Richard C. Morris, RCP Consultants
;;
;; Template Name:   Symphony Framework : <TEMPLATE>.tpl
;;
;;***************************************************************************
import System
import System.Collections
import System.Collections.Generic
import System.Collections.ObjectModel
import System.Collections.Specialized
import System.Text
import System.Runtime.InteropServices
import System.IO

import Symphony.Conductor.Model
import Symphony.Conductor.Converters

import System.Reflection
import System.Runtime.Serialization
import Newtonsoft.Json


namespace <NAMESPACE>

    ;;define a structure that we can use around the applicaiton
	{JsonObject(MemberSerialization.OptIn)}
    public partial class <Structure_name>_DataREST extends DataObjectBase

        private m<Structure_name>_main	,str<Structure_name>
		private mFieldList				,string

        ;;use symphony converters
        private mDateConveter              ,@SynergyDecimalDateConverter ,new SynergyDecimalDateConverter()
        private mAlphaConveter             ,@SynergyAlphaConverter ,new SynergyAlphaConverter()
        private mDecimalConveter           ,@SynergyDecimalConverter ,new SynergyDecimalConverter()
        private mImpliedDecimalConveter    ,@SynergyImpliedDecimalConverter  ,new SynergyImpliedDecimalConverter()
        private mIntegerConveter           ,@SynergyIntConverter ,new SynergyIntConverter()
        private mAlphaYNConveter           ,@SynergyAlphaYNConverter, new SynergyAlphaYNConverter()

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method <Structure_name>_DataREST
            endparams
            parent()
        proc
			mFieldList = string.Empty
			if (SynergyMemberInfo == ^null)
				DefineSerialiazableDataElements(^null)
        endmethod

		;;; <summary>
		;;;  Constructor, initialise the base fields
		;;; </summary>
		public method <Structure_name>_DataREST
			in req SynRec						,string
			endparams
			parent()
		proc
			mFieldList = string.Empty
			SynergyRecord = synRec
			if (SynergyMemberInfo == ^null)
				DefineSerialiazableDataElements(^null)
		endmethod

		;;enable the ability to define which "properties" are serialized as JSON

		public static SynergyMemberInfo, @List<System.Reflection.MemberInfo>

		public static method DefineSerialiazableDataElements	,void
			in req fieldList									,@List<string>
			endparams
		proc

			if (SynergyMemberInfo == ^null)
			then
				SynergyMemberInfo = new List<System.Reflection.MemberInfo>()
			else
				SynergyMemberInfo.Clear()

			data objectType = ^typeof(<Structure_name>_DataREST)
			data item	,string
			if (fieldList == ^null) then
			begin
				;;this is required for select *
<FIELD_LOOP>
<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
<IF LANGUAGE>
				SynergyMemberInfo.Add(^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "<Field_sqlname>"), @System.Reflection.MemberInfo))
</IF LANGUAGE>
</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
</FIELD_LOOP>
			
			end
			else
			begin
				foreach item in fieldList
				begin
					SynergyMemberInfo.Add(^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, item(1:1) + item(2,item.Length).ToLower()), @System.Reflection.MemberInfo))
				end
			end

		endmethod

        ;;Expose fields as properties for data binding
<SYMPHONY_LOOPSTART>
<FIELD_LOOP>
<IF LANGUAGE>
<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>

        ;;<Field_name>
        {JsonProperty}
<IF DATE_YYYYMMDD>
        public property <Field_sqlname>, <FIELD_CSTYPE>?
<ELSE>
<IF TIME>
        public property <Field_sqlname>, int
<ELSE>
<IF AUTO_TIMESTAMP>
        public property <Field_sqlname>, DateTime?
<ELSE>
<IF BOOLEAN>
        public property <Field_sqlname>, Boolean
<ELSE>
        public property <Field_sqlname>, <FIELD_CSTYPE>
</IF BOOLEAN>
</IF AUTO_TIMESTAMP>
</IF TIME>
</IF DATE_YYYYMMDD>
<IF AUTO_TIMESTAMP>
            method get
            proc
<ELSE>
            method get
            proc
</IF AUTO_TIMESTAMP>
<IF ALPHA>
                mreturn (<FIELD_CSTYPE>)mAlphaConveter.Convert(m<Structure_name>_main.str_<field_name>, ^null, ^null, ^null)
</IF ALPHA>
<IF DATE_YYYYMMDD>
<IF DATETODAY>
                mreturn (<FIELD_CSTYPE>?)mDateConveter.Convert(m<Structure_name>_main.str_<field_name>, ^null, "", ^null)
<ELSE>
                mreturn (<FIELD_CSTYPE>?)mDateConveter.Convert(m<Structure_name>_main.str_<field_name>, ^null, "NODEFAULTODAY", ^null)
</IF DATETODAY>
</IF DATE_YYYYMMDD>
<IF DECIMAL>
<IF PRECISION>
                mreturn (<FIELD_CSTYPE>)mImpliedDecimalConveter.Convert(m<Structure_name>_main.str_<field_name>, ^null, ^null, ^null)
<ELSE>
                mreturn Convert.ToInt64(mDecimalConveter.Convert(m<Structure_name>_main.str_<field_name>, ^null, ^null, ^null))
</IF PRECISION>
</IF DECIMAL>
<IF AUTO_TIMESTAMP>
                data syndate	,a20	,%datetime_from_i8(m<Structure_name>_main.str_<field_name>)
                mreturn new DateTime(%integer(syndate(1:4)),%integer(syndate(5:2)),%integer(syndate(7:2)),%integer(syndate(9:2)),%integer(syndate(11:2)),%integer(syndate(13:2)))
</IF AUTO_TIMESTAMP>
<IF INTEGER>
                mreturn (<FIELD_CSTYPE>)mIntegerConveter.Convert(m<Structure_name>_main.str_<field_name>, ^null, ^null, ^null)
</IF INTEGER>
<IF TIME>
                mreturn Convert.ToInt32(mDecimalConveter.Convert(m<Structure_name>_main.str_<field_name>, ^null, ^null, ^null))
</IF TIME>
<IF BOOLEAN>
                mreturn m<Structure_name>_main.str_<field_name>
</IF BOOLEAN>
            endmethod
            method set
            proc
<IF ALPHA>
                m<Structure_name>_main.str_<field_name> = (<FIELD_TYPE>)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
</IF ALPHA>
<IF DATE_YYYYMMDD>
                m<Structure_name>_main.str_<field_name> = (<FIELD_TYPE>)mDateConveter.ConvertBack(value, ^null, ^null, ^null)
</IF DATE_YYYYMMDD>
<IF DECIMAL>
<IF PRECISION>
                m<Structure_name>_main.str_<field_name> = (ID)mImpliedDecimalConveter.ConvertBack(value, ^null, ^null, ^null)
<ELSE>
                m<Structure_name>_main.str_<field_name> = (<FIELD_TYPE>)mDecimalConveter.ConvertBack(value, ^null, ^null, ^null)
</IF PRECISION>
</IF DECIMAL>
<IF AUTO_TIMESTAMP>
</IF AUTO_TIMESTAMP>
<IF INTEGER>
                m<Structure_name>_main.str_<field_name> = (<FIELD_TYPE>)mIntegerConveter.ConvertBack(value, ^null, ^null, ^null)
</IF INTEGER>
<IF TIME>
                m<Structure_name>_main.str_<field_name> = (<FIELD_TYPE>)mDecimalConveter.ConvertBack(value, ^null, ^null, ^null)
</IF TIME>
<IF BOOLEAN>
                m<Structure_name>_main.str_<field_name> = value
</IF BOOLEAN>
				if (mFieldList.Length == 0) then
					mFieldList = mFieldList + "<Field_sqlname>"
				else
					mFieldList = mFieldList + "," + "<Field_sqlname>"
            endmethod
        endproperty
</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
</IF LANGUAGE>
</FIELD_LOOP>

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, String
            method get
            proc
                mreturn (string)m<Structure_name>_main
            endmethod
            method set
            proc
                m<Structure_name>_main = value
            endmethod
        endproperty

        public override method InitialValidateData, void
            endparams
        proc
        endmethod
    
        public override method SetFieldFocusFlag    ,void
        in req fieldName                        ,String
            endparams
        proc
        endmethod

        public override property StructureSize	,Int32
            method get
            proc
                mreturn <STRUCTURE_SIZE>
            endmethod
        endproperty
			
		public property FieldList	,string
			method get
			proc
				mreturn mFieldList
			endmethod
		endproperty
		
    endclass
endnamespace

